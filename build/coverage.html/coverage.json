{"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":2,"38":2,"39":1,"40":2,"41":2,"42":1,"43":2,"44":2,"45":1,"46":2,"47":2,"48":1,"49":1,"50":1,"51":1,"52":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1,1],"10":[1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":2,"9":2,"10":2,"11":2,"12":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":102,"loc":{"start":{"line":102,"column":83},"end":{"line":105,"column":10}},"skip":true},"7":{"name":"(anonymous_7)","line":113,"loc":{"start":{"line":113,"column":77},"end":{"line":116,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":129,"loc":{"start":{"line":129,"column":12},"end":{"line":129,"column":40}},"skip":true},"9":{"name":"(anonymous_9)","line":137,"loc":{"start":{"line":137,"column":77},"end":{"line":140,"column":10}},"skip":true},"10":{"name":"(anonymous_10)","line":148,"loc":{"start":{"line":148,"column":83},"end":{"line":151,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":159,"loc":{"start":{"line":159,"column":79},"end":{"line":162,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":170,"loc":{"start":{"line":170,"column":75},"end":{"line":173,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":185,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":184,"column":5}},"24":{"start":{"line":92,"column":8},"end":{"line":94,"column":63}},"25":{"start":{"line":95,"column":8},"end":{"line":95,"column":14}},"26":{"start":{"line":102,"column":8},"end":{"line":111,"column":10},"skip":true},"27":{"start":{"line":109,"column":12},"end":{"line":109,"column":55},"skip":true},"28":{"start":{"line":110,"column":12},"end":{"line":110,"column":48},"skip":true},"29":{"start":{"line":113,"column":8},"end":{"line":126,"column":10},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":76},"skip":true},"31":{"start":{"line":121,"column":12},"end":{"line":121,"column":73},"skip":true},"32":{"start":{"line":122,"column":12},"end":{"line":122,"column":74},"skip":true},"33":{"start":{"line":123,"column":12},"end":{"line":123,"column":79},"skip":true},"34":{"start":{"line":124,"column":12},"end":{"line":124,"column":25},"skip":true},"35":{"start":{"line":125,"column":12},"end":{"line":125,"column":45},"skip":true},"36":{"start":{"line":128,"column":8},"end":{"line":135,"column":14},"skip":true},"37":{"start":{"line":133,"column":16},"end":{"line":133,"column":29},"skip":true},"38":{"start":{"line":134,"column":16},"end":{"line":134,"column":55},"skip":true},"39":{"start":{"line":137,"column":8},"end":{"line":146,"column":10},"skip":true},"40":{"start":{"line":144,"column":12},"end":{"line":144,"column":25},"skip":true},"41":{"start":{"line":145,"column":12},"end":{"line":145,"column":45},"skip":true},"42":{"start":{"line":148,"column":8},"end":{"line":157,"column":10},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":25},"skip":true},"44":{"start":{"line":156,"column":12},"end":{"line":156,"column":48},"skip":true},"45":{"start":{"line":159,"column":8},"end":{"line":168,"column":10},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":25},"skip":true},"47":{"start":{"line":167,"column":12},"end":{"line":167,"column":46},"skip":true},"48":{"start":{"line":170,"column":8},"end":{"line":179,"column":10},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":94},"skip":true},"50":{"start":{"line":178,"column":12},"end":{"line":178,"column":48},"skip":true},"51":{"start":{"line":182,"column":8},"end":{"line":182,"column":35},"skip":true},"52":{"start":{"line":183,"column":8},"end":{"line":183,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":95,"column":14}},{"start":{"line":101,"column":4},"end":{"line":183,"column":14},"skip":true}]},"9":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":18},"end":{"line":92,"column":32}},{"start":{"line":93,"column":12},"end":{"line":93,"column":53}},{"start":{"line":94,"column":12},"end":{"line":94,"column":61}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":45},"end":{"line":102,"column":79},"skip":true},{"start":{"line":102,"column":83},"end":{"line":111,"column":9},"skip":true}]},"11":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":42},"end":{"line":113,"column":73},"skip":true},{"start":{"line":113,"column":77},"end":{"line":126,"column":9},"skip":true}]},"12":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":48},"end":{"line":128,"column":85},"skip":true},{"start":{"line":129,"column":12},"end":{"line":135,"column":13},"skip":true}]},"13":{"line":137,"type":"binary-expr","locations":[{"start":{"line":137,"column":42},"end":{"line":137,"column":73},"skip":true},{"start":{"line":137,"column":77},"end":{"line":146,"column":9},"skip":true}]},"14":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":45},"end":{"line":148,"column":79},"skip":true},{"start":{"line":148,"column":83},"end":{"line":157,"column":9},"skip":true}]},"15":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":43},"end":{"line":159,"column":75},"skip":true},{"start":{"line":159,"column":79},"end":{"line":168,"column":9},"skip":true}]},"16":{"line":170,"type":"binary-expr","locations":[{"start":{"line":170,"column":41},"end":{"line":170,"column":71},"skip":true},{"start":{"line":170,"column":75},"end":{"line":179,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_watson_developer_cloud */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"92":1,"95":1,"102":1,"109":1,"110":1,"113":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"128":1,"133":2,"134":2,"137":1,"144":2,"145":2,"148":1,"155":2,"156":2,"159":1,"166":2,"167":2,"170":1,"177":1,"178":1,"182":1,"183":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/lib.npmtest_watson_developer_cloud.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/lib.npmtest_watson_developer_cloud.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":67}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":73}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_watson_developer_cloud */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_watson_developer_cloud = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_watson_developer_cloud = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":2,"38":2,"39":2,"40":2,"41":0,"42":2,"43":2,"44":2,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,2],"16":[2,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":314,"loc":{"start":{"line":314,"column":32},"end":{"line":314,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":325,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":324,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":53},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":294,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":302,"column":8},"end":{"line":302,"column":82},"skip":true},"70":{"start":{"line":305,"column":8},"end":{"line":307,"column":9},"skip":true},"71":{"start":{"line":306,"column":12},"end":{"line":306,"column":82},"skip":true},"72":{"start":{"line":309,"column":8},"end":{"line":311,"column":9},"skip":true},"73":{"start":{"line":310,"column":12},"end":{"line":310,"column":18},"skip":true},"74":{"start":{"line":312,"column":8},"end":{"line":312,"column":54},"skip":true},"75":{"start":{"line":313,"column":8},"end":{"line":313,"column":69},"skip":true},"76":{"start":{"line":314,"column":8},"end":{"line":322,"column":36},"skip":true},"77":{"start":{"line":315,"column":12},"end":{"line":315,"column":61},"skip":true},"78":{"start":{"line":316,"column":12},"end":{"line":319,"column":13},"skip":true},"79":{"start":{"line":317,"column":16},"end":{"line":317,"column":75},"skip":true},"80":{"start":{"line":318,"column":16},"end":{"line":318,"column":23},"skip":true},"81":{"start":{"line":320,"column":12},"end":{"line":320,"column":38},"skip":true},"82":{"start":{"line":321,"column":12},"end":{"line":321,"column":27},"skip":true},"83":{"start":{"line":323,"column":8},"end":{"line":323,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":66}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":323,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":295,"type":"binary-expr","locations":[{"start":{"line":295,"column":12},"end":{"line":295,"column":80},"skip":true},{"start":{"line":296,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":302,"type":"binary-expr","locations":[{"start":{"line":302,"column":43},"end":{"line":302,"column":75},"skip":true},{"start":{"line":302,"column":79},"end":{"line":302,"column":81},"skip":true}]},"25":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true},{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true}]},"26":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true},{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true}]},"27":{"line":312,"type":"binary-expr","locations":[{"start":{"line":312,"column":27},"end":{"line":312,"column":43},"skip":true},{"start":{"line":312,"column":47},"end":{"line":312,"column":53},"skip":true}]},"28":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true},{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-watson-developer-cloud && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_watson_developer_cloud */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_watson_developer_cloud","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught.stack);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_watson_developer_cloud.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        local.assetsDict['/assets.npmtest_watson_developer_cloud.rollup.js'] =","            local.assetsDict['/assets.npmtest_watson_developer_cloud.rollup.js'] ||","            local.fs.readFileSync(","                // buildCustomOrg-hack","                local.npmtest_watson_developer_cloud.__dirname +","                    '/lib.npmtest_watson_developer_cloud.js',","                'utf8'","            ).replace((/^#!/), '//');","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":2,"127":2,"128":2,"129":2,"130":1,"133":2,"134":2,"139":2,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"294":1,"302":1,"305":1,"306":1,"309":1,"310":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"320":1,"321":1,"323":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":22,"26":22,"27":22,"28":22,"29":22,"30":1,"31":19,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":6,"41":0},"b":{"1":[22,19],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":22,"2":19,"3":0,"4":6,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":65,"loc":{"start":{"line":65,"column":29},"end":{"line":65,"column":43}}},"2":{"name":"(anonymous_2)","line":73,"loc":{"start":{"line":73,"column":39},"end":{"line":73,"column":61}}},"3":{"name":"(anonymous_3)","line":78,"loc":{"start":{"line":78,"column":11},"end":{"line":78,"column":29}}},"4":{"name":"(anonymous_4)","line":100,"loc":{"start":{"line":100,"column":140},"end":{"line":102,"column":2}}},"5":{"name":"(anonymous_5)","line":107,"loc":{"start":{"line":107,"column":11},"end":{"line":107,"column":22}}}},"statementMap":{"1":{"start":{"line":22,"column":0},"end":{"line":22,"column":62}},"2":{"start":{"line":23,"column":0},"end":{"line":23,"column":61}},"3":{"start":{"line":24,"column":0},"end":{"line":24,"column":57}},"4":{"start":{"line":26,"column":0},"end":{"line":26,"column":56}},"5":{"start":{"line":28,"column":0},"end":{"line":28,"column":54}},"6":{"start":{"line":29,"column":0},"end":{"line":29,"column":79}},"7":{"start":{"line":31,"column":0},"end":{"line":31,"column":42}},"8":{"start":{"line":33,"column":0},"end":{"line":33,"column":48}},"9":{"start":{"line":34,"column":0},"end":{"line":34,"column":73}},"10":{"start":{"line":36,"column":0},"end":{"line":36,"column":67}},"11":{"start":{"line":38,"column":0},"end":{"line":38,"column":69}},"12":{"start":{"line":39,"column":0},"end":{"line":39,"column":67}},"13":{"start":{"line":41,"column":0},"end":{"line":41,"column":82}},"14":{"start":{"line":43,"column":0},"end":{"line":43,"column":88}},"15":{"start":{"line":45,"column":0},"end":{"line":45,"column":69}},"16":{"start":{"line":46,"column":0},"end":{"line":46,"column":69}},"17":{"start":{"line":48,"column":0},"end":{"line":48,"column":62}},"18":{"start":{"line":50,"column":0},"end":{"line":50,"column":56}},"19":{"start":{"line":52,"column":0},"end":{"line":52,"column":56}},"20":{"start":{"line":54,"column":0},"end":{"line":54,"column":55}},"21":{"start":{"line":56,"column":0},"end":{"line":56,"column":65}},"22":{"start":{"line":58,"column":0},"end":{"line":58,"column":65}},"23":{"start":{"line":64,"column":0},"end":{"line":64,"column":29}},"24":{"start":{"line":65,"column":0},"end":{"line":71,"column":3}},"25":{"start":{"line":66,"column":2},"end":{"line":66,"column":31}},"26":{"start":{"line":67,"column":2},"end":{"line":67,"column":38}},"27":{"start":{"line":68,"column":2},"end":{"line":68,"column":44}},"28":{"start":{"line":69,"column":2},"end":{"line":69,"column":58}},"29":{"start":{"line":70,"column":2},"end":{"line":70,"column":45}},"30":{"start":{"line":73,"column":0},"end":{"line":95,"column":3}},"31":{"start":{"line":74,"column":2},"end":{"line":94,"column":5}},"32":{"start":{"line":79,"column":6},"end":{"line":79,"column":30}},"33":{"start":{"line":82,"column":6},"end":{"line":84,"column":7}},"34":{"start":{"line":83,"column":8},"end":{"line":83,"column":31}},"35":{"start":{"line":86,"column":6},"end":{"line":86,"column":70}},"36":{"start":{"line":88,"column":6},"end":{"line":90,"column":7}},"37":{"start":{"line":89,"column":8},"end":{"line":89,"column":89}},"38":{"start":{"line":92,"column":6},"end":{"line":92,"column":34}},"39":{"start":{"line":100,"column":0},"end":{"line":111,"column":3}},"40":{"start":{"line":103,"column":2},"end":{"line":110,"column":5}},"41":{"start":{"line":108,"column":6},"end":{"line":108,"column":80}}},"branchMap":{"1":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":28},"end":{"line":69,"column":51}},{"start":{"line":69,"column":55},"end":{"line":69,"column":57}}]},"2":{"line":79,"type":"binary-expr","locations":[{"start":{"line":79,"column":16},"end":{"line":79,"column":23}},{"start":{"line":79,"column":27},"end":{"line":79,"column":29}}]},"3":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":6},"end":{"line":82,"column":6}},{"start":{"line":82,"column":6},"end":{"line":82,"column":6}}]},"4":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":6},"end":{"line":88,"column":6}},{"start":{"line":88,"column":6},"end":{"line":88,"column":6}}]}},"code":["/**"," * Copyright 2014 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","/**"," * @module watson-developer-cloud"," */","exports.AlchemyDataNewsV1 = require('./alchemy-data-news/v1');","exports.AlchemyLanguageV1 = require('./alchemy-language/v1');","exports.AlchemyVisionV1 = require('./alchemy-vision/v1');","","exports.AuthorizationV1 = require('./authorization/v1');","","exports.ConversationV1 = require('./conversation/v1');","exports.ConversationV1Experimental = require('./conversation/v1-experimental');","","exports.DialogV1 = require('./dialog/v1');","","exports.DiscoveryV1 = require('./discovery/v1');","exports.DiscoveryV1Experimental = require('./discovery/v1-experimental');","","exports.DocumentConversionV1 = require('./document-conversion/v1');","","exports.LanguageTranslationV2 = require('./language-translation/v2');","exports.LanguageTranslatorV2 = require('./language-translator/v2');","","exports.NaturalLanguageClassifierV1 = require('./natural-language-classifier/v1');","","exports.NaturalLanguageUnderstandingV1 = require('./natural-language-understanding/v1');","","exports.PersonalityInsightsV2 = require('./personality-insights/v2');","exports.PersonalityInsightsV3 = require('./personality-insights/v3');","","exports.RetrieveAndRankV1 = require('./retrieve-and-rank/v1');","","exports.SpeechToTextV1 = require('./speech-to-text/v1');","","exports.TextToSpeechV1 = require('./text-to-speech/v1');","","exports.ToneAnalyzerV3 = require('./tone-analyzer/v3');","","exports.TradeoffAnalyticsV1 = require('./tradeoff-analytics/v1');","","exports.VisualRecognitionV3 = require('./visual-recognition/v3');","","// adding shim constructors for backwards compatibility","","// 2-d map of snake_case service names & version => constructor function","// e.g. servicesByVersion.text_to_speech.v1 === exports.TextToSpeechV1;","const servicesByVersion = {};","Object.keys(exports).forEach(function(key) {","  const Service = exports[key];","  const name = Service.prototype.name;","  const version = Service.prototype.version;","  servicesByVersion[name] = servicesByVersion[name] || {};","  servicesByVersion[name][version] = Service;","});","","Object.keys(servicesByVersion).forEach(function(serviceName) {","  Object.defineProperty(exports, serviceName, {","    enumerable: false,","    configurable: true,","    writable: true,","    value: function(options) {","      options = options || {};","","      // previously, AlchemyAPI did not require a version to be specified","      if (serviceName.indexOf('alchemy_') === 0) {","        options.version = 'v1';","      }","","      const Service = servicesByVersion[serviceName][options.version];","","      if (!Service) {","        throw new Error('Unable to find ' + serviceName + ' version ' + options.version);","      }","","      return new Service(options);","    }","  });","});","","// removed services","// we don't want these services listed (so non-enumerable), but we do want a clear error message","// if old code happens to try using one","['concept_insights', 'relationship_extraction', 'message_resonance', 'question_and_answer', 'visual_insights', 'concept_expansion'].forEach(function(","  serviceName",") {","  Object.defineProperty(exports, serviceName, {","    enumerable: false,","    configurable: true,","    writable: true,","    value: function() {","      throw new Error('The ' + serviceName + ' service is no longer available');","    }","  });","});",""],"l":{"22":1,"23":1,"24":1,"26":1,"28":1,"29":1,"31":1,"33":1,"34":1,"36":1,"38":1,"39":1,"41":1,"43":1,"45":1,"46":1,"48":1,"50":1,"52":1,"54":1,"56":1,"58":1,"64":1,"65":1,"66":22,"67":22,"68":22,"69":22,"70":22,"73":1,"74":19,"79":0,"82":0,"83":0,"86":0,"88":0,"89":0,"92":0,"100":1,"103":6,"108":0}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/alchemy-data-news/v1.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/alchemy-data-news/v1.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":0,"16":1},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"AlchemyDataNewsV1","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":36}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":38},"end":{"line":46,"column":65}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":33}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":56}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":29}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":66}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":65}},"6":{"start":{"line":29,"column":0},"end":{"line":31,"column":1}},"7":{"start":{"line":30,"column":2},"end":{"line":30,"column":41}},"8":{"start":{"line":32,"column":0},"end":{"line":32,"column":53}},"9":{"start":{"line":34,"column":0},"end":{"line":34,"column":55}},"10":{"start":{"line":35,"column":0},"end":{"line":35,"column":43}},"11":{"start":{"line":36,"column":0},"end":{"line":36,"column":69}},"12":{"start":{"line":46,"column":0},"end":{"line":60,"column":2}},"13":{"start":{"line":47,"column":2},"end":{"line":47,"column":24}},"14":{"start":{"line":49,"column":2},"end":{"line":58,"column":4}},"15":{"start":{"line":59,"column":2},"end":{"line":59,"column":62}},"16":{"start":{"line":62,"column":0},"end":{"line":62,"column":35}}},"branchMap":{"1":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":11},"end":{"line":47,"column":17}},{"start":{"line":47,"column":21},"end":{"line":47,"column":23}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const extend = require('extend');","const requestFactory = require('../lib/requestwrapper');","const util = require('util');","const BaseServiceAlchemy = require('../lib/base_service_alchemy');","const errorFormatter = require('../lib/alchemy_error_formatter');","","/**"," * @param {Object} options"," * @constructor"," */","function AlchemyDataNewsV1(options) {","  BaseServiceAlchemy.call(this, options);","}","util.inherits(AlchemyDataNewsV1, BaseServiceAlchemy);","","AlchemyDataNewsV1.prototype.name = 'alchemy_data_news';","AlchemyDataNewsV1.prototype.version = 'v1';","AlchemyDataNewsV1.URL = 'https://gateway-a.watsonplatform.net/calls';","","/**"," * Extracts a grouped, ranked list of named entities (people, companies,"," * organizations, etc.) from text, a URL or HTML."," * @param {Object} params"," * @param params.end"," * @param params.start"," * @param {Function} callback"," */","AlchemyDataNewsV1.prototype.getNews = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/data/GetNews',","      method: 'GET',","      json: true,","      qs: extend({}, params, { outputMode: 'json' }) // change default output to json","    },","    requiredParams: ['end', 'start'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, errorFormatter(callback));","};","","module.exports = AlchemyDataNewsV1;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"29":1,"30":0,"32":1,"34":1,"35":1,"36":1,"46":1,"47":0,"49":0,"59":0,"62":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/lib/requestwrapper.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/lib/requestwrapper.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"parsePath","line":33,"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":33}}},"2":{"name":"(anonymous_2)","line":38,"loc":{"start":{"line":38,"column":30},"end":{"line":38,"column":46}}},"3":{"name":"formatErrorIfExists","line":50,"loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":33}}},"4":{"name":"(anonymous_4)","line":51,"loc":{"start":{"line":51,"column":9},"end":{"line":51,"column":41}}},"5":{"name":"(anonymous_5)","line":77,"loc":{"start":{"line":77,"column":40},"end":{"line":77,"column":54}}},"6":{"name":"(anonymous_6)","line":85,"loc":{"start":{"line":85,"column":32},"end":{"line":85,"column":46}}},"7":{"name":"createRequest","line":114,"loc":{"start":{"line":114,"column":0},"end":{"line":114,"column":46}}},"8":{"name":"(anonymous_8)","line":124,"loc":{"start":{"line":124,"column":78},"end":{"line":124,"column":89}}},"9":{"name":"(anonymous_9)","line":140,"loc":{"start":{"line":140,"column":8},"end":{"line":140,"column":19}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":33}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":35}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":39}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":35}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":38}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":53}},"7":{"start":{"line":25,"column":0},"end":{"line":25,"column":45}},"8":{"start":{"line":33,"column":0},"end":{"line":43,"column":1}},"9":{"start":{"line":34,"column":2},"end":{"line":36,"column":3}},"10":{"start":{"line":35,"column":4},"end":{"line":35,"column":16}},"11":{"start":{"line":37,"column":2},"end":{"line":37,"column":27}},"12":{"start":{"line":38,"column":2},"end":{"line":40,"column":5}},"13":{"start":{"line":39,"column":4},"end":{"line":39,"column":61}},"14":{"start":{"line":42,"column":2},"end":{"line":42,"column":63}},"15":{"start":{"line":50,"column":0},"end":{"line":103,"column":1}},"16":{"start":{"line":51,"column":2},"end":{"line":102,"column":4}},"17":{"start":{"line":55,"column":4},"end":{"line":64,"column":5}},"18":{"start":{"line":57,"column":6},"end":{"line":61,"column":7}},"19":{"start":{"line":58,"column":8},"end":{"line":58,"column":21}},"20":{"start":{"line":59,"column":8},"end":{"line":59,"column":65}},"21":{"start":{"line":60,"column":8},"end":{"line":60,"column":26}},"22":{"start":{"line":62,"column":6},"end":{"line":62,"column":32}},"23":{"start":{"line":63,"column":6},"end":{"line":63,"column":13}},"24":{"start":{"line":66,"column":4},"end":{"line":70,"column":5}},"25":{"start":{"line":67,"column":6},"end":{"line":67,"column":30}},"26":{"start":{"line":73,"column":4},"end":{"line":89,"column":5}},"27":{"start":{"line":75,"column":6},"end":{"line":81,"column":7}},"28":{"start":{"line":76,"column":8},"end":{"line":76,"column":34}},"29":{"start":{"line":77,"column":8},"end":{"line":79,"column":11}},"30":{"start":{"line":78,"column":10},"end":{"line":78,"column":38}},"31":{"start":{"line":80,"column":8},"end":{"line":80,"column":40}},"32":{"start":{"line":83,"column":6},"end":{"line":83,"column":94}},"33":{"start":{"line":84,"column":6},"end":{"line":84,"column":35}},"34":{"start":{"line":85,"column":6},"end":{"line":87,"column":9}},"35":{"start":{"line":86,"column":8},"end":{"line":86,"column":31}},"36":{"start":{"line":88,"column":6},"end":{"line":88,"column":18}},"37":{"start":{"line":92,"column":4},"end":{"line":100,"column":5}},"38":{"start":{"line":93,"column":6},"end":{"line":93,"column":30}},"39":{"start":{"line":94,"column":6},"end":{"line":94,"column":39}},"40":{"start":{"line":95,"column":6},"end":{"line":98,"column":7}},"41":{"start":{"line":96,"column":8},"end":{"line":96,"column":35}},"42":{"start":{"line":97,"column":8},"end":{"line":97,"column":85}},"43":{"start":{"line":99,"column":6},"end":{"line":99,"column":18}},"44":{"start":{"line":101,"column":4},"end":{"line":101,"column":30}},"45":{"start":{"line":114,"column":0},"end":{"line":174,"column":1}},"46":{"start":{"line":115,"column":2},"end":{"line":115,"column":27}},"47":{"start":{"line":116,"column":2},"end":{"line":116,"column":82}},"48":{"start":{"line":117,"column":2},"end":{"line":117,"column":28}},"49":{"start":{"line":118,"column":2},"end":{"line":118,"column":28}},"50":{"start":{"line":119,"column":2},"end":{"line":119,"column":28}},"51":{"start":{"line":120,"column":2},"end":{"line":120,"column":36}},"52":{"start":{"line":121,"column":2},"end":{"line":121,"column":24}},"53":{"start":{"line":124,"column":2},"end":{"line":124,"column":93}},"54":{"start":{"line":127,"column":2},"end":{"line":130,"column":3}},"55":{"start":{"line":129,"column":4},"end":{"line":129,"column":114}},"56":{"start":{"line":132,"column":2},"end":{"line":132,"column":142}},"57":{"start":{"line":134,"column":2},"end":{"line":147,"column":3}},"58":{"start":{"line":135,"column":4},"end":{"line":146,"column":5}},"59":{"start":{"line":136,"column":6},"end":{"line":136,"column":37}},"60":{"start":{"line":138,"column":6},"end":{"line":138,"column":43}},"61":{"start":{"line":139,"column":6},"end":{"line":144,"column":8}},"62":{"start":{"line":141,"column":10},"end":{"line":141,"column":51}},"63":{"start":{"line":145,"column":6},"end":{"line":145,"column":25}},"64":{"start":{"line":150,"column":2},"end":{"line":150,"column":45}},"65":{"start":{"line":151,"column":2},"end":{"line":151,"column":22}},"66":{"start":{"line":154,"column":2},"end":{"line":154,"column":48}},"67":{"start":{"line":156,"column":2},"end":{"line":158,"column":3}},"68":{"start":{"line":157,"column":4},"end":{"line":157,"column":72}},"69":{"start":{"line":161,"column":2},"end":{"line":163,"column":3}},"70":{"start":{"line":162,"column":4},"end":{"line":162,"column":34}},"71":{"start":{"line":166,"column":2},"end":{"line":168,"column":3}},"72":{"start":{"line":167,"column":4},"end":{"line":167,"column":62}},"73":{"start":{"line":171,"column":2},"end":{"line":171,"column":22}},"74":{"start":{"line":173,"column":2},"end":{"line":173,"column":57}},"75":{"start":{"line":176,"column":0},"end":{"line":176,"column":31}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"2":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":11}},{"start":{"line":34,"column":15},"end":{"line":34,"column":22}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"4":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]},"5":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":26},"end":{"line":59,"column":39}},{"start":{"line":59,"column":43},"end":{"line":59,"column":54}},{"start":{"line":59,"column":58},"end":{"line":59,"column":63}}]},"6":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":4},"end":{"line":73,"column":4}},{"start":{"line":73,"column":4},"end":{"line":73,"column":4}}]},"7":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":8},"end":{"line":73,"column":12}},{"start":{"line":73,"column":17},"end":{"line":73,"column":27}},{"start":{"line":73,"column":31},"end":{"line":73,"column":46}}]},"8":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":6},"end":{"line":75,"column":6}},{"start":{"line":75,"column":6},"end":{"line":75,"column":6}}]},"9":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":10},"end":{"line":75,"column":40}},{"start":{"line":75,"column":44},"end":{"line":75,"column":66}}]},"10":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":24},"end":{"line":83,"column":34}},{"start":{"line":83,"column":38},"end":{"line":83,"column":56}},{"start":{"line":83,"column":60},"end":{"line":83,"column":92}}]},"11":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":4},"end":{"line":92,"column":4}},{"start":{"line":92,"column":4},"end":{"line":92,"column":4}}]},"12":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":8},"end":{"line":92,"column":14}},{"start":{"line":92,"column":19},"end":{"line":92,"column":44}},{"start":{"line":92,"column":48},"end":{"line":92,"column":74}}]},"13":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":6},"end":{"line":95,"column":6}},{"start":{"line":95,"column":6},"end":{"line":95,"column":6}}]},"14":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":10},"end":{"line":95,"column":28}},{"start":{"line":95,"column":32},"end":{"line":95,"column":50}}]},"15":{"line":124,"type":"cond-expr","locations":[{"start":{"line":124,"column":53},"end":{"line":124,"column":62}},{"start":{"line":124,"column":78},"end":{"line":124,"column":91}}]},"16":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":2},"end":{"line":127,"column":2}},{"start":{"line":127,"column":2},"end":{"line":127,"column":2}}]},"17":{"line":132,"type":"binary-expr","locations":[{"start":{"line":132,"column":42},"end":{"line":132,"column":67}},{"start":{"line":132,"column":71},"end":{"line":132,"column":113}}]},"18":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":2},"end":{"line":134,"column":2}},{"start":{"line":134,"column":2},"end":{"line":134,"column":2}}]},"19":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":4},"end":{"line":135,"column":4}},{"start":{"line":135,"column":4},"end":{"line":135,"column":4}}]},"20":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":2},"end":{"line":156,"column":2}},{"start":{"line":156,"column":2},"end":{"line":156,"column":2}}]},"21":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":2},"end":{"line":161,"column":2}},{"start":{"line":161,"column":2},"end":{"line":161,"column":2}}]},"22":{"line":161,"type":"binary-expr","locations":[{"start":{"line":161,"column":6},"end":{"line":161,"column":16}},{"start":{"line":161,"column":20},"end":{"line":161,"column":54}}]},"23":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":2},"end":{"line":166,"column":2}},{"start":{"line":166,"column":2},"end":{"line":166,"column":2}}]}},"code":["/**"," * Copyright 2014 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const extend = require('extend');","const request = require('request');","const pkg = require('../package.json');","const helper = require('./helper');","const parseString = require('string');","const readableStream = require('stream').PassThrough;","const isBrowser = typeof window === 'object';","","/**"," * @private"," * @param {String} path"," * @param {Object} params"," * @return {String}"," */","function parsePath(path, params) {","  if (!path || !params) {","    return path;","  }","  const escapedParams = {};","  Object.keys(params).forEach(function(value) {","    escapedParams[value] = encodeURIComponent(params[value]);","  });","","  return parseString(path).template(escapedParams, '{', '}').s;","}","","/**"," * Check if the service/request have error and try to format them."," * @param  {Function} cb the request callback"," * @private"," */","function formatErrorIfExists(cb) {","  return function(error, response, body) {","    // eslint-disable-line complexity","","    // If we have an error return it.","    if (error) {","      // first ensure that it's an instanceof Error","      if (!(error instanceof Error)) {","        body = error;","        error = new Error(error.message || error.error || error);","        error.body = body;","      }","      cb(error, body, response);","      return;","    }","","    try {","      body = JSON.parse(body);","    } catch (e) {","      // if it fails, just return the body as a string","    }","","    // If we have a response and it contains an error","    if (body && (body.error || body.error_code)) {","      // visual recognition sets body.error to a json object with code/description/error_id instead of putting them top-left","      if (typeof body.error === 'object' && body.error.description) {","        const errObj = body.error; // just in case there's a body.error.error...","        Object.keys(body.error).forEach(function(key) {","          body[key] = body.error[key];","        });","        body.error = errObj.description;","      }","      // language translaton returns json with error_code and error_message","      error = new Error(body.error || body.error_message || 'Error Code: ' + body.error_code);","      error.code = body.error_code;","      Object.keys(body).forEach(function(key) {","        error[key] = body[key];","      });","      body = null;","    }","","    // If we still don't have an error and there was an error...","    if (!error && (response.statusCode < 200 || response.statusCode >= 300)) {","      error = new Error(body);","      error.code = response.statusCode;","      if (error.code === 401 || error.code === 403) {","        error.body = error.message;","        error.message = 'Unauthorized: Access is denied due to invalid credentials.';","      }","      body = null;","    }","    cb(error, body, response);","  };","}","","/**"," * Creates the request."," * 1. Merge default options with user provided options"," * 2. Checks for missing parameters"," * 3. Encode path and query parameters"," * 4. Call the api"," * @private"," * @return {ReadableStream|undefined}"," */","function createRequest(parameters, _callback) {","  let missingParams = null;","  const options = extend(true, {}, parameters.defaultOptions, parameters.options);","  const path = options.path;","  const body = options.body; // application/json or text/plain","  const form = options.form; // application/x-www-form-urlencoded","  const formData = options.formData; // application/x-www-form-urlencoded","  const qs = options.qs; // Query parameters","","  // Provide a default callback if it doesn't exists","  const callback = typeof _callback === 'function' ? _callback /* no op */ : (function() {});","","  // Missing parameters","  if (parameters.options.requiredParams) {","    // eslint-disable-next-line no-console","    console.warn(new Error('requiredParams set on parameters.options - it should be set directly on parameters'));","  }","","  missingParams = helper.getMissingParams(parameters.originalParams || extend({}, qs, body, form, formData, path), parameters.requiredParams);","","  if (missingParams) {","    if (typeof _callback === 'function') {","      return callback(missingParams);","    } else {","      const errorStream = readableStream();","      setTimeout(","        function() {","          errorStream.emit('error', missingParams);","        },","        0","      );","      return errorStream;","    }","  }","","  // Path params","  options.url = parsePath(options.url, path);","  delete options.path;","","  // Headers","  options.headers = extend({}, options.headers);","","  if (!isBrowser) {","    options.headers['User-Agent'] = pkg.name + '-nodejs-' + pkg.version;","  }","","  // Query params","  if (options.qs && Object.keys(options.qs).length > 0) {","    options.useQuerystring = true;","  }","","  // Add service default endpoint if options.url start with /","  if (options.url.charAt(0) === '/') {","    options.url = parameters.defaultOptions.url + options.url;","  }","","  // Compression support","  options.gzip = true;","","  return request(options, formatErrorIfExists(callback));","}","","module.exports = createRequest;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"33":1,"34":0,"35":0,"37":0,"38":0,"39":0,"42":0,"50":1,"51":0,"55":0,"57":0,"58":0,"59":0,"60":0,"62":0,"63":0,"66":0,"67":0,"73":0,"75":0,"76":0,"77":0,"78":0,"80":0,"83":0,"84":0,"85":0,"86":0,"88":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"99":0,"101":0,"114":1,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"124":0,"127":0,"129":0,"132":0,"134":0,"135":0,"136":0,"138":0,"139":0,"141":0,"145":0,"150":0,"151":0,"154":0,"156":0,"157":0,"161":0,"162":0,"166":0,"167":0,"171":0,"173":0,"176":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/lib/helper.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/lib/helper.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":20,"loc":{"start":{"line":20,"column":22},"end":{"line":20,"column":36}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":20},"end":{"line":30,"column":47}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":23},"end":{"line":40,"column":41}}},"4":{"name":"(anonymous_4)","line":54,"loc":{"start":{"line":54,"column":10},"end":{"line":54,"column":25}}},"5":{"name":"(anonymous_5)","line":63,"loc":{"start":{"line":63,"column":13},"end":{"line":63,"column":39}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":75,"column":2}},"2":{"start":{"line":22,"column":4},"end":{"line":22,"column":34}},"3":{"start":{"line":31,"column":4},"end":{"line":31,"column":16}},"4":{"start":{"line":33,"column":4},"end":{"line":45,"column":5}},"5":{"start":{"line":34,"column":6},"end":{"line":34,"column":18}},"6":{"start":{"line":35,"column":11},"end":{"line":45,"column":5}},"7":{"start":{"line":36,"column":6},"end":{"line":36,"column":25}},"8":{"start":{"line":38,"column":6},"end":{"line":38,"column":19}},"9":{"start":{"line":40,"column":6},"end":{"line":44,"column":9}},"10":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"11":{"start":{"line":42,"column":10},"end":{"line":42,"column":32}},"12":{"start":{"line":47,"column":4},"end":{"line":47,"column":103}},"13":{"start":{"line":55,"column":4},"end":{"line":55,"column":40}},"14":{"start":{"line":64,"column":4},"end":{"line":66,"column":5}},"15":{"start":{"line":65,"column":6},"end":{"line":65,"column":18}},"16":{"start":{"line":68,"column":4},"end":{"line":72,"column":5}},"17":{"start":{"line":69,"column":6},"end":{"line":71,"column":7}},"18":{"start":{"line":70,"column":8},"end":{"line":70,"column":26}},"19":{"start":{"line":73,"column":4},"end":{"line":73,"column":16}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":11},"end":{"line":35,"column":11}},{"start":{"line":35,"column":11},"end":{"line":35,"column":11}}]},"3":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":41,"column":8}},{"start":{"line":41,"column":8},"end":{"line":41,"column":8}}]},"4":{"line":47,"type":"cond-expr","locations":[{"start":{"line":47,"column":32},"end":{"line":47,"column":95}},{"start":{"line":47,"column":98},"end":{"line":47,"column":102}}]},"5":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"6":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":16}},{"start":{"line":64,"column":20},"end":{"line":64,"column":27}}]},"7":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":6},"end":{"line":69,"column":6}},{"start":{"line":69,"column":6},"end":{"line":69,"column":6}}]}},"code":["/**"," * Copyright 2014 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","module.exports = {","  stripTrailingSlash: function(url) {","    // Match a forward slash / at the end of the string ($)","    return url.replace(/\\/$/, '');","  },","  /**","   * Validates that all required params are provided","   * @param params","   * @param requires","   * @return {Error|null}","   */","  getMissingParams: function(params, requires) {","    let missing;","","    if (!requires) {","      return null;","    } else if (!params) {","      missing = requires;","    } else {","      missing = [];","","      requires.forEach(function(require) {","        if (!params[require]) {","          missing.push(require);","        }","      });","    }","","    return missing.length > 0 ? new Error('Missing required parameters: ' + missing.join(', ')) : null;","  },","  /**","   * Return true if 'text' is html","   * @param  {String}  text The 'text' to analyze","   * @return {Boolean}      true if 'text' has html tags","   */","  isHTML: function(text) {","    return /<[a-z][\\s\\S]*>/i.test(text);","  },","  /**","   * Returns the first match from formats that is key the params map","   * otherwise null","   * @param  {Object}  params   The parameters","   * @param  {Array}  requires The keys we want to check","    */","  getFormat: function(params, formats) {","    if (!formats || !params) {","      return null;","    }","","    for (let i = 0; i < formats.length; i++) {","      if (formats[i] in params) {","        return formats[i];","      }","    }","    return null;","  }","};",""],"l":{"19":1,"22":0,"31":0,"33":0,"34":0,"35":0,"36":0,"38":0,"40":0,"41":0,"42":0,"47":0,"55":0,"64":0,"65":0,"68":0,"69":0,"70":0,"73":0}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/lib/base_service_alchemy.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/lib/base_service_alchemy.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":1,"18":0,"19":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"BaseServiceAlchemy","line":14,"loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":37}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":47},"end":{"line":25,"column":65}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":61},"end":{"line":50,"column":76}}},"4":{"name":"(anonymous_4)","line":62,"loc":{"start":{"line":62,"column":46},"end":{"line":62,"column":57}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":29}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":33}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":46}},"4":{"start":{"line":14,"column":0},"end":{"line":16,"column":1}},"5":{"start":{"line":15,"column":2},"end":{"line":15,"column":34}},"6":{"start":{"line":17,"column":0},"end":{"line":17,"column":47}},"7":{"start":{"line":25,"column":0},"end":{"line":42,"column":2}},"8":{"start":{"line":26,"column":2},"end":{"line":26,"column":53}},"9":{"start":{"line":27,"column":2},"end":{"line":32,"column":4}},"10":{"start":{"line":33,"column":2},"end":{"line":40,"column":3}},"11":{"start":{"line":34,"column":4},"end":{"line":36,"column":5}},"12":{"start":{"line":35,"column":6},"end":{"line":35,"column":67}},"13":{"start":{"line":39,"column":4},"end":{"line":39,"column":64}},"14":{"start":{"line":41,"column":2},"end":{"line":41,"column":17}},"15":{"start":{"line":50,"column":0},"end":{"line":55,"column":2}},"16":{"start":{"line":51,"column":2},"end":{"line":54,"column":4}},"17":{"start":{"line":62,"column":0},"end":{"line":67,"column":2}},"18":{"start":{"line":63,"column":2},"end":{"line":66,"column":4}},"19":{"start":{"line":69,"column":0},"end":{"line":69,"column":36}}},"branchMap":{"1":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":19},"end":{"line":26,"column":33}},{"start":{"line":26,"column":37},"end":{"line":26,"column":52}}]},"2":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":2},"end":{"line":33,"column":2}},{"start":{"line":33,"column":2},"end":{"line":33,"column":2}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]}},"code":["'use strict';","","const util = require('util');","const extend = require('extend');","const BaseService = require('./base_service');","","/**"," * Variation of BaseService for Alchemy API services (and Visual Recognition v3)"," * @param {Object} options"," * @constructor"," * @abstract"," * @private"," */","function BaseServiceAlchemy(options) {","  BaseService.call(this, options);","}","util.inherits(BaseServiceAlchemy, BaseService);","","/**"," * Grab the api key"," *"," * @param {Object} options"," * @private"," */","BaseServiceAlchemy.prototype.initCredentials = function(options) {","  options.apikey = options.apikey || options.api_key;","  options = extend(","    {},","    this.getCredentialsFromBluemix('alchemy_api'), // this is the same for all Alchemy* services","    this.getCredentialsFromEnvironment(this.name),","    options","  );","  if (!options.use_unauthenticated) {","    if (!options.apikey) {","      throw new Error('Argument error: api_key was not specified');","    }","    // Per documentation, Alchemy* services use `apikey`, but Visual Recognition uses (`api_key`)","    // (Either will work in most cases, but there are a few exceptions.)","    options.qs = extend({ apikey: options.apikey }, options.qs);","  }","  return options;","};","","/**"," * Pulls api_key from SERVICE_NAME_API_KEY env property"," *"," * @param {String} name"," * @return {{api_key: String|undefined}}"," */","BaseServiceAlchemy.prototype.getCredentialsFromEnvironment = function(name) {","  return {","    apikey: process.env[name.toUpperCase() + '_API_KEY'],","    url: process.env[name + '_URL']","  };","};","","/**"," * Retrieve this service's credentials - useful for passing to the authorization service"," * @type {BaseService}"," * @return {{username: String, password: String, url: String}}"," */","BaseServiceAlchemy.prototype.getCredentials = function() {","  return {","    apikey: this._options.apikey,","    url: this._options.url","  };","};","","module.exports = BaseServiceAlchemy;",""],"l":{"3":1,"4":1,"5":1,"14":1,"15":0,"17":1,"25":1,"26":0,"27":0,"33":0,"34":0,"35":0,"39":0,"41":0,"50":1,"51":0,"62":1,"63":0,"69":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/lib/base_service.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/lib/base_service.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":1,"31":0,"32":1,"33":0,"34":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"BaseService","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":35}}},"2":{"name":"(anonymous_2)","line":58,"loc":{"start":{"line":58,"column":40},"end":{"line":58,"column":58}}},"3":{"name":"(anonymous_3)","line":97,"loc":{"start":{"line":97,"column":54},"end":{"line":97,"column":69}}},"4":{"name":"(anonymous_4)","line":112,"loc":{"start":{"line":112,"column":50},"end":{"line":112,"column":79}}},"5":{"name":"(anonymous_5)","line":123,"loc":{"start":{"line":123,"column":39},"end":{"line":123,"column":50}}}},"statementMap":{"1":{"start":{"line":18,"column":0},"end":{"line":18,"column":33}},"2":{"start":{"line":19,"column":0},"end":{"line":19,"column":46}},"3":{"start":{"line":20,"column":0},"end":{"line":20,"column":35}},"4":{"start":{"line":21,"column":0},"end":{"line":21,"column":35}},"5":{"start":{"line":22,"column":0},"end":{"line":22,"column":42}},"6":{"start":{"line":37,"column":0},"end":{"line":51,"column":1}},"7":{"start":{"line":38,"column":2},"end":{"line":41,"column":3}},"8":{"start":{"line":40,"column":4},"end":{"line":40,"column":81}},"9":{"start":{"line":42,"column":2},"end":{"line":42,"column":41}},"10":{"start":{"line":44,"column":2},"end":{"line":44,"column":42}},"11":{"start":{"line":46,"column":2},"end":{"line":48,"column":3}},"12":{"start":{"line":47,"column":4},"end":{"line":47,"column":57}},"13":{"start":{"line":50,"column":2},"end":{"line":50,"column":95}},"14":{"start":{"line":58,"column":0},"end":{"line":84,"column":2}},"15":{"start":{"line":59,"column":2},"end":{"line":63,"column":3}},"16":{"start":{"line":60,"column":4},"end":{"line":60,"column":44}},"17":{"start":{"line":61,"column":4},"end":{"line":61,"column":68}},"18":{"start":{"line":62,"column":4},"end":{"line":62,"column":19}},"19":{"start":{"line":65,"column":2},"end":{"line":65,"column":30}},"20":{"start":{"line":69,"column":2},"end":{"line":69,"column":122}},"21":{"start":{"line":71,"column":2},"end":{"line":81,"column":3}},"22":{"start":{"line":72,"column":4},"end":{"line":74,"column":5}},"23":{"start":{"line":73,"column":6},"end":{"line":73,"column":110}},"24":{"start":{"line":77,"column":4},"end":{"line":79,"column":6}},"25":{"start":{"line":80,"column":4},"end":{"line":80,"column":58}},"26":{"start":{"line":83,"column":2},"end":{"line":83,"column":17}},"27":{"start":{"line":97,"column":0},"end":{"line":104,"column":2}},"28":{"start":{"line":98,"column":2},"end":{"line":98,"column":28}},"29":{"start":{"line":99,"column":2},"end":{"line":103,"column":4}},"30":{"start":{"line":112,"column":0},"end":{"line":114,"column":2}},"31":{"start":{"line":113,"column":2},"end":{"line":113,"column":57}},"32":{"start":{"line":123,"column":0},"end":{"line":129,"column":2}},"33":{"start":{"line":124,"column":2},"end":{"line":128,"column":4}},"34":{"start":{"line":131,"column":0},"end":{"line":131,"column":29}}},"branchMap":{"1":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":2},"end":{"line":38,"column":2}},{"start":{"line":38,"column":2},"end":{"line":38,"column":2}}]},"2":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":2},"end":{"line":46,"column":2}},{"start":{"line":46,"column":2},"end":{"line":46,"column":2}}]},"3":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":2},"end":{"line":59,"column":2}},{"start":{"line":59,"column":2},"end":{"line":59,"column":2}}]},"4":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":22},"end":{"line":60,"column":37}},{"start":{"line":60,"column":41},"end":{"line":60,"column":43}}]},"5":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":2},"end":{"line":71,"column":2}},{"start":{"line":71,"column":2},"end":{"line":71,"column":2}}]},"6":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":4},"end":{"line":72,"column":4}},{"start":{"line":72,"column":4},"end":{"line":72,"column":4}}]},"7":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":25}},{"start":{"line":72,"column":29},"end":{"line":72,"column":46}}]}},"code":["/**"," * Copyright 2014 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","const extend = require('extend');","const vcapServices = require('vcap_services');","const helper = require('./helper');","const request = require('request');","const bufferFrom = require('buffer-from'); // new Buffer() is deprecated, replaced with Buffer.from() in node v4.5.0+ - this uses the new api when possible but falls back to the old one otherwise","","/**"," * Internal base class that other services inherit from"," * @param {Object} options"," * @param {String} [options.username] - required unless use_unauthenticated is set"," * @param {String} [options.password] - required unless use_unauthenticated is set"," * @param {Boolean} [options.use_unauthenticated] - skip credential requirement"," * @param {Object} [options.headers]"," * @param {Boolean} [options.headers.X-Watson-Learning-Opt-Out=false] - opt-out of data collection"," * @param {String} [options.url] - override default service base url"," * @private"," * @abstract"," * @constructor"," */","function BaseService(user_options) {","  if (!(this instanceof BaseService)) {","    // it might be better to just create a new instance and return that.. but that can't be done here, it has to be done in each individual service. So this is still a good failsafe even in that case.","    throw new Error('\"new\" keyword required to create Watson service instances');","  }","  let options = extend({}, user_options);","","  options = this.initCredentials(options);","","  if (options.url) {","    options.url = helper.stripTrailingSlash(options.url);","  }","","  this._options = extend({ qs: {}, url: this.constructor.URL }, this.serviceDefaults, options);","}","","/**"," * @private"," * @param {Object} options"," * @return {*}"," */","BaseService.prototype.initCredentials = function(options) {","  if (options.token) {","    options.headers = options.headers || {};","    options.headers['X-Watson-Authorization-Token'] = options.token;","    return options;","  }","","  options.jar = request.jar();","","  // Get credentials from environment properties or Bluemix","  // but prefer credentials provided pragmatically!","  options = extend({}, this.getCredentialsFromBluemix(this.name), this.getCredentialsFromEnvironment(this.name), options);","","  if (!options.use_unauthenticated) {","    if (!options.username || !options.password) {","      throw new Error('Argument error: username and password are required unless use_unauthenticated is set');","    }","","    // Calculate and add Authorization header to base options","    const authHeader = {","      Authorization: 'Basic ' + bufferFrom(options.username + ':' + options.password).toString('base64')","    };","    options.headers = extend(authHeader, options.headers);","  }","","  return options;","};","","/**"," * Pulls credentials from env properties"," *"," * Property checked is uppercase service.name suffixed by _USERNAME and _PASSWORD"," *"," * For example, if service.name is speech_to_text, env properties are SPEECH_TO_TEXT_USERNAME and SPEECH_TO_TEXT_PASSWORD"," *"," * @private"," * @param name"," * @return {{username: String|undefined, password: String|undefined, url: String|undefined}}"," */","BaseService.prototype.getCredentialsFromEnvironment = function(name) {","  name = name.toUpperCase();","  return {","    username: process.env[name + '_USERNAME'],","    password: process.env[name + '_PASSWORD'],","    url: process.env[name + '_URL']","  };","};","","/**"," * Pulls credentials from VCAP_SERVICES env property that bluemix sets"," *"," * @private"," * @return {Object}"," */","BaseService.prototype.getCredentialsFromBluemix = function(vcap_services_name) {","  return vcapServices.getCredentials(vcap_services_name);","};","","/**"," * Retrieve this service's credentials - useful for passing to the authorization service"," *"," * Only returns a URL when token auth is used."," *"," * @return {{username: String, password: String, url: String}}"," */","BaseService.prototype.getCredentials = function() {","  return {","    username: this._options.username,","    password: this._options.password,","    url: this._options.url","  };","};","","module.exports = BaseService;",""],"l":{"18":1,"19":1,"20":1,"21":1,"22":1,"37":1,"38":0,"40":0,"42":0,"44":0,"46":0,"47":0,"50":0,"58":1,"59":0,"60":0,"61":0,"62":0,"65":0,"69":0,"71":0,"72":0,"73":0,"77":0,"80":0,"83":0,"97":1,"98":0,"99":0,"112":1,"113":0,"123":1,"124":0,"131":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/lib/alchemy_error_formatter.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/lib/alchemy_error_formatter.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"alchemyErrorFormatter","line":21,"loc":{"start":{"line":21,"column":17},"end":{"line":21,"column":52}}},"2":{"name":"(anonymous_2)","line":22,"loc":{"start":{"line":22,"column":9},"end":{"line":22,"column":41}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":33}},"2":{"start":{"line":21,"column":0},"end":{"line":36,"column":2}},"3":{"start":{"line":22,"column":2},"end":{"line":35,"column":4}},"4":{"start":{"line":23,"column":4},"end":{"line":34,"column":5}},"5":{"start":{"line":24,"column":6},"end":{"line":24,"column":22}},"6":{"start":{"line":26,"column":6},"end":{"line":32,"column":7}},"7":{"start":{"line":27,"column":8},"end":{"line":27,"column":92}},"8":{"start":{"line":28,"column":8},"end":{"line":28,"column":23}},"9":{"start":{"line":29,"column":8},"end":{"line":29,"column":26}},"10":{"start":{"line":30,"column":8},"end":{"line":30,"column":28}},"11":{"start":{"line":31,"column":8},"end":{"line":31,"column":22}},"12":{"start":{"line":33,"column":6},"end":{"line":33,"column":22}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"2":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":6},"end":{"line":26,"column":6}},{"start":{"line":26,"column":6},"end":{"line":26,"column":6}}]},"3":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":24},"end":{"line":27,"column":41}},{"start":{"line":27,"column":45},"end":{"line":27,"column":90}}]}},"code":["/**"," * Copyright 2014 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const extend = require('extend');","","module.exports = function alchemyErrorFormatter(cb) {","  return function(err, result, response) {","    if (err) {","      cb(err, result);","    } else {","      if (result.status !== 'OK') {","        err = new Error(result.statusInfo || response['headers']['x-alchemyapi-error-msg']);","        err.code = 400;","        err.body = result;","        extend(err, result);","        result = null;","      }","      cb(err, result);","    }","  };","};",""],"l":{"19":1,"21":1,"22":0,"23":0,"24":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"33":0}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/alchemy-language/v1.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/alchemy-language/v1.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":15,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":1,"55":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":15,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"createRequest","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":31}}},"2":{"name":"(anonymous_2)","line":38,"loc":{"start":{"line":38,"column":9},"end":{"line":38,"column":37}}},"3":{"name":"AlchemyLanguageV1","line":67,"loc":{"start":{"line":67,"column":0},"end":{"line":67,"column":36}}},"4":{"name":"(anonymous_4)","line":103,"loc":{"start":{"line":103,"column":40},"end":{"line":103,"column":67}}},"5":{"name":"(anonymous_5)","line":116,"loc":{"start":{"line":116,"column":35},"end":{"line":116,"column":62}}},"6":{"name":"(anonymous_6)","line":219,"loc":{"start":{"line":219,"column":38},"end":{"line":219,"column":65}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":33}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":29}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":66}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":56}},"5":{"start":{"line":27,"column":0},"end":{"line":27,"column":59}},"6":{"start":{"line":28,"column":0},"end":{"line":28,"column":40}},"7":{"start":{"line":29,"column":0},"end":{"line":29,"column":36}},"8":{"start":{"line":30,"column":0},"end":{"line":30,"column":65}},"9":{"start":{"line":37,"column":0},"end":{"line":60,"column":1}},"10":{"start":{"line":38,"column":2},"end":{"line":59,"column":4}},"11":{"start":{"line":39,"column":4},"end":{"line":39,"column":33}},"12":{"start":{"line":40,"column":4},"end":{"line":40,"column":60}},"13":{"start":{"line":41,"column":4},"end":{"line":41,"column":62}},"14":{"start":{"line":43,"column":4},"end":{"line":46,"column":5}},"15":{"start":{"line":44,"column":6},"end":{"line":44,"column":116}},"16":{"start":{"line":45,"column":6},"end":{"line":45,"column":13}},"17":{"start":{"line":48,"column":4},"end":{"line":57,"column":6}},"18":{"start":{"line":58,"column":4},"end":{"line":58,"column":64}},"19":{"start":{"line":67,"column":0},"end":{"line":69,"column":1}},"20":{"start":{"line":68,"column":2},"end":{"line":68,"column":41}},"21":{"start":{"line":70,"column":0},"end":{"line":70,"column":53}},"22":{"start":{"line":71,"column":0},"end":{"line":71,"column":54}},"23":{"start":{"line":72,"column":0},"end":{"line":72,"column":43}},"24":{"start":{"line":73,"column":0},"end":{"line":73,"column":62}},"25":{"start":{"line":82,"column":0},"end":{"line":82,"column":65}},"26":{"start":{"line":90,"column":0},"end":{"line":90,"column":65}},"27":{"start":{"line":98,"column":0},"end":{"line":98,"column":65}},"28":{"start":{"line":103,"column":0},"end":{"line":111,"column":2}},"29":{"start":{"line":104,"column":2},"end":{"line":104,"column":37}},"30":{"start":{"line":105,"column":2},"end":{"line":105,"column":87}},"31":{"start":{"line":106,"column":2},"end":{"line":108,"column":3}},"32":{"start":{"line":107,"column":4},"end":{"line":107,"column":48}},"33":{"start":{"line":110,"column":2},"end":{"line":110,"column":62}},"34":{"start":{"line":116,"column":0},"end":{"line":119,"column":2}},"35":{"start":{"line":117,"column":2},"end":{"line":117,"column":61}},"36":{"start":{"line":118,"column":2},"end":{"line":118,"column":61}},"37":{"start":{"line":127,"column":0},"end":{"line":127,"column":63}},"38":{"start":{"line":135,"column":0},"end":{"line":135,"column":65}},"39":{"start":{"line":145,"column":0},"end":{"line":145,"column":59}},"40":{"start":{"line":153,"column":0},"end":{"line":153,"column":67}},"41":{"start":{"line":161,"column":0},"end":{"line":161,"column":65}},"42":{"start":{"line":169,"column":0},"end":{"line":169,"column":80}},"43":{"start":{"line":178,"column":0},"end":{"line":178,"column":67}},"44":{"start":{"line":186,"column":0},"end":{"line":186,"column":59}},"45":{"start":{"line":194,"column":0},"end":{"line":194,"column":73}},"46":{"start":{"line":202,"column":0},"end":{"line":202,"column":65}},"47":{"start":{"line":210,"column":0},"end":{"line":210,"column":65}},"48":{"start":{"line":219,"column":0},"end":{"line":227,"column":2}},"49":{"start":{"line":220,"column":2},"end":{"line":220,"column":37}},"50":{"start":{"line":221,"column":2},"end":{"line":221,"column":83}},"51":{"start":{"line":222,"column":2},"end":{"line":224,"column":3}},"52":{"start":{"line":223,"column":4},"end":{"line":223,"column":48}},"53":{"start":{"line":226,"column":2},"end":{"line":226,"column":62}},"54":{"start":{"line":236,"column":0},"end":{"line":236,"column":78}},"55":{"start":{"line":238,"column":0},"end":{"line":238,"column":35}}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":19},"end":{"line":39,"column":26}},{"start":{"line":39,"column":30},"end":{"line":39,"column":32}}]},"2":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"3":{"line":105,"type":"cond-expr","locations":[{"start":{"line":105,"column":52},"end":{"line":105,"column":72}},{"start":{"line":105,"column":75},"end":{"line":105,"column":86}}]},"4":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":18},"end":{"line":105,"column":31}},{"start":{"line":105,"column":35},"end":{"line":105,"column":49}}]},"5":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":2},"end":{"line":106,"column":2}},{"start":{"line":106,"column":2},"end":{"line":106,"column":2}}]},"6":{"line":117,"type":"cond-expr","locations":[{"start":{"line":117,"column":41},"end":{"line":117,"column":51}},{"start":{"line":117,"column":54},"end":{"line":117,"column":60}}]},"7":{"line":117,"type":"binary-expr","locations":[{"start":{"line":117,"column":18},"end":{"line":117,"column":24}},{"start":{"line":117,"column":28},"end":{"line":117,"column":38}}]},"8":{"line":221,"type":"cond-expr","locations":[{"start":{"line":221,"column":52},"end":{"line":221,"column":70}},{"start":{"line":221,"column":73},"end":{"line":221,"column":82}}]},"9":{"line":221,"type":"binary-expr","locations":[{"start":{"line":221,"column":18},"end":{"line":221,"column":31}},{"start":{"line":221,"column":35},"end":{"line":221,"column":49}}]},"10":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":2},"end":{"line":222,"column":2}},{"start":{"line":222,"column":2},"end":{"line":222,"column":2}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const extend = require('extend');","const util = require('util');","const BaseServiceAlchemy = require('../lib/base_service_alchemy');","const requestFactory = require('../lib/requestwrapper');","// IMPORTANT:","// Due to the current design, the URL must be the last key on each endpoint or","// it could inadvertently clobber a url query param in the users request.","// see #236","const endpoints = require('../lib/alchemy_endpoints.json');","const helper = require('../lib/helper');","const pick = require('object.pick');","const errorFormatter = require('../lib/alchemy_error_formatter');","","/**"," * @privte"," * @param method"," * @return {Function}"," */","function createRequest(method) {","  return function(_params, callback) {","    const params = _params || {};","    const accepted_formats = Object.keys(endpoints[method]);","    const format = helper.getFormat(params, accepted_formats);","","    if (format === null) {","      callback(new Error('Missing required parameters: ' + accepted_formats.join(', ') + ' needs to be specified'));","      return;","    }","","    const parameters = {","      options: {","        url: endpoints[method][format],","        method: 'POST',","        json: true,","        qs: pick(params, ['model']),","        form: extend({}, params, { outputMode: 'json' }) // change default output to json","      },","      defaultOptions: this._options // eslint-disable-line no-invalid-this","    };","    return requestFactory(parameters, errorFormatter(callback));","  };","}","","/**"," *"," * @param {Object} options"," * @constructor"," */","function AlchemyLanguageV1(options) {","  BaseServiceAlchemy.call(this, options);","}","util.inherits(AlchemyLanguageV1, BaseServiceAlchemy);","AlchemyLanguageV1.prototype.name = 'alchemy_language';","AlchemyLanguageV1.prototype.version = 'v1';","AlchemyLanguageV1.URL = 'https://access.alchemyapi.com/calls';","","/**"," * Extracts a grouped, ranked list of named entities (people, companies,"," * organizations, etc.) from text, a URL or HTML."," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.entities = createRequest('entities');","","/**"," * Extracts the keywords from text, a URL or HTML."," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.keywords = createRequest('keywords');","","/**"," * Tags the concepts from text, a URL or HTML."," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.concepts = createRequest('concepts');","","/**"," * Calculates the sentiment for text, a URL or HTML."," */","AlchemyLanguageV1.prototype.sentiment = function(params, callback) {","  const _params = extend({}, params);","  const service = params.target || params.targets ? 'sentiment_targeted' : 'sentiment';","  if (Array.isArray(_params.targets)) {","    _params.targets = _params.targets.join('|');","  }","","  return createRequest(service).call(this, _params, callback);","};","/**"," * Extracts the cleaned text (removes ads, navigation, etc.) for a URL or HTML."," * if raw = true, extracts the cleaned text (removes ads, navigation, etc.)."," */","AlchemyLanguageV1.prototype.text = function(params, callback) {","  const service = params && params.raw ? 'text_raw' : 'text';","  return createRequest(service).call(this, params, callback);","};","","/**"," * Extracts the authors from a URL or HTML."," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.authors = createRequest('authors');","","/**"," * Detects the language for text, a URL or HTML."," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.language = createRequest('language');","","/**"," * Extracts the title for a URL or HTML."," *"," * @see http://www.alchemyapi.com/api/text/proc.html"," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.title = createRequest('title');","","/**"," * Extracts the relations for text, a URL or HTML."," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.relations = createRequest('relations');","","/**"," * Categorizes the text for text, a URL or HTML."," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.category = createRequest('category');","","/**"," * Extracts the publication date from a webpage or HTML file."," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.publicationDate = createRequest('publication_date');","","/**"," * Finds dates in the source text, including relative dates like \"next Tuesday\""," * if an anchorDate is set."," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.dates = createRequest('extract_dates');","","/**"," * Detects the RSS/ATOM feeds for a URL or HTML."," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.feeds = createRequest('feeds');","","/**"," * Parses the microformats for a URL or HTML."," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.microformats = createRequest('microformats');","","/**"," * Categorized through the taxonomy call for text, HTML, or a URL."," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.taxonomy = createRequest('taxonomy');","","/**"," * Combines multiple API operations into a single call."," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.combined = createRequest('combined');","","/**"," * Detects emotions (anger, disgust, fear, joy, and sadness)"," * for text, HTML, or a URL."," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.emotion = function(params, callback) {","  const _params = extend({}, params);","  const service = params.target || params.targets ? 'emotion_targeted' : 'emotion';","  if (Array.isArray(_params.targets)) {","    _params.targets = _params.targets.join('|');","  }","","  return createRequest(service).call(this, _params, callback);","};","","/**"," * Finds entities and their relationships"," * for text, HTML, or a URL."," * @method"," * @param {Object} params"," * @param {Function} callback"," */","AlchemyLanguageV1.prototype.typedRelations = createRequest('typed_relations');","","module.exports = AlchemyLanguageV1;",""],"l":{"19":1,"20":1,"21":1,"22":1,"27":1,"28":1,"29":1,"30":1,"37":1,"38":15,"39":0,"40":0,"41":0,"43":0,"44":0,"45":0,"48":0,"58":0,"67":1,"68":0,"70":1,"71":1,"72":1,"73":1,"82":1,"90":1,"98":1,"103":1,"104":0,"105":0,"106":0,"107":0,"110":0,"116":1,"117":0,"118":0,"127":1,"135":1,"145":1,"153":1,"161":1,"169":1,"178":1,"186":1,"194":1,"202":1,"210":1,"219":1,"220":0,"221":0,"222":0,"223":0,"226":0,"236":1,"238":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/alchemy-vision/v1.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/alchemy-vision/v1.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":4,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":4,"2":0,"3":0},"fnMap":{"1":{"name":"createRequest","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":31}}},"2":{"name":"(anonymous_2)","line":35,"loc":{"start":{"line":35,"column":9},"end":{"line":35,"column":37}}},"3":{"name":"AlchemyVisionV1","line":81,"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":34}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":59}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":40}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":37}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":36}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":25}},"7":{"start":{"line":25,"column":0},"end":{"line":25,"column":29}},"8":{"start":{"line":26,"column":0},"end":{"line":26,"column":66}},"9":{"start":{"line":27,"column":0},"end":{"line":27,"column":65}},"10":{"start":{"line":34,"column":0},"end":{"line":74,"column":1}},"11":{"start":{"line":35,"column":2},"end":{"line":73,"column":4}},"12":{"start":{"line":36,"column":4},"end":{"line":36,"column":33}},"13":{"start":{"line":37,"column":4},"end":{"line":37,"column":60}},"14":{"start":{"line":38,"column":4},"end":{"line":38,"column":62}},"15":{"start":{"line":40,"column":4},"end":{"line":43,"column":5}},"16":{"start":{"line":41,"column":6},"end":{"line":41,"column":116}},"17":{"start":{"line":42,"column":6},"end":{"line":42,"column":13}},"18":{"start":{"line":45,"column":4},"end":{"line":45,"column":31}},"19":{"start":{"line":47,"column":4},"end":{"line":53,"column":6}},"20":{"start":{"line":55,"column":4},"end":{"line":72,"column":5}},"21":{"start":{"line":57,"column":6},"end":{"line":59,"column":7}},"22":{"start":{"line":58,"column":8},"end":{"line":58,"column":41}},"23":{"start":{"line":61,"column":6},"end":{"line":61,"column":39}},"24":{"start":{"line":62,"column":6},"end":{"line":62,"column":66}},"25":{"start":{"line":64,"column":6},"end":{"line":64,"column":35}},"26":{"start":{"line":66,"column":6},"end":{"line":66,"column":54}},"27":{"start":{"line":68,"column":6},"end":{"line":70,"column":8}},"28":{"start":{"line":71,"column":6},"end":{"line":71,"column":85}},"29":{"start":{"line":81,"column":0},"end":{"line":83,"column":1}},"30":{"start":{"line":82,"column":2},"end":{"line":82,"column":41}},"31":{"start":{"line":84,"column":0},"end":{"line":84,"column":51}},"32":{"start":{"line":85,"column":0},"end":{"line":85,"column":50}},"33":{"start":{"line":86,"column":0},"end":{"line":86,"column":41}},"34":{"start":{"line":87,"column":0},"end":{"line":87,"column":60}},"35":{"start":{"line":92,"column":0},"end":{"line":92,"column":77}},"36":{"start":{"line":97,"column":0},"end":{"line":97,"column":78}},"37":{"start":{"line":102,"column":0},"end":{"line":102,"column":70}},"38":{"start":{"line":107,"column":0},"end":{"line":107,"column":80}},"39":{"start":{"line":109,"column":0},"end":{"line":109,"column":33}}},"branchMap":{"1":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":19},"end":{"line":36,"column":26}},{"start":{"line":36,"column":30},"end":{"line":36,"column":32}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":40,"column":4}},{"start":{"line":40,"column":4},"end":{"line":40,"column":4}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":21}},{"start":{"line":55,"column":25},"end":{"line":55,"column":48}}]},"5":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const requestFactory = require('../lib/requestwrapper');","const endpoints = require('../lib/alchemy_endpoints.json');","const helper = require('../lib/helper');","const isStream = require('isstream');","const omit = require('object.omit');","const fs = require('fs');","const util = require('util');","const BaseServiceAlchemy = require('../lib/base_service_alchemy');","const errorFormatter = require('../lib/alchemy_error_formatter');","","/**"," * @private"," * @param method"," * @return {Function}"," */","function createRequest(method) {","  return function(_params, callback) {","    const params = _params || {};","    const accepted_formats = Object.keys(endpoints[method]);","    const format = helper.getFormat(params, accepted_formats);","","    if (format === null) {","      callback(new Error('Missing required parameters: ' + accepted_formats.join(', ') + ' needs to be specified'));","      return;","    }","    // always return json","    params.outputMode = 'json';","","    const parameters = {","      options: {","        url: endpoints[method][format],","        method: 'POST'","      },","      defaultOptions: this._options // eslint-disable-line no-invalid-this","    };","","    if (!params.image || !isStream(params.image)) {","      // url or base64 images are considered 'not-raw'","      if (params.image) {","        params.imagePostMode = 'not-raw';","      }","      // send the parameters as form url-encoded","      parameters.options.form = params;","      return requestFactory(parameters, errorFormatter(callback));","    } else {","      params.imagePostMode = 'raw';","      // send the parameters as query parameters","      parameters.options.qs = omit(params, ['image']);","      // add the content-length to the headers","      parameters.options.headers = {","        'Content-Length': fs.statSync(params.image.path).size","      };","      return params.image.pipe(requestFactory(parameters, errorFormatter(callback)));","    }","  };","}","","/**"," *"," * @param {Object} options"," * @constructor"," */","function AlchemyVisionV1(options) {","  BaseServiceAlchemy.call(this, options);","}","util.inherits(AlchemyVisionV1, BaseServiceAlchemy);","AlchemyVisionV1.prototype.name = 'alchemy_vision';","AlchemyVisionV1.prototype.version = 'v1';","AlchemyVisionV1.URL = 'https://access.alchemyapi.com/calls';","","/**"," * Tags image with keywords"," */","AlchemyVisionV1.prototype.getImageKeywords = createRequest('image_keywords');","","/**"," * Face detection and Recognition"," */","AlchemyVisionV1.prototype.recognizeFaces = createRequest('image_recognition');","","/**"," * Extracts images from a URL or html"," */","AlchemyVisionV1.prototype.getImageLinks = createRequest('image_link');","","/**"," * Identifies  text in an image"," */","AlchemyVisionV1.prototype.getImageSceneText = createRequest('image_scene_text');","","module.exports = AlchemyVisionV1;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"34":1,"35":4,"36":0,"37":0,"38":0,"40":0,"41":0,"42":0,"45":0,"47":0,"55":0,"57":0,"58":0,"61":0,"62":0,"64":0,"66":0,"68":0,"71":0,"81":1,"82":0,"84":1,"85":1,"86":1,"87":1,"92":1,"97":1,"102":1,"107":1,"109":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/authorization/v1.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/authorization/v1.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":1,"13":1,"14":1,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"AuthorizationV1","line":36,"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":34}}},"2":{"name":"(anonymous_2)","line":56,"loc":{"start":{"line":56,"column":37},"end":{"line":56,"column":64}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":27}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":29}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":51}},"5":{"start":{"line":36,"column":0},"end":{"line":43,"column":1}},"6":{"start":{"line":37,"column":2},"end":{"line":37,"column":34}},"7":{"start":{"line":38,"column":2},"end":{"line":38,"column":32}},"8":{"start":{"line":40,"column":2},"end":{"line":40,"column":48}},"9":{"start":{"line":41,"column":2},"end":{"line":41,"column":43}},"10":{"start":{"line":42,"column":2},"end":{"line":42,"column":43}},"11":{"start":{"line":44,"column":0},"end":{"line":44,"column":44}},"12":{"start":{"line":45,"column":0},"end":{"line":45,"column":49}},"13":{"start":{"line":46,"column":0},"end":{"line":46,"column":41}},"14":{"start":{"line":47,"column":0},"end":{"line":47,"column":76}},"15":{"start":{"line":56,"column":0},"end":{"line":74,"column":2}},"16":{"start":{"line":57,"column":2},"end":{"line":60,"column":3}},"17":{"start":{"line":58,"column":4},"end":{"line":58,"column":22}},"18":{"start":{"line":59,"column":4},"end":{"line":59,"column":38}},"19":{"start":{"line":61,"column":2},"end":{"line":64,"column":3}},"20":{"start":{"line":62,"column":4},"end":{"line":62,"column":60}},"21":{"start":{"line":63,"column":4},"end":{"line":63,"column":11}},"22":{"start":{"line":66,"column":2},"end":{"line":72,"column":4}},"23":{"start":{"line":73,"column":2},"end":{"line":73,"column":46}},"24":{"start":{"line":76,"column":0},"end":{"line":76,"column":33}}},"branchMap":{"1":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":2},"end":{"line":57,"column":2}},{"start":{"line":57,"column":2},"end":{"line":57,"column":2}}]},"2":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":2},"end":{"line":61,"column":2}},{"start":{"line":61,"column":2},"end":{"line":61,"column":2}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const requestFactory = require('../lib/requestwrapper');","const url = require('url');","const util = require('util');","const BaseService = require('../lib/base_service');","","/**"," * Authorization Service"," *"," * Generates temporary auth tokens for use in untrusted environments."," * Tokens expire after one hour."," *"," * @param {Object} options"," * @param {String} options.username"," * @param {String} options.password"," * @param {String} [options.url] url of the service for which auth tokens are being generated"," * @constructor"," */","function AuthorizationV1(options) {","  BaseService.call(this, options);","  this.target_url = options.url;","  // replace the url to always point to /authorization/api","  const hostname = url.parse(this._options.url);","  hostname.pathname = '/authorization/api';","  this._options.url = url.format(hostname);","}","util.inherits(AuthorizationV1, BaseService);","AuthorizationV1.prototype.name = 'authorization';","AuthorizationV1.prototype.version = 'v1';","AuthorizationV1.URL = 'https://stream.watsonplatform.net/authorization/api';","","/**"," * Get a percent-encoded authorization token based on resource query string param"," *"," * @param {Object} [options]"," * @param {String} [options.url] defaults to url supplied to constructor (if any)"," * @param {Function(err, token)} callback - called with a %-encoded token"," */","AuthorizationV1.prototype.getToken = function(params, callback) {","  if (typeof params === 'function') {","    callback = params;","    params = { url: this.target_url };","  }","  if (!params.url) {","    callback(new Error('Missing required parameters: url'));","    return;","  }","","  const parameters = {","    options: {","      method: 'GET',","      url: '/v1/token?url=' + params.url","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","module.exports = AuthorizationV1;",""],"l":{"19":1,"20":1,"21":1,"22":1,"36":1,"37":0,"38":0,"40":0,"41":0,"42":0,"44":1,"45":1,"46":1,"47":1,"56":1,"57":0,"58":0,"59":0,"61":0,"62":0,"63":0,"66":0,"73":0,"76":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/conversation/v1.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/conversation/v1.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":1,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":1,"56":0,"57":0,"58":0,"59":1,"60":0,"61":0,"62":0,"63":1,"64":0,"65":0,"66":0,"67":1,"68":0,"69":0,"70":0,"71":1,"72":0,"73":0,"74":0,"75":1,"76":0,"77":0,"78":0,"79":1,"80":0,"81":0,"82":0,"83":1,"84":0,"85":0,"86":0,"87":1,"88":0,"89":0,"90":0,"91":1,"92":0,"93":0,"94":0,"95":1,"96":0,"97":0,"98":0,"99":1,"100":0,"101":0,"102":0,"103":1,"104":0,"105":0,"106":0,"107":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},"fnMap":{"1":{"name":"ConversationV1","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":33}}},"2":{"name":"(anonymous_2)","line":191,"loc":{"start":{"line":191,"column":35},"end":{"line":191,"column":62}}},"3":{"name":"(anonymous_3)","line":237,"loc":{"start":{"line":237,"column":42},"end":{"line":237,"column":69}}},"4":{"name":"(anonymous_4)","line":357,"loc":{"start":{"line":357,"column":43},"end":{"line":357,"column":70}}},"5":{"name":"(anonymous_5)","line":396,"loc":{"start":{"line":396,"column":40},"end":{"line":396,"column":67}}},"6":{"name":"(anonymous_6)","line":424,"loc":{"start":{"line":424,"column":43},"end":{"line":424,"column":70}}},"7":{"name":"(anonymous_7)","line":547,"loc":{"start":{"line":547,"column":43},"end":{"line":547,"column":70}}},"8":{"name":"(anonymous_8)","line":583,"loc":{"start":{"line":583,"column":43},"end":{"line":583,"column":70}}},"9":{"name":"(anonymous_9)","line":612,"loc":{"start":{"line":612,"column":40},"end":{"line":612,"column":67}}},"10":{"name":"(anonymous_10)","line":644,"loc":{"start":{"line":644,"column":38},"end":{"line":644,"column":65}}},"11":{"name":"(anonymous_11)","line":673,"loc":{"start":{"line":673,"column":37},"end":{"line":673,"column":64}}},"12":{"name":"(anonymous_12)","line":704,"loc":{"start":{"line":704,"column":40},"end":{"line":704,"column":67}}},"13":{"name":"(anonymous_13)","line":732,"loc":{"start":{"line":732,"column":40},"end":{"line":732,"column":67}}},"14":{"name":"(anonymous_14)","line":763,"loc":{"start":{"line":763,"column":39},"end":{"line":763,"column":66}}},"15":{"name":"(anonymous_15)","line":792,"loc":{"start":{"line":792,"column":41},"end":{"line":792,"column":68}}},"16":{"name":"(anonymous_16)","line":821,"loc":{"start":{"line":821,"column":41},"end":{"line":821,"column":68}}},"17":{"name":"(anonymous_17)","line":849,"loc":{"start":{"line":849,"column":38},"end":{"line":849,"column":65}}},"18":{"name":"(anonymous_18)","line":878,"loc":{"start":{"line":878,"column":41},"end":{"line":878,"column":68}}},"19":{"name":"(anonymous_19)","line":909,"loc":{"start":{"line":909,"column":46},"end":{"line":909,"column":73}}},"20":{"name":"(anonymous_20)","line":937,"loc":{"start":{"line":937,"column":48},"end":{"line":937,"column":75}}},"21":{"name":"(anonymous_21)","line":965,"loc":{"start":{"line":965,"column":48},"end":{"line":965,"column":75}}},"22":{"name":"(anonymous_22)","line":992,"loc":{"start":{"line":992,"column":45},"end":{"line":992,"column":72}}},"23":{"name":"(anonymous_23)","line":1020,"loc":{"start":{"line":1020,"column":48},"end":{"line":1020,"column":75}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":36}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":29}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":51}},"5":{"start":{"line":30,"column":0},"end":{"line":38,"column":1}},"6":{"start":{"line":31,"column":2},"end":{"line":31,"column":34}},"7":{"start":{"line":34,"column":2},"end":{"line":36,"column":3}},"8":{"start":{"line":35,"column":4},"end":{"line":35,"column":114}},"9":{"start":{"line":37,"column":2},"end":{"line":37,"column":50}},"10":{"start":{"line":39,"column":0},"end":{"line":39,"column":43}},"11":{"start":{"line":40,"column":0},"end":{"line":40,"column":47}},"12":{"start":{"line":41,"column":0},"end":{"line":41,"column":40}},"13":{"start":{"line":42,"column":0},"end":{"line":42,"column":75}},"14":{"start":{"line":48,"column":0},"end":{"line":48,"column":54}},"15":{"start":{"line":77,"column":0},"end":{"line":77,"column":54}},"16":{"start":{"line":126,"column":0},"end":{"line":126,"column":54}},"17":{"start":{"line":191,"column":0},"end":{"line":206,"column":2}},"18":{"start":{"line":192,"column":2},"end":{"line":192,"column":24}},"19":{"start":{"line":194,"column":2},"end":{"line":204,"column":4}},"20":{"start":{"line":205,"column":2},"end":{"line":205,"column":46}},"21":{"start":{"line":237,"column":0},"end":{"line":251,"column":2}},"22":{"start":{"line":238,"column":2},"end":{"line":241,"column":3}},"23":{"start":{"line":239,"column":4},"end":{"line":239,"column":22}},"24":{"start":{"line":240,"column":4},"end":{"line":240,"column":18}},"25":{"start":{"line":242,"column":2},"end":{"line":249,"column":4}},"26":{"start":{"line":250,"column":2},"end":{"line":250,"column":46}},"27":{"start":{"line":357,"column":0},"end":{"line":370,"column":2}},"28":{"start":{"line":358,"column":2},"end":{"line":358,"column":24}},"29":{"start":{"line":360,"column":2},"end":{"line":368,"column":4}},"30":{"start":{"line":369,"column":2},"end":{"line":369,"column":46}},"31":{"start":{"line":396,"column":0},"end":{"line":411,"column":2}},"32":{"start":{"line":397,"column":2},"end":{"line":397,"column":24}},"33":{"start":{"line":399,"column":2},"end":{"line":409,"column":4}},"34":{"start":{"line":410,"column":2},"end":{"line":410,"column":46}},"35":{"start":{"line":424,"column":0},"end":{"line":438,"column":2}},"36":{"start":{"line":425,"column":2},"end":{"line":425,"column":24}},"37":{"start":{"line":427,"column":2},"end":{"line":436,"column":4}},"38":{"start":{"line":437,"column":2},"end":{"line":437,"column":46}},"39":{"start":{"line":547,"column":0},"end":{"line":562,"column":2}},"40":{"start":{"line":548,"column":2},"end":{"line":548,"column":24}},"41":{"start":{"line":550,"column":2},"end":{"line":560,"column":4}},"42":{"start":{"line":561,"column":2},"end":{"line":561,"column":46}},"43":{"start":{"line":583,"column":0},"end":{"line":597,"column":2}},"44":{"start":{"line":584,"column":2},"end":{"line":584,"column":24}},"45":{"start":{"line":586,"column":2},"end":{"line":595,"column":4}},"46":{"start":{"line":596,"column":2},"end":{"line":596,"column":46}},"47":{"start":{"line":612,"column":0},"end":{"line":627,"column":2}},"48":{"start":{"line":613,"column":2},"end":{"line":613,"column":24}},"49":{"start":{"line":615,"column":2},"end":{"line":625,"column":4}},"50":{"start":{"line":626,"column":2},"end":{"line":626,"column":46}},"51":{"start":{"line":644,"column":0},"end":{"line":659,"column":2}},"52":{"start":{"line":645,"column":2},"end":{"line":645,"column":24}},"53":{"start":{"line":647,"column":2},"end":{"line":657,"column":4}},"54":{"start":{"line":658,"column":2},"end":{"line":658,"column":46}},"55":{"start":{"line":673,"column":0},"end":{"line":688,"column":2}},"56":{"start":{"line":674,"column":2},"end":{"line":674,"column":24}},"57":{"start":{"line":676,"column":2},"end":{"line":686,"column":4}},"58":{"start":{"line":687,"column":2},"end":{"line":687,"column":46}},"59":{"start":{"line":704,"column":0},"end":{"line":719,"column":2}},"60":{"start":{"line":705,"column":2},"end":{"line":705,"column":24}},"61":{"start":{"line":707,"column":2},"end":{"line":717,"column":4}},"62":{"start":{"line":718,"column":2},"end":{"line":718,"column":46}},"63":{"start":{"line":732,"column":0},"end":{"line":746,"column":2}},"64":{"start":{"line":733,"column":2},"end":{"line":733,"column":24}},"65":{"start":{"line":735,"column":2},"end":{"line":744,"column":4}},"66":{"start":{"line":745,"column":2},"end":{"line":745,"column":46}},"67":{"start":{"line":763,"column":0},"end":{"line":778,"column":2}},"68":{"start":{"line":764,"column":2},"end":{"line":764,"column":24}},"69":{"start":{"line":766,"column":2},"end":{"line":776,"column":4}},"70":{"start":{"line":777,"column":2},"end":{"line":777,"column":46}},"71":{"start":{"line":792,"column":0},"end":{"line":807,"column":2}},"72":{"start":{"line":793,"column":2},"end":{"line":793,"column":24}},"73":{"start":{"line":795,"column":2},"end":{"line":805,"column":4}},"74":{"start":{"line":806,"column":2},"end":{"line":806,"column":46}},"75":{"start":{"line":821,"column":0},"end":{"line":835,"column":2}},"76":{"start":{"line":822,"column":2},"end":{"line":822,"column":24}},"77":{"start":{"line":824,"column":2},"end":{"line":833,"column":4}},"78":{"start":{"line":834,"column":2},"end":{"line":834,"column":46}},"79":{"start":{"line":849,"column":0},"end":{"line":863,"column":2}},"80":{"start":{"line":850,"column":2},"end":{"line":850,"column":24}},"81":{"start":{"line":852,"column":2},"end":{"line":861,"column":4}},"82":{"start":{"line":862,"column":2},"end":{"line":862,"column":46}},"83":{"start":{"line":878,"column":0},"end":{"line":893,"column":2}},"84":{"start":{"line":879,"column":2},"end":{"line":879,"column":24}},"85":{"start":{"line":881,"column":2},"end":{"line":891,"column":4}},"86":{"start":{"line":892,"column":2},"end":{"line":892,"column":46}},"87":{"start":{"line":909,"column":0},"end":{"line":924,"column":2}},"88":{"start":{"line":910,"column":2},"end":{"line":910,"column":24}},"89":{"start":{"line":912,"column":2},"end":{"line":922,"column":4}},"90":{"start":{"line":923,"column":2},"end":{"line":923,"column":46}},"91":{"start":{"line":937,"column":0},"end":{"line":952,"column":2}},"92":{"start":{"line":938,"column":2},"end":{"line":938,"column":24}},"93":{"start":{"line":940,"column":2},"end":{"line":950,"column":4}},"94":{"start":{"line":951,"column":2},"end":{"line":951,"column":46}},"95":{"start":{"line":965,"column":0},"end":{"line":979,"column":2}},"96":{"start":{"line":966,"column":2},"end":{"line":966,"column":24}},"97":{"start":{"line":968,"column":2},"end":{"line":977,"column":4}},"98":{"start":{"line":978,"column":2},"end":{"line":978,"column":46}},"99":{"start":{"line":992,"column":0},"end":{"line":1006,"column":2}},"100":{"start":{"line":993,"column":2},"end":{"line":993,"column":24}},"101":{"start":{"line":995,"column":2},"end":{"line":1004,"column":4}},"102":{"start":{"line":1005,"column":2},"end":{"line":1005,"column":46}},"103":{"start":{"line":1020,"column":0},"end":{"line":1035,"column":2}},"104":{"start":{"line":1021,"column":2},"end":{"line":1021,"column":24}},"105":{"start":{"line":1023,"column":2},"end":{"line":1033,"column":4}},"106":{"start":{"line":1034,"column":2},"end":{"line":1034,"column":46}},"107":{"start":{"line":1037,"column":0},"end":{"line":1037,"column":32}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"2":{"line":192,"type":"binary-expr","locations":[{"start":{"line":192,"column":11},"end":{"line":192,"column":17}},{"start":{"line":192,"column":21},"end":{"line":192,"column":23}}]},"3":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":2},"end":{"line":238,"column":2}},{"start":{"line":238,"column":2},"end":{"line":238,"column":2}}]},"4":{"line":238,"type":"binary-expr","locations":[{"start":{"line":238,"column":6},"end":{"line":238,"column":34}},{"start":{"line":238,"column":38},"end":{"line":238,"column":47}}]},"5":{"line":358,"type":"binary-expr","locations":[{"start":{"line":358,"column":11},"end":{"line":358,"column":17}},{"start":{"line":358,"column":21},"end":{"line":358,"column":23}}]},"6":{"line":397,"type":"binary-expr","locations":[{"start":{"line":397,"column":11},"end":{"line":397,"column":17}},{"start":{"line":397,"column":21},"end":{"line":397,"column":23}}]},"7":{"line":425,"type":"binary-expr","locations":[{"start":{"line":425,"column":11},"end":{"line":425,"column":17}},{"start":{"line":425,"column":21},"end":{"line":425,"column":23}}]},"8":{"line":548,"type":"binary-expr","locations":[{"start":{"line":548,"column":11},"end":{"line":548,"column":17}},{"start":{"line":548,"column":21},"end":{"line":548,"column":23}}]},"9":{"line":584,"type":"binary-expr","locations":[{"start":{"line":584,"column":11},"end":{"line":584,"column":17}},{"start":{"line":584,"column":21},"end":{"line":584,"column":23}}]},"10":{"line":613,"type":"binary-expr","locations":[{"start":{"line":613,"column":11},"end":{"line":613,"column":17}},{"start":{"line":613,"column":21},"end":{"line":613,"column":23}}]},"11":{"line":645,"type":"binary-expr","locations":[{"start":{"line":645,"column":11},"end":{"line":645,"column":17}},{"start":{"line":645,"column":21},"end":{"line":645,"column":23}}]},"12":{"line":674,"type":"binary-expr","locations":[{"start":{"line":674,"column":11},"end":{"line":674,"column":17}},{"start":{"line":674,"column":21},"end":{"line":674,"column":23}}]},"13":{"line":705,"type":"binary-expr","locations":[{"start":{"line":705,"column":11},"end":{"line":705,"column":17}},{"start":{"line":705,"column":21},"end":{"line":705,"column":23}}]},"14":{"line":733,"type":"binary-expr","locations":[{"start":{"line":733,"column":11},"end":{"line":733,"column":17}},{"start":{"line":733,"column":21},"end":{"line":733,"column":23}}]},"15":{"line":764,"type":"binary-expr","locations":[{"start":{"line":764,"column":11},"end":{"line":764,"column":17}},{"start":{"line":764,"column":21},"end":{"line":764,"column":23}}]},"16":{"line":793,"type":"binary-expr","locations":[{"start":{"line":793,"column":11},"end":{"line":793,"column":17}},{"start":{"line":793,"column":21},"end":{"line":793,"column":23}}]},"17":{"line":822,"type":"binary-expr","locations":[{"start":{"line":822,"column":11},"end":{"line":822,"column":17}},{"start":{"line":822,"column":21},"end":{"line":822,"column":23}}]},"18":{"line":850,"type":"binary-expr","locations":[{"start":{"line":850,"column":11},"end":{"line":850,"column":17}},{"start":{"line":850,"column":21},"end":{"line":850,"column":23}}]},"19":{"line":879,"type":"binary-expr","locations":[{"start":{"line":879,"column":11},"end":{"line":879,"column":17}},{"start":{"line":879,"column":21},"end":{"line":879,"column":23}}]},"20":{"line":910,"type":"binary-expr","locations":[{"start":{"line":910,"column":11},"end":{"line":910,"column":17}},{"start":{"line":910,"column":21},"end":{"line":910,"column":23}}]},"21":{"line":938,"type":"binary-expr","locations":[{"start":{"line":938,"column":11},"end":{"line":938,"column":17}},{"start":{"line":938,"column":21},"end":{"line":938,"column":23}}]},"22":{"line":966,"type":"binary-expr","locations":[{"start":{"line":966,"column":11},"end":{"line":966,"column":17}},{"start":{"line":966,"column":21},"end":{"line":966,"column":23}}]},"23":{"line":993,"type":"binary-expr","locations":[{"start":{"line":993,"column":11},"end":{"line":993,"column":17}},{"start":{"line":993,"column":21},"end":{"line":993,"column":23}}]},"24":{"line":1021,"type":"binary-expr","locations":[{"start":{"line":1021,"column":11},"end":{"line":1021,"column":17}},{"start":{"line":1021,"column":21},"end":{"line":1021,"column":23}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const requestFactory = require('../lib/requestwrapper');","const pick = require('object.pick');","const util = require('util');","const BaseService = require('../lib/base_service');","","/**"," *"," * @param {Object} options"," * @param {Object} options.version_date"," * @constructor"," */","function ConversationV1(options) {","  BaseService.call(this, options);","","  // Check if 'version_date' was provided","  if (typeof this._options.version_date === 'undefined') {","    throw new Error('Argument error: version_date was not specified, use ConversationV1.VERSION_DATE_2017_02_03');","  }","  this._options.qs.version = options.version_date;","}","util.inherits(ConversationV1, BaseService);","ConversationV1.prototype.name = 'conversation';","ConversationV1.prototype.version = 'v1';","ConversationV1.URL = 'https://gateway.watsonplatform.net/conversation/api';","","/**"," * Initial release"," * @type {string}"," */","ConversationV1.VERSION_DATE_2016_07_11 = '2016-07-11';","","/**"," * 9/20 update made changes to response format"," *"," * * context.system.dialog_stack changed from an array of strings to an array of objects"," *"," * Old:","```json"," \"context\": {","    \"system\": {","      \"dialog_stack\": [","        \"root\"","      ],","```"," * New:","```json"," \"context\": {","    \"system\": {","      \"dialog_stack\": [","        {","          \"dialog_node\": \"root\"","        }","      ],","```"," *"," * @see http://www.ibm.com/watson/developercloud/doc/conversation/release-notes.html#20-september-2016"," * @type {string}"," */","ConversationV1.VERSION_DATE_2016_09_20 = '2016-09-20';","","/**"," * 02/03 Update"," *"," * * Absolute scoring has now been enabled."," * @see https://www.ibm.com/watson/developercloud/doc/conversation/irrelevant_utterance.html"," *"," * Old:"," ```json"," \"intents\": [","   { \"intent\" : \"turn_off\", \"confidence\" : 0.54 },","   { \"intent\" : \"locate_amenity\", \"confidence\" : 0.4},","   { \"intent\" : \"weather\", \"confidence\" : 0.06}"," ]","```"," * Previously all intent confidence values summed to 1.0."," * New:","```json"," \"intents\": [","   { \"intent\" : \"turn_off\", \"confidence\" : 0.54 },","   { \"intent\" : \"locate_amenity\", \"confidence\" : 0.52},","   { \"intent\" : \"weather\", \"confidence\" : 0.01}"," ]","```"," * Now each intent is scored individually with a maximum confidence value of 1."," *"," * * Irrelevant input detection."," * Previously an intent was always returned regardless of whether the system considered it irrelevant to the"," * training data within the workspace. With Irrelevant input detection the system will now return an empty intent"," * array if the system thinks the input is irrelevant to the workspace content."," * Old:"," ```json"," \"input\" : { \"text\" : \"what color is the sky?\"},"," \"intents\": ["," { \"intent\" : \"weather\", \"confidence\" : 0.36 },"," { \"intent\" : \"turn_off\", \"confidence\" : 0.33},"," { \"intent\" : \"locate_amenity\", \"confidence\" : 0.31}"," ]"," ```"," * New:"," ```json"," \"input\" : { \"text\" : \"what color is the sky?\"},"," \"intents\": []"," ```"," *"," * @see https://www.ibm.com/watson/developercloud/doc/conversation/release-notes.html#3-february-2017"," * @type {string}"," */","ConversationV1.VERSION_DATE_2017_02_03 = '2017-02-03';","","/**"," * Method: message"," *"," * Returns a response to a user utterance."," *"," * Example response for 2017-02-03 version_date:","```json"," {","   \"intents\": [","     {","       \"intent\": \"turn_on\",","       \"confidence\": 0.999103316650195","     }","   ],","   \"entities\": [","     {","       \"entity\": \"appliance\",","       \"location\": [","         12,","         18","       ],","       \"value\": \"light\"","     }","   ],","   \"input\": {","     \"text\": \"Turn on the lights\"","   },","   \"output\": {","     \"log_messages\": [],","     \"text\": [","       \"Hi. It looks like a nice drive today. What would you like me to do?\"","     ],","     \"nodes_visited\": [","       \"node_1_1467221909631\"","     ]","   },","   \"context\": {","     \"conversation_id\": \"820334ac-ee79-45b5-aa03-7958dcd0fd34\",","     \"system\": {","       \"dialog_stack\": [","         {","           \"dialog_node\": \"root\"","         }","       ],","       \"dialog_turn_counter\": 1,","       \"dialog_request_counter\": 1","     }","   }"," }","```"," *"," *"," *"," * @param {Object} params"," * @param params.workspace_id"," * @param [params.input]"," * @param [params.context]"," * @param [params.alternate_intents=false] - includes other lower-confidence intents in the intents array."," * @param [params.output]"," * @param [params.entities]"," * @param [params.intents]"," *"," */","ConversationV1.prototype.message = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/message',","      method: 'POST',","      json: true,","      body: pick(params, ['input', 'context', 'alternate_intents', 'output', 'entities', 'intents']),","      path: pick(params, ['workspace_id'])","    },","    requiredParams: ['workspace_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: listWorkspaces"," *"," * Returns the list of workspaces in Watson Conversation Service instance"," *"," * Example Response:","```json"," {","   \"workspaces\": [","     {","       \"name\": \"Pizza app\",","       \"created\": \"2015-12-06T23:53:59.153Z\",","       \"language\": \"en\",","       \"metadata\": {},","       \"updated\": \"2015-12-06T23:53:59.153Z\",","       \"description\": \"Pizza app\",","       \"workspace_id\": \"pizza_app-e0f3\"","     }","   ]"," }","```"," *"," * @param {Object} [params]"," * @param {Number} [params.page_limit]"," * @param {Boolean} [params.include_count]"," * @param {String} [params.sort]"," * @param {String} [params.cursor]"," * @param {Function} [callback]"," */","ConversationV1.prototype.listWorkspaces = function(params, callback) {","  if (typeof params === 'function' && !callback) {","    callback = params;","    params = null;","  }","  const parameters = {","    options: {","      url: '/v1/workspaces',","      method: 'GET',","      qs: pick(params, ['page_limit', 'include_count', 'sort', 'cursor'])","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: createWorkspace"," *"," * Creates a new workspace"," *"," * Model Schema","```json"," {","  \"name\": \"string\",","  \"description\": \"string\",","  \"language\": \"string\",","  \"metadata\": {},","  \"counterexamples\": [","    {","      \"text\": \"string\"","    }","  ],","  \"dialog_nodes\": [","    {","      \"dialog_node\": \"string\",","      \"description\": \"string\",","      \"conditions\": \"string\",","      \"parent\": \"string\",","      \"previous_sibling\": \"string\",","      \"output\": {","        \"text\": \"string\"","      },","      \"context\": {},","      \"metadata\": {},","      \"go_to\": {","        \"dialog_node\": \"string\",","        \"selector\": \"string\",","        \"return\": true","      }","    }","  ],","  \"entities\": [","    {","      \"entity\": \"string\",","      \"description\": {","        \"long\": [","          \"string\"","        ],","        \"short\": [","          \"string\"","        ],","        \"examples\": [","          \"string\"","        ]","      },","      \"type\": \"string\",","      \"source\": \"string\",","      \"open_list\": false,","      \"values\": [","        {","          \"value\": \"string\",","          \"metadata\": {},","          \"synonyms\": [","            \"string\"","          ]","        }","      ]","    }","  ],","  \"intents\": [","    {","      \"intent\": \"string\",","      \"description\": \"string\",","      \"examples\": [","        {","          \"text\": \"string\"","        }","      ]","    }","  ]"," }","```"," *"," * Example Response","```json"," {","  \"name\": \"Pizza app\",","  \"created\": \"2015-12-06T23:53:59.153Z\",","  \"language\": \"en\",","  \"metadata\": {},","  \"updated\": \"2015-12-06T23:53:59.153Z\",","  \"description\": \"Pizza app\",","  \"workspace_id\": \"pizza_app-e0f3\""," }","```"," *"," * @param  {Object}  params"," * @param {String} [params.name]"," * @param {String} [params.description]"," * @param {String} [params.language]"," * @param {Object} [params.metadata]"," * @param {Array<Object>} [params.entities]"," * @param {Array<Object>} [params.intents]"," * @param {Array<Object>} [params.dialog_nodes]"," * @param {Array<Object>} [params.counterexamples]"," * @param {Function} [callback]"," *"," */","","ConversationV1.prototype.createWorkspace = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces',","      method: 'POST',","      json: true,","      body: pick(params, ['name', 'language', 'entities', 'intents', 'dialog_nodes', 'metadata', 'description', 'counterexamples'])","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: getWorkspace"," *"," * Returns information about a specified workspace or return the whole workspace"," *"," * Example Response (with default export value):","```json"," {","  \"name\": \"Pizza app\",","  \"created\": \"2015-12-06T23:53:59.153Z\",","  \"language\": \"en\",","  \"metadata\": {},","  \"updated\": \"2015-12-06T23:53:59.153Z\",","  \"description\": \"Pizza app\",","  \"workspace_id\": \"pizza_app-e0f3\""," }","```"," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {Boolean} [params.export=false] - if true, the full contents of all of the sub-resources are returned"," * @param {Function} [callback]"," */","","ConversationV1.prototype.getWorkspace = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}',","      method: 'GET',","      json: true,","      qs: pick(params, ['export']),","      path: pick(params, ['workspace_id'])","    },","    requiredParams: ['workspace_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: deleteWorkspace"," *"," * Deletes the specified workspace"," *"," *"," * @param  {Object}   params   { workspace_id: '' }"," * @param params.workspace_id"," * @param {Function} [callback]"," */","","ConversationV1.prototype.deleteWorkspace = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}',","      method: 'DELETE',","      json: true,","      path: pick(params, ['workspace_id'])","    },","    requiredParams: ['workspace_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: updateWorkspace"," *"," * Updates a workspace"," *"," * Example value","```json"," {","  \"name\": \"Pizza app\",","  \"created\": \"2015-12-06T23:53:59.153Z\",","  \"language\": \"en\",","  \"metadata\": {},","  \"description\": \"Pizza app\",","  \"workspace_id\": \"pizza_app-e0f3\",","  \"counterexamples\": [","    {","      \"text\": \"string\"","    }","  ],","  \"dialog_nodes\": [","    {","      \"dialog_node\": \"string\",","      \"description\": \"string\",","      \"conditions\": \"string\",","      \"parent\": \"string\",","      \"previous_sibling\": \"string\",","      \"output\": {","        \"text\": \"string\"","      },","      \"context\": {},","      \"metadata\": {},","      \"go_to\": {","        \"dialog_node\": \"string\",","        \"selector\": \"string\",","        \"return\": true","      }","    }","  ],","  \"entities\": [","    {","      \"entity\": \"string\",","      \"description\": {","        \"long\": [","          \"string\"","        ],","        \"short\": [","          \"string\"","        ],","        \"examples\": [","          \"string\"","        ]","      },","      \"type\": \"string\",","      \"source\": \"string\",","      \"open_list\": false,","      \"values\": [","        {","          \"value\": \"string\",","          \"metadata\": {},","          \"synonyms\": [","            \"string\"","          ]","        }","      ]","    }","  ],","  \"intents\": [","    {","      \"intent\": \"string\",","      \"description\": \"string\",","      \"examples\": [","        {","          \"text\": \"string\"","        }","      ]","    }","  ]"," }","```"," *"," * Example Response:","```json"," {","  \"name\": \"Pizza app\",","  \"created\": \"2015-12-06T23:53:59.153Z\",","  \"language\": \"en\",","  \"metadata\": {},","  \"updated\": \"2015-12-06T23:53:59.153Z\",","  \"description\": \"Pizza app\",","  \"workspace_id\": \"pizza_app-e0f3\""," }","```"," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {String} [params.name]"," * @param {String} [params.description]"," * @param {String} [params.language]"," * @param {Object} [params.metadata]"," * @param {Array<Object>} [params.entities]"," * @param {Array<Object>} [params.intents]"," * @param {Array<Object>} [params.dialog_nodes]"," * @param {Array<Object>} [params.counterexamples]"," * @param {Function} [callback]"," *"," */","","ConversationV1.prototype.updateWorkspace = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}',","      method: 'POST',","      json: true,","      body: pick(params, ['name', 'language', 'entities', 'intents', 'dialog_nodes', 'metadata', 'description', 'counterexamples']),","      path: pick(params, ['workspace_id'])","    },","    requiredParams: ['workspace_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: workspaceStatus"," *"," * Returns the training status of the specified workspace"," *"," * Example Response:","```json"," {","  \"workspace_id\": \"pizza_app-e0f3\",","  \"training\": \"true\""," }","```"," *"," * @param {Object} params"," * @param params.workspace_id"," * @param {Function} [callback]"," *"," */","","ConversationV1.prototype.workspaceStatus = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/status',","      method: 'GET',","      json: true,","      path: pick(params, ['workspace_id'])","    },","    requiredParams: ['workspace_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: createIntent"," *"," * Create a new intent"," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {String} [params.intent]"," * @param {String} [params.description]"," * @param {Array<Object>} [params.examples]"," * @param {Function} [callback]"," *"," */","ConversationV1.prototype.createIntent = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/intents',","      method: 'POST',","      json: true,","      path: pick(params, ['workspace_id']),","      body: pick(params, ['intent', 'description', 'examples'])","    },","    requiredParams: ['workspace_id', 'intent'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: getIntents"," *"," * List the intents for a workspace."," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {Boolean} [params.export=false] - if true, the full contents of all of the sub-resources are returned"," * @param {Number} [params.page_limit]"," * @param {Boolean} [params.include_count]"," * @param {String} [params.sort]"," * @param {String} [params.cursor]"," * @param {Function} [callback]"," *"," */","ConversationV1.prototype.getIntents = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/intents',","      method: 'GET',","      json: true,","      path: pick(params, ['workspace_id']),","      qs: pick(params, ['export', 'page_limit', 'include_count', 'sort', 'cursor'])","    },","    requiredParams: ['workspace_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: getIntent"," *"," * Get information about an intent, optionally including all intent content."," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {String} params.intent"," * @param {Boolean} [params.export=false] - if true, the full contents of all of the sub-resources are returned"," * @param {Function} [callback]"," *"," */","ConversationV1.prototype.getIntent = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/intents/{intent}',","      method: 'GET',","      json: true,","      path: pick(params, ['workspace_id', 'intent']),","      qs: pick(params, ['export'])","    },","    requiredParams: ['workspace_id', 'intent'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: updateIntent"," *"," * Update an existing intent with new or modified data. You must provide JSON data defining the content of the updated intent."," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {String} params.old_intent"," * @param {String} params.intent"," * @param {String} params.description"," * @param {Array<Object>} params.examples"," * @param {Function} [callback]"," *"," */","ConversationV1.prototype.updateIntent = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/intents/{old_intent}',","      method: 'POST',","      json: true,","      path: pick(params, ['workspace_id', 'old_intent']),","      body: pick(params, ['intent', 'description', 'examples'])","    },","    requiredParams: ['workspace_id', 'old_intent', 'intent'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: deleteIntent"," *"," * Delete an intent from a workspace"," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {String} params.intent"," * @param {Function} [callback]"," *"," */","ConversationV1.prototype.deleteIntent = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/intents/{intent}',","      method: 'DELETE',","      json: true,","      path: pick(params, ['workspace_id', 'intent'])","    },","    requiredParams: ['workspace_id', 'intent'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: getExamples"," *"," * List the user input examples for an intent."," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {String} params.intent"," * @param {Number} [params.page_limit]"," * @param {Boolean} [params.include_count]"," * @param {String} [params.sort]"," * @param {String} [params.cursor]"," * @param {Function} [callback]"," *"," */","ConversationV1.prototype.getExamples = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/intents/{intent}/examples',","      method: 'GET',","      json: true,","      path: pick(params, ['workspace_id', 'intent']),","      qs: pick(params, ['page_limit', 'include_count', 'sort', 'cursor'])","    },","    requiredParams: ['workspace_id', 'intent'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: createExample"," *"," * Add a new user input example to an intent."," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {String} params.intent"," * @param {String} params.text"," * @param {Function} [callback]"," *"," */","ConversationV1.prototype.createExample = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/intents/{intent}/examples',","      method: 'POST',","      json: true,","      path: pick(params, ['workspace_id', 'intent']),","      body: pick(params, ['text'])","    },","    requiredParams: ['workspace_id', 'intent'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: deleteExample"," *"," * Delete a user input example from an intent."," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {String} params.intent"," * @param {String} params.text"," * @param {Function} [callback]"," *"," */","ConversationV1.prototype.deleteExample = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/intents/{intent}/examples/{text}',","      method: 'DELETE',","      json: true,","      path: pick(params, ['workspace_id', 'intent', 'text'])","    },","    requiredParams: ['workspace_id', 'intent', 'text'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: getExample"," *"," * Get information about a user input example."," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {String} params.intent"," * @param {String} params.text"," * @param {Function} [callback]"," *"," */","ConversationV1.prototype.getExample = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/intents/{intent}/examples/{text}',","      method: 'GET',","      json: true,","      path: pick(params, ['workspace_id', 'intent', 'text'])","    },","    requiredParams: ['workspace_id', 'intent', 'text'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: updateExample"," *"," * Update the text of a user input example."," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {String} params.intent"," * @param {String} params.text"," * @param {Object} params.example"," * @param {Function} [callback]"," *"," */","ConversationV1.prototype.updateExample = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/intents/{intent}/examples/{old_text}',","      method: 'POST',","      json: true,","      path: pick(params, ['workspace_id', 'intent', 'old_text']),","      body: pick(params, ['text'])","    },","    requiredParams: ['workspace_id', 'intent', 'old_text', 'text'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: getCounterExamples"," *"," * List the counterexamples for a workspace. Counterexamples are examples that have been marked as irrelevant input"," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {Number} [params.page_limit]"," * @param {Boolean} [params.include_count]"," * @param {String} [params.sort]"," * @param {String} [params.cursor]"," * @param {Function} [callback]"," *"," */","ConversationV1.prototype.getCounterExamples = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/counterexamples',","      method: 'GET',","      json: true,","      path: pick(params, ['workspace_id']),","      qs: pick(params, ['page_limit', 'include_count', 'sort', 'cursor'])","    },","    requiredParams: ['workspace_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: createCounterExample"," *"," * Add a new counterexample to a workspace. Counterexamples are examples that have been marked as irrelevant input."," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {String} params.text The text of a user input example."," * @param {Function} [callback]"," *"," */","ConversationV1.prototype.createCounterExample = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/counterexamples',","      method: 'POST',","      json: true,","      path: pick(params, ['workspace_id']),","      body: pick(params, ['text'])","    },","    requiredParams: ['workspace_id', 'text'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: deleteCounterExample"," *"," * Delete a counterexample from a workspace. Counterexamples are examples that have been marked as irrelevant input."," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {String} params.text The text of a user input example."," * @param {Function} [callback]"," *"," */","ConversationV1.prototype.deleteCounterExample = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/counterexamples/{text}',","      method: 'DELETE',","      json: true,","      path: pick(params, ['workspace_id', 'text'])","    },","    requiredParams: ['workspace_id', 'text'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: getCounterExample"," *"," * Get information about a counterexample. Counterexamples are examples that have been marked as irrelevant input."," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {String} params.text The text of a user input example."," * @param {Function} [callback]"," *"," */","ConversationV1.prototype.getCounterExample = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/counterexamples/{text}',","      method: 'GET',","      json: true,","      path: pick(params, ['workspace_id', 'text'])","    },","    requiredParams: ['workspace_id', 'text'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Method: updateCounterExample"," *"," * Get information about a counterexample. Counterexamples are examples that have been marked as irrelevant input."," *"," * @param {Object} params"," * @param {String} params.workspace_id"," * @param {String} params.old_text"," * @param {String} params.text The text of a user input example."," * @param {Function} [callback]"," *"," */","ConversationV1.prototype.updateCounterExample = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/counterexamples/{old_text}',","      method: 'POST',","      json: true,","      path: pick(params, ['workspace_id', 'old_text']),","      body: pick(params, ['text'])","    },","    requiredParams: ['workspace_id', 'old_text', 'text'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","module.exports = ConversationV1;",""],"l":{"19":1,"20":1,"21":1,"22":1,"30":1,"31":0,"34":0,"35":0,"37":0,"39":1,"40":1,"41":1,"42":1,"48":1,"77":1,"126":1,"191":1,"192":0,"194":0,"205":0,"237":1,"238":0,"239":0,"240":0,"242":0,"250":0,"357":1,"358":0,"360":0,"369":0,"396":1,"397":0,"399":0,"410":0,"424":1,"425":0,"427":0,"437":0,"547":1,"548":0,"550":0,"561":0,"583":1,"584":0,"586":0,"596":0,"612":1,"613":0,"615":0,"626":0,"644":1,"645":0,"647":0,"658":0,"673":1,"674":0,"676":0,"687":0,"704":1,"705":0,"707":0,"718":0,"732":1,"733":0,"735":0,"745":0,"763":1,"764":0,"766":0,"777":0,"792":1,"793":0,"795":0,"806":0,"821":1,"822":0,"824":0,"834":0,"849":1,"850":0,"852":0,"862":0,"878":1,"879":0,"881":0,"892":0,"909":1,"910":0,"912":0,"923":0,"937":1,"938":0,"940":0,"951":0,"965":1,"966":0,"968":0,"978":0,"992":1,"993":0,"995":0,"1005":0,"1020":1,"1021":0,"1023":0,"1034":0,"1037":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/conversation/v1-experimental.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/conversation/v1-experimental.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1,"14":1,"15":1,"16":1,"17":0,"18":0,"19":0,"20":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"ConversationV1Experimental","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":45}}},"2":{"name":"(anonymous_2)","line":54,"loc":{"start":{"line":54,"column":47},"end":{"line":54,"column":74}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":36}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":29}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":51}},"5":{"start":{"line":29,"column":0},"end":{"line":44,"column":1}},"6":{"start":{"line":30,"column":2},"end":{"line":30,"column":34}},"7":{"start":{"line":32,"column":2},"end":{"line":37,"column":3}},"8":{"start":{"line":34,"column":4},"end":{"line":36,"column":6}},"9":{"start":{"line":40,"column":2},"end":{"line":42,"column":3}},"10":{"start":{"line":41,"column":4},"end":{"line":41,"column":86}},"11":{"start":{"line":43,"column":2},"end":{"line":43,"column":50}},"12":{"start":{"line":45,"column":0},"end":{"line":45,"column":55}},"13":{"start":{"line":46,"column":0},"end":{"line":46,"column":59}},"14":{"start":{"line":47,"column":0},"end":{"line":47,"column":65}},"15":{"start":{"line":48,"column":0},"end":{"line":48,"column":100}},"16":{"start":{"line":54,"column":0},"end":{"line":69,"column":2}},"17":{"start":{"line":55,"column":2},"end":{"line":55,"column":24}},"18":{"start":{"line":57,"column":2},"end":{"line":67,"column":4}},"19":{"start":{"line":68,"column":2},"end":{"line":68,"column":46}},"20":{"start":{"line":71,"column":0},"end":{"line":71,"column":44}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":2},"end":{"line":32,"column":2}},{"start":{"line":32,"column":2},"end":{"line":32,"column":2}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":2},"end":{"line":40,"column":2}},{"start":{"line":40,"column":2},"end":{"line":40,"column":2}}]},"3":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":11},"end":{"line":55,"column":17}},{"start":{"line":55,"column":21},"end":{"line":55,"column":23}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const requestFactory = require('../lib/requestwrapper');","const pick = require('object.pick');","const util = require('util');","const BaseService = require('../lib/base_service');","","/**"," *"," * @param {Object} options"," * @constructor"," */","function ConversationV1Experimental(options) {","  BaseService.call(this, options);","","  if (!this._options.silent) {","    // eslint-disable-next-line no-console","    console.warn(","      new Error('Watson Conversation v1-experimental is sunset as of 2016-08-01. Please upgrade to v1. Set {silent: true} to disable this message.').stack","    );","  }","","  // Check if 'version_date' was provided","  if (typeof this._options.version_date === 'undefined') {","    throw new Error('Argument error: version_date was not specified, use 2016-05-19');","  }","  this._options.qs.version = options.version_date;","}","util.inherits(ConversationV1Experimental, BaseService);","ConversationV1Experimental.prototype.name = 'conversation';","ConversationV1Experimental.prototype.version = 'v1-experimental';","ConversationV1Experimental.URL = 'https://gateway.watsonplatform.net/conversation-experimental/api';","","/**"," * Returns a response to a user utterance."," * @param  {Object}   params   { workspace_id: '',  }"," */","ConversationV1Experimental.prototype.message = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/workspaces/{workspace_id}/message',","      method: 'POST',","      json: true,","      body: pick(params, ['input', 'context']),","      path: pick(params, ['workspace_id'])","    },","    requiredParams: ['workspace_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","module.exports = ConversationV1Experimental;",""],"l":{"19":1,"20":1,"21":1,"22":1,"29":1,"30":0,"32":0,"34":0,"40":0,"41":0,"43":0,"45":1,"46":1,"47":1,"48":1,"54":1,"55":0,"57":0,"68":0,"71":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/dialog/v1.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/dialog/v1.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":1,"13":1,"14":1,"15":1,"16":1,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":1,"54":0,"55":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"DialogV1","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":27}}},"2":{"name":"(anonymous_2)","line":51,"loc":{"start":{"line":51,"column":32},"end":{"line":51,"column":59}}},"3":{"name":"(anonymous_3)","line":72,"loc":{"start":{"line":72,"column":35},"end":{"line":72,"column":62}}},"4":{"name":"(anonymous_4)","line":93,"loc":{"start":{"line":93,"column":37},"end":{"line":93,"column":64}}},"5":{"name":"(anonymous_5)","line":115,"loc":{"start":{"line":115,"column":34},"end":{"line":115,"column":61}}},"6":{"name":"(anonymous_6)","line":136,"loc":{"start":{"line":136,"column":35},"end":{"line":136,"column":62}}},"7":{"name":"(anonymous_7)","line":156,"loc":{"start":{"line":156,"column":32},"end":{"line":156,"column":59}}},"8":{"name":"(anonymous_8)","line":176,"loc":{"start":{"line":176,"column":34},"end":{"line":176,"column":61}}},"9":{"name":"(anonymous_9)","line":205,"loc":{"start":{"line":205,"column":32},"end":{"line":205,"column":59}}},"10":{"name":"(anonymous_10)","line":220,"loc":{"start":{"line":220,"column":34},"end":{"line":220,"column":61}}},"11":{"name":"(anonymous_11)","line":238,"loc":{"start":{"line":238,"column":34},"end":{"line":238,"column":61}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":33}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":56}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":36}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":36}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":37}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":29}},"7":{"start":{"line":25,"column":0},"end":{"line":25,"column":51}},"8":{"start":{"line":32,"column":0},"end":{"line":41,"column":1}},"9":{"start":{"line":33,"column":2},"end":{"line":33,"column":34}},"10":{"start":{"line":35,"column":2},"end":{"line":40,"column":3}},"11":{"start":{"line":37,"column":4},"end":{"line":39,"column":6}},"12":{"start":{"line":42,"column":0},"end":{"line":42,"column":37}},"13":{"start":{"line":43,"column":0},"end":{"line":43,"column":35}},"14":{"start":{"line":44,"column":0},"end":{"line":44,"column":34}},"15":{"start":{"line":45,"column":0},"end":{"line":45,"column":63}},"16":{"start":{"line":51,"column":0},"end":{"line":66,"column":2}},"17":{"start":{"line":52,"column":2},"end":{"line":52,"column":24}},"18":{"start":{"line":54,"column":2},"end":{"line":64,"column":4}},"19":{"start":{"line":65,"column":2},"end":{"line":65,"column":46}},"20":{"start":{"line":72,"column":0},"end":{"line":87,"column":2}},"21":{"start":{"line":73,"column":2},"end":{"line":73,"column":24}},"22":{"start":{"line":75,"column":2},"end":{"line":85,"column":4}},"23":{"start":{"line":86,"column":2},"end":{"line":86,"column":46}},"24":{"start":{"line":93,"column":0},"end":{"line":108,"column":2}},"25":{"start":{"line":94,"column":2},"end":{"line":94,"column":24}},"26":{"start":{"line":96,"column":2},"end":{"line":106,"column":4}},"27":{"start":{"line":107,"column":2},"end":{"line":107,"column":46}},"28":{"start":{"line":115,"column":0},"end":{"line":130,"column":2}},"29":{"start":{"line":116,"column":2},"end":{"line":116,"column":24}},"30":{"start":{"line":118,"column":2},"end":{"line":128,"column":4}},"31":{"start":{"line":129,"column":2},"end":{"line":129,"column":46}},"32":{"start":{"line":136,"column":0},"end":{"line":150,"column":2}},"33":{"start":{"line":137,"column":2},"end":{"line":137,"column":24}},"34":{"start":{"line":139,"column":2},"end":{"line":148,"column":4}},"35":{"start":{"line":149,"column":2},"end":{"line":149,"column":46}},"36":{"start":{"line":156,"column":0},"end":{"line":170,"column":2}},"37":{"start":{"line":157,"column":2},"end":{"line":157,"column":24}},"38":{"start":{"line":159,"column":2},"end":{"line":168,"column":4}},"39":{"start":{"line":169,"column":2},"end":{"line":169,"column":46}},"40":{"start":{"line":176,"column":0},"end":{"line":200,"column":2}},"41":{"start":{"line":177,"column":2},"end":{"line":177,"column":24}},"42":{"start":{"line":179,"column":2},"end":{"line":182,"column":3}},"43":{"start":{"line":180,"column":4},"end":{"line":180,"column":61}},"44":{"start":{"line":181,"column":4},"end":{"line":181,"column":11}},"45":{"start":{"line":184,"column":2},"end":{"line":187,"column":3}},"46":{"start":{"line":185,"column":4},"end":{"line":185,"column":65}},"47":{"start":{"line":186,"column":4},"end":{"line":186,"column":11}},"48":{"start":{"line":189,"column":2},"end":{"line":198,"column":4}},"49":{"start":{"line":199,"column":2},"end":{"line":199,"column":46}},"50":{"start":{"line":205,"column":0},"end":{"line":215,"column":2}},"51":{"start":{"line":206,"column":2},"end":{"line":213,"column":4}},"52":{"start":{"line":214,"column":2},"end":{"line":214,"column":46}},"53":{"start":{"line":220,"column":0},"end":{"line":232,"column":2}},"54":{"start":{"line":221,"column":2},"end":{"line":230,"column":4}},"55":{"start":{"line":231,"column":2},"end":{"line":231,"column":46}},"56":{"start":{"line":238,"column":0},"end":{"line":263,"column":2}},"57":{"start":{"line":239,"column":2},"end":{"line":239,"column":24}},"58":{"start":{"line":241,"column":2},"end":{"line":244,"column":3}},"59":{"start":{"line":242,"column":4},"end":{"line":242,"column":61}},"60":{"start":{"line":243,"column":4},"end":{"line":243,"column":11}},"61":{"start":{"line":246,"column":2},"end":{"line":249,"column":3}},"62":{"start":{"line":247,"column":4},"end":{"line":247,"column":65}},"63":{"start":{"line":248,"column":4},"end":{"line":248,"column":11}},"64":{"start":{"line":251,"column":2},"end":{"line":261,"column":4}},"65":{"start":{"line":262,"column":2},"end":{"line":262,"column":46}},"66":{"start":{"line":265,"column":0},"end":{"line":265,"column":26}}},"branchMap":{"1":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":2},"end":{"line":35,"column":2}},{"start":{"line":35,"column":2},"end":{"line":35,"column":2}}]},"2":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":11},"end":{"line":52,"column":17}},{"start":{"line":52,"column":21},"end":{"line":52,"column":23}}]},"3":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":11},"end":{"line":73,"column":17}},{"start":{"line":73,"column":21},"end":{"line":73,"column":23}}]},"4":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":11},"end":{"line":94,"column":17}},{"start":{"line":94,"column":21},"end":{"line":94,"column":23}}]},"5":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":11},"end":{"line":116,"column":17}},{"start":{"line":116,"column":21},"end":{"line":116,"column":23}}]},"6":{"line":137,"type":"binary-expr","locations":[{"start":{"line":137,"column":11},"end":{"line":137,"column":17}},{"start":{"line":137,"column":21},"end":{"line":137,"column":23}}]},"7":{"line":157,"type":"binary-expr","locations":[{"start":{"line":157,"column":11},"end":{"line":157,"column":17}},{"start":{"line":157,"column":21},"end":{"line":157,"column":23}}]},"8":{"line":177,"type":"binary-expr","locations":[{"start":{"line":177,"column":11},"end":{"line":177,"column":17}},{"start":{"line":177,"column":21},"end":{"line":177,"column":23}}]},"9":{"line":179,"type":"if","locations":[{"start":{"line":179,"column":2},"end":{"line":179,"column":2}},{"start":{"line":179,"column":2},"end":{"line":179,"column":2}}]},"10":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":2},"end":{"line":184,"column":2}},{"start":{"line":184,"column":2},"end":{"line":184,"column":2}}]},"11":{"line":239,"type":"binary-expr","locations":[{"start":{"line":239,"column":11},"end":{"line":239,"column":17}},{"start":{"line":239,"column":21},"end":{"line":239,"column":23}}]},"12":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":2},"end":{"line":241,"column":2}},{"start":{"line":241,"column":2},"end":{"line":241,"column":2}}]},"13":{"line":246,"type":"if","locations":[{"start":{"line":246,"column":2},"end":{"line":246,"column":2}},{"start":{"line":246,"column":2},"end":{"line":246,"column":2}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const extend = require('extend');","const requestFactory = require('../lib/requestwrapper');","const pick = require('object.pick');","const omit = require('object.omit');","const isStream = require('isstream');","const util = require('util');","const BaseService = require('../lib/base_service');","","/**"," *"," * @param {Object} options"," * @constructor"," */","function DialogV1(options) {","  BaseService.call(this, options);","","  if (!options.silent) {","    // eslint-disable-next-line no-console","    console.warn(","      'WARNING: The Dialog service was deprecated, existing instances of the service will continue to function until August 9, 2017. See https://www.ibm.com/watson/developercloud/doc/conversation/migration.shtml. Set {silent: true} to disable this message.'","    );","  }","}","util.inherits(DialogV1, BaseService);","DialogV1.prototype.name = 'dialog';","DialogV1.prototype.version = 'v1';","DialogV1.URL = 'https://gateway.watsonplatform.net/dialog/api';","","/**"," * Retrieves the values for profile variables for specific client ID"," * @param  {Object}   params   { client_id: '', dialog_id: '', name:''}"," */","DialogV1.prototype.getProfile = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/dialogs/{dialog_id}/profile',","      method: 'GET',","      json: true,","      path: params,","      qs: pick(params, ['client_id', 'name'])","    },","    requiredParams: ['dialog_id', 'client_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Sets the values for profile variables"," * @param  {Object}   params   { client_id: '', dialog_id: '', name_values:''}"," */","DialogV1.prototype.updateProfile = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/dialogs/{dialog_id}/profile',","      method: 'PUT',","      json: true,","      body: pick(params, ['name_values', 'client_id']),","      path: params","    },","    requiredParams: ['dialog_id', 'name_values'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Returns a chat session data dump for a given date."," * @param  {Object}   params   { client_id: '', dialog_id: '', name_values:''}"," */","DialogV1.prototype.getConversation = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/dialogs/{dialog_id}/conversation',","      method: 'GET',","      json: true,","      qs: omit(params, ['dialog_id']),","      path: params","    },","    requiredParams: ['dialog_id', 'date_from', 'date_to'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Returns a response for a submitted input message."," * Also used to start new conversations."," * @param  {Object}   params   { client_id: '', dialog_id: '' }"," */","DialogV1.prototype.conversation = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/dialogs/{dialog_id}/conversation',","      method: 'POST',","      json: true,","      form: omit(params, ['dialog_id']),","      path: params","    },","    requiredParams: ['dialog_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Updates content for specified nodes."," * @param  {Object}   params   { dialog_id: '' }"," */","DialogV1.prototype.updateContent = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/dialogs/{dialog_id}/content',","      method: 'PUT',","      json: true,","      path: params","    },","    requiredParams: ['dialog_id'],","    defaultOptions: extend(true, {}, this._options, pick(params, ['headers']))","  };","  return requestFactory(parameters, callback);","};","","/**"," * Gets content for nodes."," * @param  {Object}   params   { dialog_id: '' }"," */","DialogV1.prototype.getContent = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/dialogs/{dialog_id}/content',","      method: 'GET',","      json: true,","      path: params","    },","    requiredParams: ['dialog_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Create a dialog based on a file and name"," * @param  {Object}   params   { name: '', file:'' }"," */","DialogV1.prototype.createDialog = function(params, callback) {","  params = params || {};","","  if (!params.file) {","    callback(new Error('Missing required parameters: file'));","    return;","  }","","  if (!isStream(params.file)) {","    callback(new Error('file is not a standard Node.js Stream'));","    return;","  }","","  const parameters = {","    options: {","      url: '/v1/dialogs',","      method: 'POST',","      json: true,","      formData: pick(params, ['name', 'file'])","    },","    requiredParams: ['name'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Returns the dialogs associated with a service instance"," */","DialogV1.prototype.getDialogs = function(params, callback) {","  const parameters = {","    options: {","      url: '/v1/dialogs',","      method: 'GET',","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Delete a dialog and removes all associated data"," */","DialogV1.prototype.deleteDialog = function(params, callback) {","  const parameters = {","    options: {","      url: '/v1/dialogs/{dialog_id}',","      method: 'DELETE',","      json: true,","      path: params","    },","    requiredParams: ['dialog_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Update a dialog with a new dialog file"," * @param  {Object}   params   { dialog_id: '' }"," */","DialogV1.prototype.updateDialog = function(params, callback) {","  params = params || {};","","  if (!params.file) {","    callback(new Error('Missing required parameters: file'));","    return;","  }","","  if (!isStream(params.file)) {","    callback(new Error('file is not a standard Node.js Stream'));","    return;","  }","","  const parameters = {","    options: {","      url: '/v1/dialogs/{dialog_id}',","      method: 'PUT',","      json: true,","      path: params,","      formData: omit(params, ['dialog_id'])","    },","    requiredParams: ['dialog_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","module.exports = DialogV1;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"32":1,"33":0,"35":0,"37":0,"42":1,"43":1,"44":1,"45":1,"51":1,"52":0,"54":0,"65":0,"72":1,"73":0,"75":0,"86":0,"93":1,"94":0,"96":0,"107":0,"115":1,"116":0,"118":0,"129":0,"136":1,"137":0,"139":0,"149":0,"156":1,"157":0,"159":0,"169":0,"176":1,"177":0,"179":0,"180":0,"181":0,"184":0,"185":0,"186":0,"189":0,"199":0,"205":1,"206":0,"214":0,"220":1,"221":0,"231":0,"238":1,"239":0,"241":0,"242":0,"243":0,"246":0,"247":0,"248":0,"251":0,"262":0,"265":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/discovery/v1.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/discovery/v1.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":1,"30":0,"31":0,"32":0,"33":1,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":1,"50":0,"51":0,"52":0,"53":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":1,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":1,"80":0,"81":0,"82":0,"83":1,"84":0,"85":0,"86":0,"87":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0,0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0,0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"DiscoveryV1","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":30}}},"2":{"name":"(anonymous_2)","line":55,"loc":{"start":{"line":55,"column":40},"end":{"line":55,"column":67}}},"3":{"name":"(anonymous_3)","line":75,"loc":{"start":{"line":75,"column":42},"end":{"line":75,"column":69}}},"4":{"name":"(anonymous_4)","line":108,"loc":{"start":{"line":108,"column":39},"end":{"line":108,"column":66}}},"5":{"name":"(anonymous_5)","line":130,"loc":{"start":{"line":130,"column":42},"end":{"line":130,"column":69}}},"6":{"name":"(anonymous_6)","line":152,"loc":{"start":{"line":152,"column":42},"end":{"line":152,"column":69}}},"7":{"name":"(anonymous_7)","line":175,"loc":{"start":{"line":175,"column":41},"end":{"line":175,"column":68}}},"8":{"name":"(anonymous_8)","line":197,"loc":{"start":{"line":197,"column":39},"end":{"line":197,"column":66}}},"9":{"name":"(anonymous_9)","line":220,"loc":{"start":{"line":220,"column":38},"end":{"line":220,"column":65}}},"10":{"name":"(anonymous_10)","line":246,"loc":{"start":{"line":246,"column":41},"end":{"line":246,"column":68}}},"11":{"name":"(anonymous_11)","line":278,"loc":{"start":{"line":278,"column":41},"end":{"line":278,"column":68}}},"12":{"name":"(anonymous_12)","line":307,"loc":{"start":{"line":307,"column":36},"end":{"line":307,"column":63}}},"13":{"name":"(anonymous_13)","line":354,"loc":{"start":{"line":354,"column":39},"end":{"line":354,"column":66}}},"14":{"name":"(anonymous_14)","line":398,"loc":{"start":{"line":398,"column":39},"end":{"line":398,"column":66}}},"15":{"name":"(anonymous_15)","line":427,"loc":{"start":{"line":427,"column":30},"end":{"line":427,"column":57}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":29}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":56}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":51}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":36}},"5":{"start":{"line":29,"column":0},"end":{"line":37,"column":1}},"6":{"start":{"line":30,"column":2},"end":{"line":30,"column":34}},"7":{"start":{"line":33,"column":2},"end":{"line":35,"column":3}},"8":{"start":{"line":34,"column":4},"end":{"line":34,"column":111}},"9":{"start":{"line":36,"column":2},"end":{"line":36,"column":50}},"10":{"start":{"line":39,"column":0},"end":{"line":39,"column":40}},"11":{"start":{"line":40,"column":0},"end":{"line":40,"column":41}},"12":{"start":{"line":41,"column":0},"end":{"line":41,"column":37}},"13":{"start":{"line":42,"column":0},"end":{"line":42,"column":69}},"14":{"start":{"line":48,"column":0},"end":{"line":48,"column":51}},"15":{"start":{"line":55,"column":0},"end":{"line":67,"column":2}},"16":{"start":{"line":56,"column":2},"end":{"line":56,"column":24}},"17":{"start":{"line":58,"column":2},"end":{"line":65,"column":4}},"18":{"start":{"line":66,"column":2},"end":{"line":66,"column":46}},"19":{"start":{"line":75,"column":0},"end":{"line":100,"column":2}},"20":{"start":{"line":76,"column":2},"end":{"line":76,"column":24}},"21":{"start":{"line":79,"column":2},"end":{"line":81,"column":3}},"22":{"start":{"line":80,"column":4},"end":{"line":80,"column":20}},"23":{"start":{"line":83,"column":2},"end":{"line":98,"column":4}},"24":{"start":{"line":99,"column":2},"end":{"line":99,"column":46}},"25":{"start":{"line":108,"column":0},"end":{"line":122,"column":2}},"26":{"start":{"line":109,"column":2},"end":{"line":109,"column":24}},"27":{"start":{"line":111,"column":2},"end":{"line":120,"column":4}},"28":{"start":{"line":121,"column":2},"end":{"line":121,"column":46}},"29":{"start":{"line":130,"column":0},"end":{"line":144,"column":2}},"30":{"start":{"line":131,"column":2},"end":{"line":131,"column":24}},"31":{"start":{"line":133,"column":2},"end":{"line":142,"column":4}},"32":{"start":{"line":143,"column":2},"end":{"line":143,"column":46}},"33":{"start":{"line":152,"column":0},"end":{"line":166,"column":2}},"34":{"start":{"line":153,"column":2},"end":{"line":153,"column":24}},"35":{"start":{"line":155,"column":2},"end":{"line":164,"column":4}},"36":{"start":{"line":165,"column":2},"end":{"line":165,"column":46}},"37":{"start":{"line":175,"column":0},"end":{"line":189,"column":2}},"38":{"start":{"line":176,"column":2},"end":{"line":176,"column":24}},"39":{"start":{"line":178,"column":2},"end":{"line":187,"column":4}},"40":{"start":{"line":188,"column":2},"end":{"line":188,"column":46}},"41":{"start":{"line":197,"column":0},"end":{"line":211,"column":2}},"42":{"start":{"line":198,"column":2},"end":{"line":198,"column":24}},"43":{"start":{"line":200,"column":2},"end":{"line":209,"column":4}},"44":{"start":{"line":210,"column":2},"end":{"line":210,"column":46}},"45":{"start":{"line":220,"column":0},"end":{"line":234,"column":2}},"46":{"start":{"line":221,"column":2},"end":{"line":221,"column":24}},"47":{"start":{"line":223,"column":2},"end":{"line":232,"column":4}},"48":{"start":{"line":233,"column":2},"end":{"line":233,"column":46}},"49":{"start":{"line":246,"column":0},"end":{"line":269,"column":2}},"50":{"start":{"line":247,"column":2},"end":{"line":247,"column":24}},"51":{"start":{"line":249,"column":2},"end":{"line":249,"column":57}},"52":{"start":{"line":251,"column":2},"end":{"line":267,"column":4}},"53":{"start":{"line":268,"column":2},"end":{"line":268,"column":46}},"54":{"start":{"line":278,"column":0},"end":{"line":294,"column":2}},"55":{"start":{"line":279,"column":2},"end":{"line":279,"column":24}},"56":{"start":{"line":281,"column":2},"end":{"line":281,"column":57}},"57":{"start":{"line":283,"column":2},"end":{"line":292,"column":4}},"58":{"start":{"line":293,"column":2},"end":{"line":293,"column":46}},"59":{"start":{"line":307,"column":0},"end":{"line":340,"column":2}},"60":{"start":{"line":308,"column":2},"end":{"line":308,"column":24}},"61":{"start":{"line":310,"column":2},"end":{"line":310,"column":57}},"62":{"start":{"line":311,"column":2},"end":{"line":311,"column":60}},"63":{"start":{"line":314,"column":2},"end":{"line":325,"column":3}},"64":{"start":{"line":315,"column":4},"end":{"line":324,"column":5}},"65":{"start":{"line":321,"column":6},"end":{"line":321,"column":42}},"66":{"start":{"line":323,"column":6},"end":{"line":323,"column":75}},"67":{"start":{"line":327,"column":2},"end":{"line":338,"column":4}},"68":{"start":{"line":339,"column":2},"end":{"line":339,"column":46}},"69":{"start":{"line":354,"column":0},"end":{"line":387,"column":2}},"70":{"start":{"line":355,"column":2},"end":{"line":355,"column":24}},"71":{"start":{"line":357,"column":2},"end":{"line":357,"column":57}},"72":{"start":{"line":358,"column":2},"end":{"line":358,"column":60}},"73":{"start":{"line":361,"column":2},"end":{"line":372,"column":3}},"74":{"start":{"line":362,"column":4},"end":{"line":371,"column":5}},"75":{"start":{"line":368,"column":6},"end":{"line":368,"column":42}},"76":{"start":{"line":370,"column":6},"end":{"line":370,"column":75}},"77":{"start":{"line":374,"column":2},"end":{"line":385,"column":4}},"78":{"start":{"line":386,"column":2},"end":{"line":386,"column":46}},"79":{"start":{"line":398,"column":0},"end":{"line":412,"column":2}},"80":{"start":{"line":399,"column":2},"end":{"line":399,"column":24}},"81":{"start":{"line":401,"column":2},"end":{"line":410,"column":4}},"82":{"start":{"line":411,"column":2},"end":{"line":411,"column":46}},"83":{"start":{"line":427,"column":0},"end":{"line":442,"column":2}},"84":{"start":{"line":428,"column":2},"end":{"line":428,"column":24}},"85":{"start":{"line":430,"column":2},"end":{"line":440,"column":4}},"86":{"start":{"line":441,"column":2},"end":{"line":441,"column":46}},"87":{"start":{"line":444,"column":0},"end":{"line":444,"column":29}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":2},"end":{"line":33,"column":2}},{"start":{"line":33,"column":2},"end":{"line":33,"column":2}}]},"2":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":11},"end":{"line":56,"column":17}},{"start":{"line":56,"column":21},"end":{"line":56,"column":23}}]},"3":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":11},"end":{"line":76,"column":17}},{"start":{"line":76,"column":21},"end":{"line":76,"column":23}}]},"4":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":2},"end":{"line":79,"column":2}},{"start":{"line":79,"column":2},"end":{"line":79,"column":2}}]},"5":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":11},"end":{"line":109,"column":17}},{"start":{"line":109,"column":21},"end":{"line":109,"column":23}}]},"6":{"line":131,"type":"binary-expr","locations":[{"start":{"line":131,"column":11},"end":{"line":131,"column":17}},{"start":{"line":131,"column":21},"end":{"line":131,"column":23}}]},"7":{"line":153,"type":"binary-expr","locations":[{"start":{"line":153,"column":11},"end":{"line":153,"column":17}},{"start":{"line":153,"column":21},"end":{"line":153,"column":23}}]},"8":{"line":176,"type":"binary-expr","locations":[{"start":{"line":176,"column":11},"end":{"line":176,"column":17}},{"start":{"line":176,"column":21},"end":{"line":176,"column":23}}]},"9":{"line":198,"type":"binary-expr","locations":[{"start":{"line":198,"column":11},"end":{"line":198,"column":17}},{"start":{"line":198,"column":21},"end":{"line":198,"column":23}}]},"10":{"line":221,"type":"binary-expr","locations":[{"start":{"line":221,"column":11},"end":{"line":221,"column":17}},{"start":{"line":221,"column":21},"end":{"line":221,"column":23}}]},"11":{"line":247,"type":"binary-expr","locations":[{"start":{"line":247,"column":11},"end":{"line":247,"column":17}},{"start":{"line":247,"column":21},"end":{"line":247,"column":23}}]},"12":{"line":249,"type":"binary-expr","locations":[{"start":{"line":249,"column":25},"end":{"line":249,"column":45}},{"start":{"line":249,"column":49},"end":{"line":249,"column":56}}]},"13":{"line":279,"type":"binary-expr","locations":[{"start":{"line":279,"column":11},"end":{"line":279,"column":17}},{"start":{"line":279,"column":21},"end":{"line":279,"column":23}}]},"14":{"line":281,"type":"binary-expr","locations":[{"start":{"line":281,"column":25},"end":{"line":281,"column":45}},{"start":{"line":281,"column":49},"end":{"line":281,"column":56}}]},"15":{"line":308,"type":"binary-expr","locations":[{"start":{"line":308,"column":11},"end":{"line":308,"column":17}},{"start":{"line":308,"column":21},"end":{"line":308,"column":23}}]},"16":{"line":314,"type":"if","locations":[{"start":{"line":314,"column":2},"end":{"line":314,"column":2}},{"start":{"line":314,"column":2},"end":{"line":314,"column":2}}]},"17":{"line":315,"type":"if","locations":[{"start":{"line":315,"column":4},"end":{"line":315,"column":4}},{"start":{"line":315,"column":4},"end":{"line":315,"column":4}}]},"18":{"line":316,"type":"binary-expr","locations":[{"start":{"line":316,"column":6},"end":{"line":316,"column":54}},{"start":{"line":317,"column":6},"end":{"line":317,"column":96}},{"start":{"line":318,"column":6},"end":{"line":318,"column":81}},{"start":{"line":319,"column":6},"end":{"line":319,"column":81}}]},"19":{"line":317,"type":"binary-expr","locations":[{"start":{"line":317,"column":8},"end":{"line":317,"column":35}},{"start":{"line":317,"column":39},"end":{"line":317,"column":95}}]},"20":{"line":318,"type":"binary-expr","locations":[{"start":{"line":318,"column":8},"end":{"line":318,"column":32}},{"start":{"line":318,"column":36},"end":{"line":318,"column":80}}]},"21":{"line":319,"type":"binary-expr","locations":[{"start":{"line":319,"column":8},"end":{"line":319,"column":32}},{"start":{"line":319,"column":36},"end":{"line":319,"column":80}}]},"22":{"line":355,"type":"binary-expr","locations":[{"start":{"line":355,"column":11},"end":{"line":355,"column":17}},{"start":{"line":355,"column":21},"end":{"line":355,"column":23}}]},"23":{"line":361,"type":"if","locations":[{"start":{"line":361,"column":2},"end":{"line":361,"column":2}},{"start":{"line":361,"column":2},"end":{"line":361,"column":2}}]},"24":{"line":362,"type":"if","locations":[{"start":{"line":362,"column":4},"end":{"line":362,"column":4}},{"start":{"line":362,"column":4},"end":{"line":362,"column":4}}]},"25":{"line":363,"type":"binary-expr","locations":[{"start":{"line":363,"column":6},"end":{"line":363,"column":54}},{"start":{"line":364,"column":6},"end":{"line":364,"column":96}},{"start":{"line":365,"column":6},"end":{"line":365,"column":81}},{"start":{"line":366,"column":6},"end":{"line":366,"column":81}}]},"26":{"line":364,"type":"binary-expr","locations":[{"start":{"line":364,"column":8},"end":{"line":364,"column":35}},{"start":{"line":364,"column":39},"end":{"line":364,"column":95}}]},"27":{"line":365,"type":"binary-expr","locations":[{"start":{"line":365,"column":8},"end":{"line":365,"column":32}},{"start":{"line":365,"column":36},"end":{"line":365,"column":80}}]},"28":{"line":366,"type":"binary-expr","locations":[{"start":{"line":366,"column":8},"end":{"line":366,"column":32}},{"start":{"line":366,"column":36},"end":{"line":366,"column":80}}]},"29":{"line":399,"type":"binary-expr","locations":[{"start":{"line":399,"column":11},"end":{"line":399,"column":17}},{"start":{"line":399,"column":21},"end":{"line":399,"column":23}}]},"30":{"line":428,"type":"binary-expr","locations":[{"start":{"line":428,"column":11},"end":{"line":428,"column":17}},{"start":{"line":428,"column":21},"end":{"line":428,"column":23}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const util = require('util');","const requestFactory = require('../lib/requestwrapper');","const BaseService = require('../lib/base_service');","const pick = require('object.pick');","","/**"," *"," * @param {Object} options"," * @constructor"," */","function DiscoveryV1(options) {","  BaseService.call(this, options);","","  // Check if 'version_date' was provided","  if (typeof this._options.version_date === 'undefined') {","    throw new Error('Argument error: version_date was not specified, use DiscoveryV1.VERSION_DATE_2016_12_15');","  }","  this._options.qs.version = options.version_date;","}","","util.inherits(DiscoveryV1, BaseService);","DiscoveryV1.prototype.name = 'discovery';","DiscoveryV1.prototype.version = 'v1';","DiscoveryV1.URL = 'https://gateway.watsonplatform.net/discovery/api';","","/**"," * Initial release"," * @type {string}"," */","DiscoveryV1.VERSION_DATE_2016_12_15 = '2016-12-15';","","/**"," * Return the list of environments"," *"," * @param {Object} params"," */","DiscoveryV1.prototype.getEnvironments = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/environments',","      method: 'GET',","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Create a new environment"," * @param {string} name"," * @param {string} description"," * @param {int} size (optional)"," */","DiscoveryV1.prototype.createEnvironment = function(params, callback) {","  params = params || {};","","  // size is an int of 1,2,3, default 1","  if (!params.size) {","    params.size = 1;","  }","","  const parameters = {","    options: {","      url: '/v1/environments',","      method: 'POST',","      multipart: [","        {","          'content-type': 'application/json',","          body: JSON.stringify(pick(params, ['name', 'description', 'size']))","        }","      ],","      json: true","    },","    originalParams: params,","    requiredParams: ['name', 'description'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Get details about an environment"," *"," * @param {Object} params"," * @param {String} params.environment_id"," */","DiscoveryV1.prototype.getEnvironment = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}',","      method: 'GET',","      path: pick(params, ['environment_id']),","      json: true","    },","    requiredParams: ['environment_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Get details about an environment"," *"," * @param {Object} params"," * @param {String} params.environment_id"," */","DiscoveryV1.prototype.deleteEnvironment = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}',","      method: 'DELETE',","      path: pick(params, ['environment_id']),","      json: true","    },","    requiredParams: ['environment_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * List all configurations"," *"," * @param {Object} params"," * @param {String} params.environment_id"," */","DiscoveryV1.prototype.getConfigurations = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}/configurations',","      method: 'GET',","      path: pick(params, ['environment_id']),","      json: true","    },","    requiredParams: ['environment_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Get details about a configuration"," *"," * @param {Object} params"," * @param {String} params.environment_id"," * @param {String} params.configuration_id"," */","DiscoveryV1.prototype.getConfiguration = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}/configurations/{configuration_id}',","      method: 'GET',","      path: pick(params, ['environment_id', 'configuration_id']),","      json: true","    },","    requiredParams: ['environment_id', 'configuration_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Return the list of collections in the given environment"," *"," * @param {Object} params"," * @param {String} params.environment_id","  */","DiscoveryV1.prototype.getCollections = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}/collections',","      method: 'GET',","      path: pick(params, ['environment_id']),","      json: true","    },","    requiredParams: ['environment_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Get details about a collection"," *"," * @param {Object} params"," * @param {String} params.environment_id"," * @param {string} params.collection_id"," */","DiscoveryV1.prototype.getCollection = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}/collections/{collection_id}',","      method: 'GET',","      path: pick(params, ['environment_id', 'collection_id']),","      json: true","    },","    requiredParams: ['environment_id', 'collection_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Create a new collection"," *"," * @param {Object} params"," * @param {String} params.environment_id environment guid for the collection"," * @param {string} params.collection_name"," * @param {string} params.description"," * @param {string} params.configuration_id  configuration to create the collection in"," * @param {string} params.language_code currently, only `en_us` is supported"," */","DiscoveryV1.prototype.createCollection = function(params, callback) {","  params = params || {};","","  params.language_code = params.language_code || 'en_us';","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}/collections',","      method: 'POST',","      path: pick(params, ['environment_id']),","      multipart: [","        {","          'content-type': 'application/json',","          body: JSON.stringify(pick(params, ['collection_name', 'description', 'configuration_id', 'language_code']))","        }","      ],","      json: true","    },","    originalParams: params,","    requiredParams: ['environment_id', 'configuration_id', 'collection_name'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Delete a collection"," *"," * @param {Object} params"," * @param {String} params.environment_id environment guid for the collection"," * @param {string} params.collection_id the guid of the collection to delete"," */","DiscoveryV1.prototype.deleteCollection = function(params, callback) {","  params = params || {};","","  params.language_code = params.language_code || 'en_us';","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}/collections/{collection_id}',","      method: 'DELETE',","      path: pick(params, ['environment_id', 'collection_id']),","      json: true","    },","    requiredParams: ['environment_id', 'collection_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Add a document to a collection"," * @param params"," * @param {String} params.environment_id environment guid for the collection"," * @param {string} params.collection_id the guid of the collection to delete"," * @param {Buffer|ReadableStream|Object} params.file a file to post (smaller than 50mb)"," * @param {string} [params.configuration_id] config guid"," * @param {string} [params.metadata] file metadata, including content-type (will infer if missing)"," * @param callback"," * @return {ReadableStream|undefined}"," */","DiscoveryV1.prototype.addDocument = function(params, callback) {","  params = params || {};","","  const queryParams = pick(params, ['configuration_id']);","  const formDataParams = pick(params, ['file', 'metadata']);","","  // if we get a buffer or object, we need to include stuff about filename for the service","  if (formDataParams.file) {","    if (","      typeof formDataParams.file.filename !== 'string' &&","      !(formDataParams.file.options && typeof formDataParams.file.options.filename !== 'string') &&","      !(formDataParams.file.path && typeof formDataParams.file.path !== 'string') &&","      !(formDataParams.file.name && typeof formDataParams.file.name !== 'string')","    ) {","      const filedat = formDataParams.file;","      // the filename used below is because the name must exist","      formDataParams.file = { value: filedat, options: { filename: '_' } };","    }","  }","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}/collections/{collection_id}/documents',","      method: 'POST',","      path: pick(params, ['environment_id', 'collection_id']),","      qs: queryParams,","      formData: formDataParams,","      json: true","    },","    requiredParams: ['environment_id', 'collection_id', 'file'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Update or partially update a document to create or replace an existing document"," * @param params"," * @param {String} params.environment_id environment guid for the collection"," * @param {string} params.collection_id the guid of the collection"," * @param {string} params.document_id the guid of the document to update"," * @param {Buffer|ReadableStream|Object} params.file a file to post (smaller than 50mb)"," * @param {string} [params.configuration_id] config guid"," * @param {string} [params.metadata] file metadata, including content-type (will infer if missing)"," * @param callback"," * @return {ReadableStream|undefined}"," */","DiscoveryV1.prototype.updateDocument = function(params, callback) {","  params = params || {};","","  const queryParams = pick(params, ['configuration_id']);","  const formDataParams = pick(params, ['file', 'metadata']);","","  // if we get a buffer or object, we need to include stuff about filename for the service","  if (formDataParams.file) {","    if (","      typeof formDataParams.file.filename !== 'string' &&","      !(formDataParams.file.options && typeof formDataParams.file.options.filename !== 'string') &&","      !(formDataParams.file.path && typeof formDataParams.file.path !== 'string') &&","      !(formDataParams.file.name && typeof formDataParams.file.name !== 'string')","    ) {","      const filedat = formDataParams.file;","      // the filename used below is because the name must exist","      formDataParams.file = { value: filedat, options: { filename: '_' } };","    }","  }","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}/collections/{collection_id}/documents/{document_id}',","      method: 'POST',","      path: pick(params, ['environment_id', 'collection_id', 'document_id']),","      qs: queryParams,","      formData: formDataParams,","      json: true","    },","    requiredParams: ['environment_id', 'collection_id', 'document_id', 'file'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Delete a specific document"," * @param params"," * @param {String} params.environment_id environment guid for the collection"," * @param {string} params.collection_id the guid of the collection to delete"," * @param {string} params.document_id the guid of the document to delete"," * @param callback"," * @return {ReadableStream|undefined}"," */","DiscoveryV1.prototype.deleteDocument = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}/collections/{collection_id}/documents/{document_id}',","      method: 'DELETE',","      path: pick(params, ['environment_id', 'collection_id', 'document_id']),","      json: true","    },","    requiredParams: ['environment_id', 'collection_id', 'document_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Queries the collection"," *"," * @param {Object} params"," * @param {String} params.environment_id"," * @param {string} params.collection_id"," * @param {String} [params.filter]  A cacheable query that allows you to limit the information returned to exclude anything that isn't related to what you are searching. Filter searches are better for metadata type searches and when you are trying to get a sense of concepts in the dataset."," * @param {String} [params.query]  A query search returns all possible results, even when it's not very relevant, with the most relevant documents listed first. Use a query search when you want to find the most relevant search results. Results are scored between 0 and 1, with 1 being an exact match and 0 being not a match at all."," * @param {String} [params.aggregation] An aggregation search uses combinations of filters and query search to return an exact answer. Aggregations are useful for building applications, because you can use them to build lists, tables, and time series. For a full list of possible aggregrations, see the Query reference."," * @param {Number} [params.count=10] Number of documents to return"," * @param {String} [params.return] A comma separated list of the portion of the document hierarchy to return."," * @param {Number} [params.offset=0] For pagination purposes. Returns additional pages of results. Deep pagination is highly unperformant, and should be avoided."," */","DiscoveryV1.prototype.query = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}/collections/{collection_id}/query',","      method: 'GET',","      json: true,","      path: pick(params, ['environment_id', 'collection_id']),","      qs: pick(params, ['filter', 'aggregation', 'return', 'count', 'offset', 'query'])","    },","    requiredParams: ['environment_id', 'collection_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","module.exports = DiscoveryV1;",""],"l":{"19":1,"20":1,"21":1,"22":1,"29":1,"30":0,"33":0,"34":0,"36":0,"39":1,"40":1,"41":1,"42":1,"48":1,"55":1,"56":0,"58":0,"66":0,"75":1,"76":0,"79":0,"80":0,"83":0,"99":0,"108":1,"109":0,"111":0,"121":0,"130":1,"131":0,"133":0,"143":0,"152":1,"153":0,"155":0,"165":0,"175":1,"176":0,"178":0,"188":0,"197":1,"198":0,"200":0,"210":0,"220":1,"221":0,"223":0,"233":0,"246":1,"247":0,"249":0,"251":0,"268":0,"278":1,"279":0,"281":0,"283":0,"293":0,"307":1,"308":0,"310":0,"311":0,"314":0,"315":0,"321":0,"323":0,"327":0,"339":0,"354":1,"355":0,"357":0,"358":0,"361":0,"362":0,"368":0,"370":0,"374":0,"386":0,"398":1,"399":0,"401":0,"411":0,"427":1,"428":0,"430":0,"441":0,"444":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/discovery/v1-experimental.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/discovery/v1-experimental.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"DiscoveryV1Experimental","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":42}}},"2":{"name":"(anonymous_2)","line":56,"loc":{"start":{"line":56,"column":52},"end":{"line":56,"column":79}}},"3":{"name":"(anonymous_3)","line":77,"loc":{"start":{"line":77,"column":51},"end":{"line":77,"column":78}}},"4":{"name":"(anonymous_4)","line":100,"loc":{"start":{"line":100,"column":51},"end":{"line":100,"column":78}}},"5":{"name":"(anonymous_5)","line":123,"loc":{"start":{"line":123,"column":50},"end":{"line":123,"column":91}}},"6":{"name":"(anonymous_6)","line":152,"loc":{"start":{"line":152,"column":42},"end":{"line":152,"column":69}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":29}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":56}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":51}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":36}},"5":{"start":{"line":29,"column":0},"end":{"line":37,"column":1}},"6":{"start":{"line":30,"column":2},"end":{"line":30,"column":34}},"7":{"start":{"line":33,"column":2},"end":{"line":35,"column":3}},"8":{"start":{"line":34,"column":4},"end":{"line":34,"column":123}},"9":{"start":{"line":36,"column":2},"end":{"line":36,"column":50}},"10":{"start":{"line":39,"column":0},"end":{"line":39,"column":52}},"11":{"start":{"line":40,"column":0},"end":{"line":40,"column":53}},"12":{"start":{"line":41,"column":0},"end":{"line":41,"column":62}},"13":{"start":{"line":42,"column":0},"end":{"line":42,"column":94}},"14":{"start":{"line":48,"column":0},"end":{"line":48,"column":63}},"15":{"start":{"line":56,"column":0},"end":{"line":69,"column":2}},"16":{"start":{"line":57,"column":2},"end":{"line":57,"column":24}},"17":{"start":{"line":59,"column":2},"end":{"line":67,"column":4}},"18":{"start":{"line":68,"column":2},"end":{"line":68,"column":46}},"19":{"start":{"line":77,"column":0},"end":{"line":91,"column":2}},"20":{"start":{"line":78,"column":2},"end":{"line":78,"column":24}},"21":{"start":{"line":80,"column":2},"end":{"line":89,"column":4}},"22":{"start":{"line":90,"column":2},"end":{"line":90,"column":46}},"23":{"start":{"line":100,"column":0},"end":{"line":114,"column":2}},"24":{"start":{"line":101,"column":2},"end":{"line":101,"column":24}},"25":{"start":{"line":103,"column":2},"end":{"line":112,"column":4}},"26":{"start":{"line":113,"column":2},"end":{"line":113,"column":46}},"27":{"start":{"line":123,"column":0},"end":{"line":137,"column":2}},"28":{"start":{"line":124,"column":2},"end":{"line":124,"column":24}},"29":{"start":{"line":126,"column":2},"end":{"line":135,"column":4}},"30":{"start":{"line":136,"column":2},"end":{"line":136,"column":46}},"31":{"start":{"line":152,"column":0},"end":{"line":167,"column":2}},"32":{"start":{"line":153,"column":2},"end":{"line":153,"column":24}},"33":{"start":{"line":155,"column":2},"end":{"line":165,"column":4}},"34":{"start":{"line":166,"column":2},"end":{"line":166,"column":46}},"35":{"start":{"line":169,"column":0},"end":{"line":169,"column":41}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":2},"end":{"line":33,"column":2}},{"start":{"line":33,"column":2},"end":{"line":33,"column":2}}]},"2":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":11},"end":{"line":57,"column":17}},{"start":{"line":57,"column":21},"end":{"line":57,"column":23}}]},"3":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":11},"end":{"line":78,"column":17}},{"start":{"line":78,"column":21},"end":{"line":78,"column":23}}]},"4":{"line":101,"type":"binary-expr","locations":[{"start":{"line":101,"column":11},"end":{"line":101,"column":17}},{"start":{"line":101,"column":21},"end":{"line":101,"column":23}}]},"5":{"line":124,"type":"binary-expr","locations":[{"start":{"line":124,"column":11},"end":{"line":124,"column":17}},{"start":{"line":124,"column":21},"end":{"line":124,"column":23}}]},"6":{"line":153,"type":"binary-expr","locations":[{"start":{"line":153,"column":11},"end":{"line":153,"column":17}},{"start":{"line":153,"column":21},"end":{"line":153,"column":23}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const util = require('util');","const requestFactory = require('../lib/requestwrapper');","const BaseService = require('../lib/base_service');","const pick = require('object.pick');","","/**"," *"," * @param {Object} options"," * @constructor"," */","function DiscoveryV1Experimental(options) {","  BaseService.call(this, options);","","  // Check if 'version_date' was provided","  if (typeof this._options.version_date === 'undefined') {","    throw new Error('Argument error: version_date was not specified, use DiscoveryV1Experimental.VERSION_DATE_2016_07_11');","  }","  this._options.qs.version = options.version_date;","}","","util.inherits(DiscoveryV1Experimental, BaseService);","DiscoveryV1Experimental.prototype.name = 'discovery';","DiscoveryV1Experimental.prototype.version = 'v1-experimental';","DiscoveryV1Experimental.URL = 'https://gateway.watsonplatform.net/discovery-experimental/api';","","/**"," * Initial release"," * @type {string}"," */","DiscoveryV1Experimental.VERSION_DATE_2016_07_11 = '2016-11-07';","","/**"," * Return the list of environments"," *"," * @param {Object} params"," * @param {String} [params.name] search enviroments with the given name"," */","DiscoveryV1Experimental.prototype.getEnvironments = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/environments',","      method: 'GET',","      json: true,","      qs: pick(params, ['name'])","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Get details about an environment"," *"," * @param {Object} params"," * @param {String} params.environment_id"," */","DiscoveryV1Experimental.prototype.getEnvironment = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}',","      method: 'GET',","      path: pick(params, ['environment_id']),","      json: true","    },","    requiredParams: ['environment_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Return the list of collections in the given environment"," *"," * @param {Object} params"," * @param {String} params.environment_id"," * @param {String} [params.name] Find collections with the given name."," */","DiscoveryV1Experimental.prototype.getCollections = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}/collections',","      method: 'GET',","      path: pick(params, ['environment_id']),","      json: true","    },","    requiredParams: ['environment_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Get details about a collection"," *"," * @param {Object} params"," * @param {String} params.environment_id"," * @param {string} params.collection_id"," */","DiscoveryV1Experimental.prototype.getCollection = function(params, collectionId, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}/collections/{collection_id}',","      method: 'GET',","      path: pick(params, ['environment_id', 'collection_id']),","      json: true","    },","    requiredParams: ['environment_id', 'collection_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Queries the collection"," *"," * @param {Object} params"," * @param {String} params.environment_id"," * @param {string} params.collection_id"," * @param {String} [params.filter]  A cacheable query that allows you to limit the information returned to exclude anything that isn't related to what you are searching. Filter searches are better for metadata type searches and when you are trying to get a sense of concepts in the dataset."," * @param {String} [params.query]  A query search returns all possible results, even when it's not very relevant, with the most relevant documents listed first. Use a query search when you want to find the most relevant search results. Results are scored between 0 and 1, with 1 being an exact match and 0 being not a match at all."," * @param {String} [params.aggregation] An aggregation search uses combinations of filters and query search to return an exact answer. Aggregations are useful for building applications, because you can use them to build lists, tables, and time series. For a full list of possible aggregrations, see the Query reference."," * @param {Number} [params.count=10] Number of documents to return"," * @param {String} [params.return] A comma separated list of the portion of the document hierarchy to return."," * @param {Number} [params.offset=0] For pagination purposes. Returns additional pages of results. Deep pagination is highly unperformant, and should be avoided."," */","DiscoveryV1Experimental.prototype.query = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/environments/{environment_id}/collections/{collection_id}/query',","      method: 'GET',","      json: true,","      path: pick(params, ['environment_id', 'collection_id']),","      qs: pick(params, ['filter', 'aggregation', 'return', 'count', 'offset', 'query'])","    },","    requiredParams: ['environment_id', 'collection_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","module.exports = DiscoveryV1Experimental;",""],"l":{"19":1,"20":1,"21":1,"22":1,"29":1,"30":0,"33":0,"34":0,"36":0,"39":1,"40":1,"41":1,"42":1,"48":1,"56":1,"57":0,"59":0,"68":0,"77":1,"78":0,"80":0,"90":0,"100":1,"101":0,"103":0,"113":0,"123":1,"124":0,"126":0,"136":0,"152":1,"153":0,"155":0,"166":0,"169":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/document-conversion/v1.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/document-conversion/v1.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":17,"66":0,"67":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0,0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":17,"7":0},"fnMap":{"1":{"name":"DocumentConversionV1","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":39}}},"2":{"name":"fixupContentType","line":61,"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":34}}},"3":{"name":"(anonymous_3)","line":84,"loc":{"start":{"line":84,"column":41},"end":{"line":84,"column":68}}},"4":{"name":"(anonymous_4)","line":90,"loc":{"start":{"line":90,"column":26},"end":{"line":90,"column":38}}},"5":{"name":"(anonymous_5)","line":158,"loc":{"start":{"line":158,"column":39},"end":{"line":158,"column":66}}},"6":{"name":"(anonymous_6)","line":253,"loc":{"start":{"line":253,"column":10},"end":{"line":253,"column":25}}},"7":{"name":"deprecated","line":254,"loc":{"start":{"line":254,"column":41},"end":{"line":254,"column":63}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":37}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":36}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":29}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":51}},"6":{"start":{"line":30,"column":0},"end":{"line":41,"column":1}},"7":{"start":{"line":31,"column":2},"end":{"line":31,"column":34}},"8":{"start":{"line":34,"column":2},"end":{"line":40,"column":3}},"9":{"start":{"line":36,"column":4},"end":{"line":39,"column":6}},"10":{"start":{"line":42,"column":0},"end":{"line":42,"column":49}},"11":{"start":{"line":43,"column":0},"end":{"line":43,"column":60}},"12":{"start":{"line":44,"column":0},"end":{"line":44,"column":46}},"13":{"start":{"line":45,"column":0},"end":{"line":45,"column":88}},"14":{"start":{"line":46,"column":0},"end":{"line":48,"column":2}},"15":{"start":{"line":50,"column":0},"end":{"line":54,"column":2}},"16":{"start":{"line":61,"column":0},"end":{"line":70,"column":1}},"17":{"start":{"line":62,"column":2},"end":{"line":69,"column":3}},"18":{"start":{"line":63,"column":4},"end":{"line":68,"column":6}},"19":{"start":{"line":84,"column":0},"end":{"line":134,"column":2}},"20":{"start":{"line":85,"column":2},"end":{"line":85,"column":24}},"21":{"start":{"line":86,"column":2},"end":{"line":88,"column":3}},"22":{"start":{"line":87,"column":4},"end":{"line":87,"column":70}},"23":{"start":{"line":89,"column":2},"end":{"line":89,"column":77}},"24":{"start":{"line":90,"column":2},"end":{"line":92,"column":5}},"25":{"start":{"line":91,"column":4},"end":{"line":91,"column":63}},"26":{"start":{"line":93,"column":2},"end":{"line":96,"column":3}},"27":{"start":{"line":94,"column":4},"end":{"line":94,"column":117}},"28":{"start":{"line":95,"column":4},"end":{"line":95,"column":11}},"29":{"start":{"line":98,"column":2},"end":{"line":101,"column":3}},"30":{"start":{"line":99,"column":4},"end":{"line":99,"column":115}},"31":{"start":{"line":100,"column":4},"end":{"line":100,"column":11}},"32":{"start":{"line":103,"column":2},"end":{"line":106,"column":3}},"33":{"start":{"line":104,"column":4},"end":{"line":104,"column":104}},"34":{"start":{"line":105,"column":4},"end":{"line":105,"column":11}},"35":{"start":{"line":108,"column":2},"end":{"line":115,"column":4}},"36":{"start":{"line":118,"column":2},"end":{"line":131,"column":3}},"37":{"start":{"line":119,"column":4},"end":{"line":119,"column":29}},"38":{"start":{"line":120,"column":4},"end":{"line":128,"column":6}},"39":{"start":{"line":130,"column":4},"end":{"line":130,"column":37}},"40":{"start":{"line":133,"column":2},"end":{"line":133,"column":46}},"41":{"start":{"line":158,"column":0},"end":{"line":232,"column":2}},"42":{"start":{"line":159,"column":2},"end":{"line":159,"column":24}},"43":{"start":{"line":160,"column":2},"end":{"line":163,"column":3}},"44":{"start":{"line":161,"column":4},"end":{"line":161,"column":109}},"45":{"start":{"line":162,"column":4},"end":{"line":162,"column":11}},"46":{"start":{"line":164,"column":2},"end":{"line":167,"column":3}},"47":{"start":{"line":165,"column":4},"end":{"line":165,"column":104}},"48":{"start":{"line":166,"column":4},"end":{"line":166,"column":11}},"49":{"start":{"line":168,"column":2},"end":{"line":171,"column":3}},"50":{"start":{"line":169,"column":4},"end":{"line":169,"column":109}},"51":{"start":{"line":170,"column":4},"end":{"line":170,"column":11}},"52":{"start":{"line":173,"column":2},"end":{"line":180,"column":4}},"53":{"start":{"line":183,"column":2},"end":{"line":229,"column":3}},"54":{"start":{"line":184,"column":4},"end":{"line":184,"column":29}},"55":{"start":{"line":185,"column":4},"end":{"line":199,"column":6}},"56":{"start":{"line":200,"column":9},"end":{"line":229,"column":3}},"57":{"start":{"line":201,"column":4},"end":{"line":201,"column":29}},"58":{"start":{"line":202,"column":4},"end":{"line":210,"column":6}},"59":{"start":{"line":211,"column":9},"end":{"line":229,"column":3}},"60":{"start":{"line":212,"column":4},"end":{"line":225,"column":6}},"61":{"start":{"line":227,"column":4},"end":{"line":227,"column":109}},"62":{"start":{"line":228,"column":4},"end":{"line":228,"column":11}},"63":{"start":{"line":231,"column":2},"end":{"line":231,"column":46}},"64":{"start":{"line":235,"column":0},"end":{"line":257,"column":3}},"65":{"start":{"line":254,"column":2},"end":{"line":256,"column":4}},"66":{"start":{"line":255,"column":4},"end":{"line":255,"column":141}},"67":{"start":{"line":259,"column":0},"end":{"line":259,"column":38}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"2":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":33}},{"start":{"line":34,"column":37},"end":{"line":34,"column":58}}]},"3":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":2},"end":{"line":62,"column":2}},{"start":{"line":62,"column":2},"end":{"line":62,"column":2}}]},"4":{"line":85,"type":"binary-expr","locations":[{"start":{"line":85,"column":11},"end":{"line":85,"column":17}},{"start":{"line":85,"column":21},"end":{"line":85,"column":23}}]},"5":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":2},"end":{"line":86,"column":2}},{"start":{"line":86,"column":2},"end":{"line":86,"column":2}}]},"6":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":2},"end":{"line":93,"column":2}},{"start":{"line":93,"column":2},"end":{"line":93,"column":2}}]},"7":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":2},"end":{"line":98,"column":2}},{"start":{"line":98,"column":2},"end":{"line":98,"column":2}}]},"8":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":6},"end":{"line":98,"column":18}},{"start":{"line":98,"column":22},"end":{"line":98,"column":41}}]},"9":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":2},"end":{"line":103,"column":2}},{"start":{"line":103,"column":2},"end":{"line":103,"column":2}}]},"10":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":6},"end":{"line":103,"column":17}},{"start":{"line":103,"column":21},"end":{"line":103,"column":43}},{"start":{"line":103,"column":47},"end":{"line":103,"column":76}},{"start":{"line":103,"column":80},"end":{"line":103,"column":98}}]},"11":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":2},"end":{"line":118,"column":2}},{"start":{"line":118,"column":2},"end":{"line":118,"column":2}}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":30},"end":{"line":123,"column":43}},{"start":{"line":123,"column":47},"end":{"line":123,"column":85}}]},"13":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":11},"end":{"line":159,"column":17}},{"start":{"line":159,"column":21},"end":{"line":159,"column":23}}]},"14":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":2},"end":{"line":160,"column":2}},{"start":{"line":160,"column":2},"end":{"line":160,"column":2}}]},"15":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":6},"end":{"line":160,"column":18}},{"start":{"line":160,"column":22},"end":{"line":160,"column":38}}]},"16":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":2},"end":{"line":164,"column":2}},{"start":{"line":164,"column":2},"end":{"line":164,"column":2}}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":6},"end":{"line":164,"column":17}},{"start":{"line":164,"column":21},"end":{"line":164,"column":43}},{"start":{"line":164,"column":47},"end":{"line":164,"column":76}},{"start":{"line":164,"column":80},"end":{"line":164,"column":98}}]},"18":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":2},"end":{"line":168,"column":2}},{"start":{"line":168,"column":2},"end":{"line":168,"column":2}}]},"19":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":2},"end":{"line":183,"column":2}},{"start":{"line":183,"column":2},"end":{"line":183,"column":2}}]},"20":{"line":183,"type":"binary-expr","locations":[{"start":{"line":183,"column":6},"end":{"line":183,"column":17}},{"start":{"line":183,"column":21},"end":{"line":183,"column":36}}]},"21":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":9},"end":{"line":200,"column":9}},{"start":{"line":200,"column":9},"end":{"line":200,"column":9}}]},"22":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":9},"end":{"line":211,"column":9}},{"start":{"line":211,"column":9},"end":{"line":211,"column":9}}]}},"code":["/**"," * Copyright 2014 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const requestFactory = require('../lib/requestwrapper');","const isStream = require('isstream');","const omit = require('object.omit');","const util = require('util');","const BaseService = require('../lib/base_service');","","/**"," * Document Conversion service"," * @param {Object} options"," * @constructor"," */","function DocumentConversionV1(options) {","  BaseService.call(this, options);","","  // Warn if not specifying version date","  if (!this._options.version_date && !this._options.silent) {","    // eslint-disable-next-line no-console","    console.warn(","      '[DocumentConversion] WARNING: No version_date specified. Using a (possibly old) default. ' +","        'e.g. watson.document_conversion({ version_date: \"2015-12-15\" })'","    );","  }","}","util.inherits(DocumentConversionV1, BaseService);","DocumentConversionV1.prototype.name = 'document_conversion';","DocumentConversionV1.prototype.version = 'v1';","DocumentConversionV1.URL = 'https://gateway.watsonplatform.net/document-conversion/api';","DocumentConversionV1.prototype.serviceDefaults = {","  qs: { version: '2015-12-15' }","};","","DocumentConversionV1.prototype.conversion_target = {","  ANSWER_UNITS: 'answer_units',","  NORMALIZED_HTML: 'normalized_html',","  NORMALIZED_TEXT: 'normalized_text'","};","","/**"," * This sets up the content type \"headers\" in the form/multipart body (not in the actual headers)"," * @private"," * @param params"," */","function fixupContentType(params) {","  if (params.content_type) {","    params.file = {","      value: params.file,","      options: {","        contentType: params.content_type","      }","    };","  }","}","","/**"," * One-off convert an attached document OR convert a previously uploaded document by ID"," *"," * To convert a previously uploaded document, set params.document_id"," *"," * @param  {Object} params"," * @param  {Object} params.conversion_target Must be set to one of ['answer_units', 'normalized_html', 'normalized_text']"," * @param  {ReadableStream} [params.file] The document file to convert. May be a ReadableStream or Buffer"," * @param  {String} [params.content_type] Set this when the content type cannot be determined from the filename (params.file.path)"," * @param  {Object} [params.config] Optional configuration option. Recommended way to set configuration."," * @param  {Function} callback"," */","DocumentConversionV1.prototype.convert = function(params, callback) {","  params = params || {};","  if (typeof params.conversion_target === 'string') {","    params.conversion_target = params.conversion_target.toLowerCase();","  }","  const keys = Object.keys(DocumentConversionV1.prototype.conversion_target);","  const values = keys.map(function(v) {","    return DocumentConversionV1.prototype.conversion_target[v];","  });","  if (values.indexOf(params.conversion_target) === -1) {","    callback(new Error('Missing required parameters: conversion_target. Possible values are: ' + values.join(', ')));","    return;","  }","","  if (!params.file && !params.document_id) {","    callback(new Error('Missing required parameters: either params.file or params.document_id must be specified'));","    return;","  }","","  if (params.file && !isStream(params.file) && !Buffer.isBuffer(params.file) && !params.file.value) {","    callback(new Error('Missing required parameters: file is not a standard Node.js Stream or Buffer'));","    return;","  }","","  const parameters = {","    options: {","      method: 'POST',","      url: '/v1/convert_document',","      json: true","    },","    defaultOptions: this._options","  };","","  // send the parameters in the body or as formData depending on the request","  if (params.file) {","    fixupContentType(params);","    parameters.options.formData = {","      file: params.file,","      config: {","        value: JSON.stringify(params.config || omit(params, ['file', 'content_type'])),","        options: {","          contentType: 'application/json; charset=utf-8'","        }","      }","    };","  } else {","    parameters.options.body = params;","  }","","  return requestFactory(parameters, callback);","};","","/**"," * One-off convert and index a document via index_document API"," *"," * NOTE: A SOLR cluster and search collection will have to be created through the Retrieve and Rank"," *       service prior to using this API if actual indexing is performed (dry_run=false)."," *"," * @param  {Object} params"," * @param  {ReadableStream} [params.file] The document file to convert. May be a ReadableStream or Buffer"," * @param  {Object} params.metadata Metadata array of Object's where each object contains 'name' and 'value'"," * @param  {Object} params.config Configuration for the conversion and indexing. The conversion config needs","                      to be in a 'convert_document' object. This can include configuration for 'pdf', 'word'","                      and 'normalized_html' phases of the conversion process. The indexing config needs to be","                      in a 'retrieve_and_rank' object. The 'retrieve_and_rank' object has the following fields:","                      'dry_run' - boolean value, true if a dry run is to be performed, false to actually index,","                      'service_instance_id' - The serviceGuid of your instance of the retrieve and rank","                      service (required if dry_run=false), 'cluster_id' - The Solr cluster id for your retrieve","                      and rank service instance (required if dry_run=false), 'search_collection' - The name of","                      your Solr search collection from your retrieve and rank service instance (required if","                      dry_run=false), and 'fields' - Configuration information for field 'mappings', fields","                      to 'include', and fields to 'exclude' during indexing (exclude takes precedence over include)"," * @param  {Function} callback"," */","DocumentConversionV1.prototype.index = function(params, callback) {","  params = params || {};","  if (!params.file && !params.metadata) {","    callback(new Error('Missing required parameters: file or metadata. At least one of those is required.'));","    return;","  }","  if (params.file && !isStream(params.file) && !Buffer.isBuffer(params.file) && !params.file.value) {","    callback(new Error('Missing required parameters: file is not a standard Node.js Stream or Buffer'));","    return;","  }","  if (!params.config) {","    callback(new Error('Missing required parameters: file or metadata. At least one of those is required.'));","    return;","  }","","  const parameters = {","    options: {","      method: 'POST',","      url: '/v1/index_document',","      json: true","    },","    defaultOptions: this._options","  };","","  // send the parameters as formData","  if (params.file && params.metadata) {","    fixupContentType(params);","    parameters.options.formData = {","      file: params.file,","      config: {","        value: JSON.stringify(params.config),","        options: {","          contentType: 'application/json; charset=utf-8'","        }","      },","      metadata: {","        value: JSON.stringify(params.metadata),","        options: {","          contentType: 'application/json; charset=utf-8'","        }","      }","    };","  } else if (params.file) {","    fixupContentType(params);","    parameters.options.formData = {","      file: params.file,","      config: {","        value: JSON.stringify(params.config),","        options: {","          contentType: 'application/json; charset=utf-8'","        }","      }","    };","  } else if (params.metadata) {","    parameters.options.formData = {","      config: {","        value: JSON.stringify(params.config),","        options: {","          contentType: 'application/json; charset=utf-8'","        }","      },","      metadata: {","        value: JSON.stringify(params.metadata),","        options: {","          contentType: 'application/json; charset=utf-8'","        }","      }","    };","  } else {","    callback(new Error('Missing required parameters: file or metadata. At least one of those is required.'));","    return;","  }","","  return requestFactory(parameters, callback);","};","","// give a clear error message for the deprecated methods","[","  'getOutput',","  'getOutputs',","  'getJobLog',","  'getJobs',","  'getJob',","  'createJob',","  'getBatchDocument',","  'getBatchDocuments',","  'addDocumentToBatch',","  'getDocument',","  'getDocuments',","  'uploadDocument',","  'getBatchDocuments',","  'updateBatch',","  'getBatch',","  'createBatch',","  'getBatches'","].forEach(function(name) {","  DocumentConversionV1.prototype[name] = function deprecated() {","    throw new Error('The DocumentConversion.' + name + '() method was deprecated and is no longer available, please use convert() instead.');","  };","});","","module.exports = DocumentConversionV1;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"30":1,"31":0,"34":0,"36":0,"42":1,"43":1,"44":1,"45":1,"46":1,"50":1,"61":1,"62":0,"63":0,"84":1,"85":0,"86":0,"87":0,"89":0,"90":0,"91":0,"93":0,"94":0,"95":0,"98":0,"99":0,"100":0,"103":0,"104":0,"105":0,"108":0,"118":0,"119":0,"120":0,"130":0,"133":0,"158":1,"159":0,"160":0,"161":0,"162":0,"164":0,"165":0,"166":0,"168":0,"169":0,"170":0,"173":0,"183":0,"184":0,"185":0,"200":0,"201":0,"202":0,"211":0,"212":0,"227":0,"228":0,"231":0,"235":1,"254":17,"255":0,"259":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/language-translation/v2.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/language-translation/v2.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":1,"12":1,"13":1,"14":1,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"LanguageTranslationV2","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":40}}},"2":{"name":"(anonymous_2)","line":54,"loc":{"start":{"line":54,"column":44},"end":{"line":54,"column":71}}},"3":{"name":"(anonymous_3)","line":73,"loc":{"start":{"line":73,"column":43},"end":{"line":73,"column":70}}},"4":{"name":"(anonymous_4)","line":98,"loc":{"start":{"line":98,"column":46},"end":{"line":98,"column":73}}},"5":{"name":"(anonymous_5)","line":135,"loc":{"start":{"line":135,"column":46},"end":{"line":135,"column":73}}},"6":{"name":"(anonymous_6)","line":156,"loc":{"start":{"line":156,"column":44},"end":{"line":156,"column":71}}},"7":{"name":"(anonymous_7)","line":180,"loc":{"start":{"line":180,"column":59},"end":{"line":180,"column":86}}},"8":{"name":"(anonymous_8)","line":198,"loc":{"start":{"line":198,"column":43},"end":{"line":198,"column":70}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":33}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":36}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":37}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":40}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":29}},"7":{"start":{"line":25,"column":0},"end":{"line":25,"column":51}},"8":{"start":{"line":34,"column":0},"end":{"line":36,"column":1}},"9":{"start":{"line":35,"column":2},"end":{"line":35,"column":34}},"10":{"start":{"line":37,"column":0},"end":{"line":37,"column":50}},"11":{"start":{"line":38,"column":0},"end":{"line":38,"column":62}},"12":{"start":{"line":39,"column":0},"end":{"line":39,"column":47}},"13":{"start":{"line":40,"column":0},"end":{"line":40,"column":90}},"14":{"start":{"line":54,"column":0},"end":{"line":67,"column":2}},"15":{"start":{"line":55,"column":2},"end":{"line":55,"column":24}},"16":{"start":{"line":57,"column":2},"end":{"line":65,"column":4}},"17":{"start":{"line":66,"column":2},"end":{"line":66,"column":46}},"18":{"start":{"line":73,"column":0},"end":{"line":87,"column":2}},"19":{"start":{"line":74,"column":2},"end":{"line":74,"column":24}},"20":{"start":{"line":76,"column":2},"end":{"line":85,"column":4}},"21":{"start":{"line":86,"column":2},"end":{"line":86,"column":46}},"22":{"start":{"line":98,"column":0},"end":{"line":129,"column":2}},"23":{"start":{"line":99,"column":2},"end":{"line":99,"column":24}},"24":{"start":{"line":101,"column":2},"end":{"line":101,"column":75}},"25":{"start":{"line":102,"column":2},"end":{"line":105,"column":3}},"26":{"start":{"line":103,"column":4},"end":{"line":103,"column":28}},"27":{"start":{"line":104,"column":4},"end":{"line":104,"column":11}},"28":{"start":{"line":107,"column":2},"end":{"line":107,"column":82}},"29":{"start":{"line":109,"column":2},"end":{"line":116,"column":3}},"30":{"start":{"line":110,"column":4},"end":{"line":115,"column":5}},"31":{"start":{"line":111,"column":6},"end":{"line":114,"column":7}},"32":{"start":{"line":112,"column":8},"end":{"line":112,"column":84}},"33":{"start":{"line":113,"column":8},"end":{"line":113,"column":15}},"34":{"start":{"line":118,"column":2},"end":{"line":127,"column":4}},"35":{"start":{"line":128,"column":2},"end":{"line":128,"column":46}},"36":{"start":{"line":135,"column":0},"end":{"line":149,"column":2}},"37":{"start":{"line":136,"column":2},"end":{"line":136,"column":24}},"38":{"start":{"line":138,"column":2},"end":{"line":147,"column":4}},"39":{"start":{"line":148,"column":2},"end":{"line":148,"column":46}},"40":{"start":{"line":156,"column":0},"end":{"line":175,"column":2}},"41":{"start":{"line":157,"column":2},"end":{"line":157,"column":24}},"42":{"start":{"line":159,"column":2},"end":{"line":162,"column":3}},"43":{"start":{"line":160,"column":4},"end":{"line":160,"column":86}},"44":{"start":{"line":161,"column":4},"end":{"line":161,"column":11}},"45":{"start":{"line":163,"column":2},"end":{"line":172,"column":4}},"46":{"start":{"line":174,"column":2},"end":{"line":174,"column":46}},"47":{"start":{"line":180,"column":0},"end":{"line":192,"column":2}},"48":{"start":{"line":181,"column":2},"end":{"line":181,"column":24}},"49":{"start":{"line":183,"column":2},"end":{"line":189,"column":4}},"50":{"start":{"line":191,"column":2},"end":{"line":191,"column":46}},"51":{"start":{"line":198,"column":0},"end":{"line":219,"column":2}},"52":{"start":{"line":199,"column":2},"end":{"line":202,"column":3}},"53":{"start":{"line":200,"column":4},"end":{"line":200,"column":61}},"54":{"start":{"line":201,"column":4},"end":{"line":201,"column":11}},"55":{"start":{"line":204,"column":2},"end":{"line":216,"column":4}},"56":{"start":{"line":218,"column":2},"end":{"line":218,"column":46}},"57":{"start":{"line":221,"column":0},"end":{"line":221,"column":39}}},"branchMap":{"1":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":11},"end":{"line":55,"column":17}},{"start":{"line":55,"column":21},"end":{"line":55,"column":23}}]},"2":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":11},"end":{"line":74,"column":17}},{"start":{"line":74,"column":21},"end":{"line":74,"column":23}}]},"3":{"line":99,"type":"binary-expr","locations":[{"start":{"line":99,"column":11},"end":{"line":99,"column":17}},{"start":{"line":99,"column":21},"end":{"line":99,"column":23}}]},"4":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":2},"end":{"line":102,"column":2}},{"start":{"line":102,"column":2},"end":{"line":102,"column":2}}]},"5":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":4},"end":{"line":110,"column":4}},{"start":{"line":110,"column":4},"end":{"line":110,"column":4}}]},"6":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":6},"end":{"line":111,"column":6}},{"start":{"line":111,"column":6},"end":{"line":111,"column":6}}]},"7":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":10},"end":{"line":111,"column":34}},{"start":{"line":111,"column":38},"end":{"line":111,"column":73}}]},"8":{"line":136,"type":"binary-expr","locations":[{"start":{"line":136,"column":11},"end":{"line":136,"column":17}},{"start":{"line":136,"column":21},"end":{"line":136,"column":23}}]},"9":{"line":157,"type":"binary-expr","locations":[{"start":{"line":157,"column":11},"end":{"line":157,"column":17}},{"start":{"line":157,"column":21},"end":{"line":157,"column":23}}]},"10":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":2},"end":{"line":159,"column":2}},{"start":{"line":159,"column":2},"end":{"line":159,"column":2}}]},"11":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":8},"end":{"line":159,"column":23}},{"start":{"line":159,"column":27},"end":{"line":159,"column":40}},{"start":{"line":159,"column":44},"end":{"line":159,"column":57}}]},"12":{"line":181,"type":"binary-expr","locations":[{"start":{"line":181,"column":11},"end":{"line":181,"column":17}},{"start":{"line":181,"column":21},"end":{"line":181,"column":23}}]},"13":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":2},"end":{"line":199,"column":2}},{"start":{"line":199,"column":2},"end":{"line":199,"column":2}}]},"14":{"line":199,"type":"binary-expr","locations":[{"start":{"line":199,"column":6},"end":{"line":199,"column":13}},{"start":{"line":199,"column":17},"end":{"line":199,"column":29}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not"," * use this file except in compliance with the License. You may obtain a copy of"," * the License at"," *"," * http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT"," * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the"," * License for the specific language governing permissions and limitations under"," * the License."," */","","'use strict';","","const requestFactory = require('../lib/requestwrapper');","const extend = require('extend');","const pick = require('object.pick');","const isStream = require('isstream');","const helper = require('../lib/helper');","const util = require('util');","const BaseService = require('../lib/base_service');","","/**"," *"," * @param {string} [params.url=https://gateway.watsonplatform.net/language-translation/api] The service URL."," * @param {string} params.username Username"," * @param {string} params.password Password"," * @constructor"," */","function LanguageTranslationV2(options) {","  BaseService.call(this, options);","}","util.inherits(LanguageTranslationV2, BaseService);","LanguageTranslationV2.prototype.name = 'language_translation';","LanguageTranslationV2.prototype.version = 'v2';","LanguageTranslationV2.URL = 'https://gateway.watsonplatform.net/language-translation/api';","","/**"," * Return the translation models"," */","","/**"," * Return the translation models"," * @param  {string}   params.default   Query filters to check if the model is"," *                            the default one used when only source"," *                            and target languages are specified."," * @param  {string}   params.source   Filter by source language"," * @param  {string}   params.target   Filter by target language"," */","LanguageTranslationV2.prototype.getModels = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      method: 'GET',","      url: '/v2/models',","      qs: pick(params, ['default', 'source', 'target']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Return the translation model"," * @param  {string}   params.model_id   The model identifier"," */","LanguageTranslationV2.prototype.getModel = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      method: 'GET',","      url: '/v2/models/{model_id}',","      path: pick(params, ['model_id']),","      json: true","    },","    requiredParams: ['model_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Creates a translation model"," * @param  {string}   params.base_model_id   The base model identifier"," * @param  {string}   params.name   The model name"," * @param  {stream}   params.forced_glossary   A UTF-8 encoded TMX file that contains pairs of matching terms in the source and target language that are seen as absolute by the system. This file completely overwrites the original domain data."," * @param  {stream}   params.parallel_corpus   A UTF-8 encoded TMX file that contains matching phrases in the source and target language that serve as examples for Watson. Parallel corpora differ from glossaries because they do not overwrite the original domain data."," * @param  {stream}   params.monolingual_corpus A UTF-8 encoded plain text file that contains a body of text in the target language that is related to what you are translating. A monolingual corpus helps improve literal translations to be more fluent and human."," */","","LanguageTranslationV2.prototype.createModel = function(params, callback) {","  params = params || {};","","  const missingParams = helper.getMissingParams(params, ['base_model_id']);","  if (missingParams) {","    callback(missingParams);","    return;","  }","","  const inputTypes = ['forced_glossary', 'parallel_corpus', 'monolingual_corpus'];","","  for (const type in inputTypes) {","    if (inputTypes.hasOwnProperty(type)) {","      if (params[inputTypes[type]] && !isStream(params[inputTypes[type]])) {","        callback(new Error(inputTypes[type] + ' is not a standard Node.js Stream'));","        return;","      }","    }","  }","","  const parameters = {","    options: {","      method: 'POST',","      url: '/v2/models',","      qs: pick(params, ['name', 'base_model_id']),","      formData: pick(params, inputTypes),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Deletes a model"," * @param  {string}   params.model_id   The model identifier"," */","LanguageTranslationV2.prototype.deleteModel = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      method: 'DELETE',","      url: '/v2/models/{model_id}',","      path: pick(params, ['model_id']),","      json: true","    },","    requiredParams: ['model_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Translate pharagraphs from one language into another"," * @param {string} params.source Source language"," * @param {string} params.target Target language"," */","LanguageTranslationV2.prototype.translate = function(params, callback) {","  params = params || {};","","  if (!(params.model_id || params.source && params.target)) {","    callback(new Error('Missing required parameters: model_id or source and target'));","    return;","  }","  const parameters = {","    options: {","      url: '/v2/translate',","      method: 'POST',","      json: true,","      body: pick(params, ['source', 'target', 'text', 'model_id'])","    },","    requiredParams: ['text'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Returns the identifiable languages"," */","LanguageTranslationV2.prototype.getIdentifiableLanguages = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v2/identifiable_languages',","      method: 'GET'","    },","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Identify the text based on the identifiable languages"," * @param  {string} params.text  text to identify"," */","LanguageTranslationV2.prototype.identify = function(params, callback) {","  if (!params || !params.text) {","    callback(new Error('Missing required parameters: text'));","    return;","  }","","  const parameters = {","    options: {","      url: '/v2/identify',","      method: 'POST',","      body: params.text","    },","    defaultOptions: extend(true, {}, this._options, {","      headers: {","        accept: 'application/json',","        'content-type': 'text/plain'","      }","    })","  };","","  return requestFactory(parameters, callback);","};","","module.exports = LanguageTranslationV2;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"34":1,"35":0,"37":1,"38":1,"39":1,"40":1,"54":1,"55":0,"57":0,"66":0,"73":1,"74":0,"76":0,"86":0,"98":1,"99":0,"101":0,"102":0,"103":0,"104":0,"107":0,"109":0,"110":0,"111":0,"112":0,"113":0,"118":0,"128":0,"135":1,"136":0,"138":0,"148":0,"156":1,"157":0,"159":0,"160":0,"161":0,"163":0,"174":0,"180":1,"181":0,"183":0,"191":0,"198":1,"199":0,"200":0,"201":0,"204":0,"218":0,"221":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/language-translator/v2.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/language-translator/v2.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":1,"14":1,"15":1,"16":1,"17":1,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"LanguageTranslatorV2","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":39}}},"2":{"name":"(anonymous_2)","line":71,"loc":{"start":{"line":71,"column":43},"end":{"line":71,"column":70}}},"3":{"name":"(anonymous_3)","line":90,"loc":{"start":{"line":90,"column":42},"end":{"line":90,"column":69}}},"4":{"name":"(anonymous_4)","line":115,"loc":{"start":{"line":115,"column":45},"end":{"line":115,"column":72}}},"5":{"name":"(anonymous_5)","line":152,"loc":{"start":{"line":152,"column":45},"end":{"line":152,"column":72}}},"6":{"name":"(anonymous_6)","line":173,"loc":{"start":{"line":173,"column":43},"end":{"line":173,"column":70}}},"7":{"name":"(anonymous_7)","line":197,"loc":{"start":{"line":197,"column":58},"end":{"line":197,"column":85}}},"8":{"name":"(anonymous_8)","line":215,"loc":{"start":{"line":215,"column":42},"end":{"line":215,"column":69}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":33}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":36}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":37}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":40}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":29}},"7":{"start":{"line":25,"column":0},"end":{"line":25,"column":51}},"8":{"start":{"line":34,"column":0},"end":{"line":54,"column":1}},"9":{"start":{"line":41,"column":2},"end":{"line":51,"column":3}},"10":{"start":{"line":42,"column":4},"end":{"line":48,"column":6}},"11":{"start":{"line":50,"column":4},"end":{"line":50,"column":22}},"12":{"start":{"line":53,"column":2},"end":{"line":53,"column":34}},"13":{"start":{"line":55,"column":0},"end":{"line":55,"column":49}},"14":{"start":{"line":56,"column":0},"end":{"line":56,"column":60}},"15":{"start":{"line":57,"column":0},"end":{"line":57,"column":46}},"16":{"start":{"line":58,"column":0},"end":{"line":58,"column":89}},"17":{"start":{"line":71,"column":0},"end":{"line":84,"column":2}},"18":{"start":{"line":72,"column":2},"end":{"line":72,"column":24}},"19":{"start":{"line":74,"column":2},"end":{"line":82,"column":4}},"20":{"start":{"line":83,"column":2},"end":{"line":83,"column":46}},"21":{"start":{"line":90,"column":0},"end":{"line":104,"column":2}},"22":{"start":{"line":91,"column":2},"end":{"line":91,"column":24}},"23":{"start":{"line":93,"column":2},"end":{"line":102,"column":4}},"24":{"start":{"line":103,"column":2},"end":{"line":103,"column":46}},"25":{"start":{"line":115,"column":0},"end":{"line":146,"column":2}},"26":{"start":{"line":116,"column":2},"end":{"line":116,"column":24}},"27":{"start":{"line":118,"column":2},"end":{"line":118,"column":75}},"28":{"start":{"line":119,"column":2},"end":{"line":122,"column":3}},"29":{"start":{"line":120,"column":4},"end":{"line":120,"column":28}},"30":{"start":{"line":121,"column":4},"end":{"line":121,"column":11}},"31":{"start":{"line":124,"column":2},"end":{"line":124,"column":82}},"32":{"start":{"line":126,"column":2},"end":{"line":133,"column":3}},"33":{"start":{"line":127,"column":4},"end":{"line":132,"column":5}},"34":{"start":{"line":128,"column":6},"end":{"line":131,"column":7}},"35":{"start":{"line":129,"column":8},"end":{"line":129,"column":84}},"36":{"start":{"line":130,"column":8},"end":{"line":130,"column":15}},"37":{"start":{"line":135,"column":2},"end":{"line":144,"column":4}},"38":{"start":{"line":145,"column":2},"end":{"line":145,"column":46}},"39":{"start":{"line":152,"column":0},"end":{"line":166,"column":2}},"40":{"start":{"line":153,"column":2},"end":{"line":153,"column":24}},"41":{"start":{"line":155,"column":2},"end":{"line":164,"column":4}},"42":{"start":{"line":165,"column":2},"end":{"line":165,"column":46}},"43":{"start":{"line":173,"column":0},"end":{"line":192,"column":2}},"44":{"start":{"line":174,"column":2},"end":{"line":174,"column":24}},"45":{"start":{"line":176,"column":2},"end":{"line":179,"column":3}},"46":{"start":{"line":177,"column":4},"end":{"line":177,"column":86}},"47":{"start":{"line":178,"column":4},"end":{"line":178,"column":11}},"48":{"start":{"line":180,"column":2},"end":{"line":189,"column":4}},"49":{"start":{"line":191,"column":2},"end":{"line":191,"column":46}},"50":{"start":{"line":197,"column":0},"end":{"line":209,"column":2}},"51":{"start":{"line":198,"column":2},"end":{"line":198,"column":24}},"52":{"start":{"line":200,"column":2},"end":{"line":206,"column":4}},"53":{"start":{"line":208,"column":2},"end":{"line":208,"column":46}},"54":{"start":{"line":215,"column":0},"end":{"line":236,"column":2}},"55":{"start":{"line":216,"column":2},"end":{"line":219,"column":3}},"56":{"start":{"line":217,"column":4},"end":{"line":217,"column":61}},"57":{"start":{"line":218,"column":4},"end":{"line":218,"column":11}},"58":{"start":{"line":221,"column":2},"end":{"line":233,"column":4}},"59":{"start":{"line":235,"column":2},"end":{"line":235,"column":46}},"60":{"start":{"line":238,"column":0},"end":{"line":238,"column":38}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":2},"end":{"line":41,"column":2}},{"start":{"line":41,"column":2},"end":{"line":41,"column":2}}]},"2":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":11},"end":{"line":72,"column":17}},{"start":{"line":72,"column":21},"end":{"line":72,"column":23}}]},"3":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":11},"end":{"line":91,"column":17}},{"start":{"line":91,"column":21},"end":{"line":91,"column":23}}]},"4":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":11},"end":{"line":116,"column":17}},{"start":{"line":116,"column":21},"end":{"line":116,"column":23}}]},"5":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":2},"end":{"line":119,"column":2}},{"start":{"line":119,"column":2},"end":{"line":119,"column":2}}]},"6":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":4},"end":{"line":127,"column":4}},{"start":{"line":127,"column":4},"end":{"line":127,"column":4}}]},"7":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":6},"end":{"line":128,"column":6}},{"start":{"line":128,"column":6},"end":{"line":128,"column":6}}]},"8":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":10},"end":{"line":128,"column":34}},{"start":{"line":128,"column":38},"end":{"line":128,"column":73}}]},"9":{"line":153,"type":"binary-expr","locations":[{"start":{"line":153,"column":11},"end":{"line":153,"column":17}},{"start":{"line":153,"column":21},"end":{"line":153,"column":23}}]},"10":{"line":174,"type":"binary-expr","locations":[{"start":{"line":174,"column":11},"end":{"line":174,"column":17}},{"start":{"line":174,"column":21},"end":{"line":174,"column":23}}]},"11":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":2},"end":{"line":176,"column":2}},{"start":{"line":176,"column":2},"end":{"line":176,"column":2}}]},"12":{"line":176,"type":"binary-expr","locations":[{"start":{"line":176,"column":8},"end":{"line":176,"column":23}},{"start":{"line":176,"column":27},"end":{"line":176,"column":40}},{"start":{"line":176,"column":44},"end":{"line":176,"column":57}}]},"13":{"line":198,"type":"binary-expr","locations":[{"start":{"line":198,"column":11},"end":{"line":198,"column":17}},{"start":{"line":198,"column":21},"end":{"line":198,"column":23}}]},"14":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":2},"end":{"line":216,"column":2}},{"start":{"line":216,"column":2},"end":{"line":216,"column":2}}]},"15":{"line":216,"type":"binary-expr","locations":[{"start":{"line":216,"column":6},"end":{"line":216,"column":13}},{"start":{"line":216,"column":17},"end":{"line":216,"column":29}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not"," * use this file except in compliance with the License. You may obtain a copy of"," * the License at"," *"," * http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT"," * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the"," * License for the specific language governing permissions and limitations under"," * the License."," */","","'use strict';","","const requestFactory = require('../lib/requestwrapper');","const extend = require('extend');","const pick = require('object.pick');","const isStream = require('isstream');","const helper = require('../lib/helper');","const util = require('util');","const BaseService = require('../lib/base_service');","","/**"," *"," * @param {string} [params.url=https://gateway.watsonplatform.net/language-translation/api] The service URL."," * @param {string} params.username Username"," * @param {string} params.password Password"," * @constructor"," */","function LanguageTranslatorV2(options) {","  // Welp, this is awkward. Originally the rename was *just* a rename, but then (after the SDK was updated,","  // but before the backend was updated), it was decided that the billing should be simplified at the same time.","  // That's a solid improvement, but it means that the SDK now needs to support both services independently,","  // and correcting the default URL here will break older code, so it must be reserved for a major release.","  // todo: consider checking for options.url === LanguageTranslationV2.URL and also throw this warning then.","  // (This probably does't matter since the api didn't change)","  if (!options.url) {","    const err = new Error(","      'LanguageTranslatorV2 currently defaults to the url for LanguageTranslationV2, ' +","        'but this will change in the next major release of the watson-developer-cloud Node.js SDK. ' +","        'Please either specify the url https://gateway.watsonplatform.net/language-translator/api or else use ' +","        'LanguageTranslationV2. ' +","        'See http://www.ibm.com/watson/developercloud/doc/language-translator/migrating.shtml for more details.'","    );","    // eslint-disable-next-line no-console","    console.warn(err);","  }","","  BaseService.call(this, options);","}","util.inherits(LanguageTranslatorV2, BaseService);","LanguageTranslatorV2.prototype.name = 'language_translator';","LanguageTranslatorV2.prototype.version = 'v2';","LanguageTranslatorV2.URL = 'https://gateway.watsonplatform.net/language-translation/api'; // This is incorrect and will change in v 3.0.0","/**"," * Return the translation models"," */","","/**"," * Return the translation models"," * @param  {string}   params.default   Query filters to check if the model is"," *                            the default one used when only source"," *                            and target languages are specified."," * @param  {string}   params.source   Filter by source language"," * @param  {string}   params.target   Filter by target language"," */","LanguageTranslatorV2.prototype.getModels = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      method: 'GET',","      url: '/v2/models',","      qs: pick(params, ['default', 'source', 'target']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Return the translation model"," * @param  {string}   params.model_id   The model identifier"," */","LanguageTranslatorV2.prototype.getModel = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      method: 'GET',","      url: '/v2/models/{model_id}',","      path: pick(params, ['model_id']),","      json: true","    },","    requiredParams: ['model_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Creates a translation model"," * @param  {string}   params.base_model_id   The base model identifier"," * @param  {string}   params.name   The model name"," * @param  {stream}   params.forced_glossary   A UTF-8 encoded TMX file that contains pairs of matching terms in the source and target language that are seen as absolute by the system. This file completely overwrites the original domain data."," * @param  {stream}   params.parallel_corpus   A UTF-8 encoded TMX file that contains matching phrases in the source and target language that serve as examples for Watson. Parallel corpora differ from glossaries because they do not overwrite the original domain data."," * @param  {stream}   params.monolingual_corpus A UTF-8 encoded plain text file that contains a body of text in the target language that is related to what you are translating. A monolingual corpus helps improve literal translations to be more fluent and human."," */","","LanguageTranslatorV2.prototype.createModel = function(params, callback) {","  params = params || {};","","  const missingParams = helper.getMissingParams(params, ['base_model_id']);","  if (missingParams) {","    callback(missingParams);","    return;","  }","","  const inputTypes = ['forced_glossary', 'parallel_corpus', 'monolingual_corpus'];","","  for (const type in inputTypes) {","    if (inputTypes.hasOwnProperty(type)) {","      if (params[inputTypes[type]] && !isStream(params[inputTypes[type]])) {","        callback(new Error(inputTypes[type] + ' is not a standard Node.js Stream'));","        return;","      }","    }","  }","","  const parameters = {","    options: {","      method: 'POST',","      url: '/v2/models',","      qs: pick(params, ['name', 'base_model_id']),","      formData: pick(params, inputTypes),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Deletes a model"," * @param  {string}   params.model_id   The model identifier"," */","LanguageTranslatorV2.prototype.deleteModel = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      method: 'DELETE',","      url: '/v2/models/{model_id}',","      path: pick(params, ['model_id']),","      json: true","    },","    requiredParams: ['model_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Translate pharagraphs from one language into another"," * @param {string} params.source Source language"," * @param {string} params.target Target language"," */","LanguageTranslatorV2.prototype.translate = function(params, callback) {","  params = params || {};","","  if (!(params.model_id || params.source && params.target)) {","    callback(new Error('Missing required parameters: model_id or source and target'));","    return;","  }","  const parameters = {","    options: {","      url: '/v2/translate',","      method: 'POST',","      json: true,","      body: pick(params, ['source', 'target', 'text', 'model_id'])","    },","    requiredParams: ['text'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Returns the identifiable languages"," */","LanguageTranslatorV2.prototype.getIdentifiableLanguages = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v2/identifiable_languages',","      method: 'GET'","    },","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Identify the text based on the identifiable languages"," * @param  {string} params.text  text to identify"," */","LanguageTranslatorV2.prototype.identify = function(params, callback) {","  if (!params || !params.text) {","    callback(new Error('Missing required parameters: text'));","    return;","  }","","  const parameters = {","    options: {","      url: '/v2/identify',","      method: 'POST',","      body: params.text","    },","    defaultOptions: extend(true, {}, this._options, {","      headers: {","        accept: 'application/json',","        'content-type': 'text/plain'","      }","    })","  };","","  return requestFactory(parameters, callback);","};","","module.exports = LanguageTranslatorV2;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"34":1,"41":0,"42":0,"50":0,"53":0,"55":1,"56":1,"57":1,"58":1,"71":1,"72":0,"74":0,"83":0,"90":1,"91":0,"93":0,"103":0,"115":1,"116":0,"118":0,"119":0,"120":0,"121":0,"124":0,"126":0,"127":0,"128":0,"129":0,"130":0,"135":0,"145":0,"152":1,"153":0,"155":0,"165":0,"173":1,"174":0,"176":0,"177":0,"178":0,"180":0,"191":0,"197":1,"198":0,"200":0,"208":0,"215":1,"216":0,"217":0,"218":0,"221":0,"235":0,"238":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/natural-language-classifier/v1.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/natural-language-classifier/v1.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":1,"12":1,"13":1,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":1,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"NaturalLanguageClassifierV1","line":32,"loc":{"start":{"line":32,"column":0},"end":{"line":32,"column":46}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":47},"end":{"line":43,"column":74}}},"3":{"name":"(anonymous_3)","line":57,"loc":{"start":{"line":57,"column":30},"end":{"line":57,"column":49}}},"4":{"name":"(anonymous_4)","line":86,"loc":{"start":{"line":86,"column":49},"end":{"line":86,"column":76}}},"5":{"name":"(anonymous_5)","line":112,"loc":{"start":{"line":112,"column":47},"end":{"line":112,"column":74}}},"6":{"name":"(anonymous_6)","line":137,"loc":{"start":{"line":137,"column":45},"end":{"line":137,"column":72}}},"7":{"name":"(anonymous_7)","line":153,"loc":{"start":{"line":153,"column":47},"end":{"line":153,"column":74}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":36}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":36}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":37}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":48}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":29}},"7":{"start":{"line":25,"column":0},"end":{"line":25,"column":51}},"8":{"start":{"line":32,"column":0},"end":{"line":34,"column":1}},"9":{"start":{"line":33,"column":2},"end":{"line":33,"column":34}},"10":{"start":{"line":35,"column":0},"end":{"line":35,"column":56}},"11":{"start":{"line":36,"column":0},"end":{"line":36,"column":75}},"12":{"start":{"line":37,"column":0},"end":{"line":37,"column":53}},"13":{"start":{"line":38,"column":0},"end":{"line":38,"column":103}},"14":{"start":{"line":43,"column":0},"end":{"line":81,"column":2}},"15":{"start":{"line":44,"column":2},"end":{"line":44,"column":24}},"16":{"start":{"line":46,"column":2},"end":{"line":49,"column":3}},"17":{"start":{"line":47,"column":4},"end":{"line":47,"column":70}},"18":{"start":{"line":48,"column":4},"end":{"line":48,"column":11}},"19":{"start":{"line":50,"column":2},"end":{"line":53,"column":3}},"20":{"start":{"line":51,"column":4},"end":{"line":51,"column":79}},"21":{"start":{"line":52,"column":4},"end":{"line":52,"column":11}},"22":{"start":{"line":55,"column":2},"end":{"line":55,"column":20}},"23":{"start":{"line":57,"column":2},"end":{"line":80,"column":5}},"24":{"start":{"line":58,"column":4},"end":{"line":61,"column":5}},"25":{"start":{"line":59,"column":6},"end":{"line":59,"column":20}},"26":{"start":{"line":60,"column":6},"end":{"line":60,"column":13}},"27":{"start":{"line":63,"column":4},"end":{"line":78,"column":6}},"28":{"start":{"line":79,"column":4},"end":{"line":79,"column":48}},"29":{"start":{"line":86,"column":0},"end":{"line":107,"column":2}},"30":{"start":{"line":87,"column":2},"end":{"line":87,"column":24}},"31":{"start":{"line":90,"column":2},"end":{"line":92,"column":3}},"32":{"start":{"line":91,"column":4},"end":{"line":91,"column":45}},"33":{"start":{"line":94,"column":2},"end":{"line":104,"column":4}},"34":{"start":{"line":106,"column":2},"end":{"line":106,"column":46}},"35":{"start":{"line":112,"column":0},"end":{"line":132,"column":2}},"36":{"start":{"line":113,"column":2},"end":{"line":113,"column":24}},"37":{"start":{"line":116,"column":2},"end":{"line":118,"column":3}},"38":{"start":{"line":117,"column":4},"end":{"line":117,"column":45}},"39":{"start":{"line":120,"column":2},"end":{"line":129,"column":4}},"40":{"start":{"line":131,"column":2},"end":{"line":131,"column":46}},"41":{"start":{"line":137,"column":0},"end":{"line":148,"column":2}},"42":{"start":{"line":138,"column":2},"end":{"line":145,"column":4}},"43":{"start":{"line":147,"column":2},"end":{"line":147,"column":46}},"44":{"start":{"line":153,"column":0},"end":{"line":173,"column":2}},"45":{"start":{"line":154,"column":2},"end":{"line":154,"column":24}},"46":{"start":{"line":157,"column":2},"end":{"line":159,"column":3}},"47":{"start":{"line":158,"column":4},"end":{"line":158,"column":45}},"48":{"start":{"line":161,"column":2},"end":{"line":170,"column":4}},"49":{"start":{"line":172,"column":2},"end":{"line":172,"column":46}},"50":{"start":{"line":175,"column":0},"end":{"line":175,"column":45}}},"branchMap":{"1":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":11},"end":{"line":44,"column":17}},{"start":{"line":44,"column":21},"end":{"line":44,"column":23}}]},"2":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":2},"end":{"line":46,"column":2}},{"start":{"line":46,"column":2},"end":{"line":46,"column":2}}]},"3":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":6},"end":{"line":46,"column":13}},{"start":{"line":46,"column":17},"end":{"line":46,"column":38}}]},"4":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":2},"end":{"line":50,"column":2}},{"start":{"line":50,"column":2},"end":{"line":50,"column":2}}]},"5":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":43}},{"start":{"line":50,"column":47},"end":{"line":50,"column":87}},{"start":{"line":50,"column":91},"end":{"line":50,"column":121}}]},"6":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":58,"column":4}},{"start":{"line":58,"column":4},"end":{"line":58,"column":4}}]},"7":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":11},"end":{"line":87,"column":17}},{"start":{"line":87,"column":21},"end":{"line":87,"column":23}}]},"8":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":2},"end":{"line":90,"column":2}},{"start":{"line":90,"column":2},"end":{"line":90,"column":2}}]},"9":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":11},"end":{"line":113,"column":17}},{"start":{"line":113,"column":21},"end":{"line":113,"column":23}}]},"10":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":2},"end":{"line":116,"column":2}},{"start":{"line":116,"column":2},"end":{"line":116,"column":2}}]},"11":{"line":154,"type":"binary-expr","locations":[{"start":{"line":154,"column":11},"end":{"line":154,"column":17}},{"start":{"line":154,"column":21},"end":{"line":154,"column":23}}]},"12":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":2},"end":{"line":157,"column":2}},{"start":{"line":157,"column":2},"end":{"line":157,"column":2}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not"," * use this file except in compliance with the License. You may obtain a copy of"," * the License at"," *"," * http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT"," * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the"," * License for the specific language governing permissions and limitations under"," * the License."," */","","'use strict';","","const requestFactory = require('../lib/requestwrapper');","const pick = require('object.pick');","const omit = require('object.omit');","const isStream = require('isstream');","const toCSV = require('./json-training-to-csv');","const util = require('util');","const BaseService = require('../lib/base_service');","","/**"," *"," * @param {Object} options"," * @constructor"," */","function NaturalLanguageClassifierV1(options) {","  BaseService.call(this, options);","}","util.inherits(NaturalLanguageClassifierV1, BaseService);","NaturalLanguageClassifierV1.prototype.name = 'natural_language_classifier';","NaturalLanguageClassifierV1.prototype.version = 'v1';","NaturalLanguageClassifierV1.URL = 'https://gateway.watsonplatform.net/natural-language-classifier/api';","","/**"," * Creates a classifier"," */","NaturalLanguageClassifierV1.prototype.create = function(params, callback) {","  params = params || {};","","  if (!params || !params.training_data) {","    callback(new Error('Missing required parameters: training_data'));","    return;","  }","  if (!(Array.isArray(params.training_data) || typeof params.training_data === 'string' || isStream(params.training_data))) {","    callback(new Error('training_data needs to be a String, Array or Stream'));","    return;","  }","","  const self = this;","","  toCSV(params.training_data, function(err, csv) {","    if (err) {","      callback(err);","      return;","    }","","    const parameters = {","      options: {","        url: '/v1/classifiers',","        method: 'POST',","        json: true,","        formData: {","          training_data: csv,","          training_metadata: JSON.stringify(omit(params, ['training_data']))","        },","        // hack to check required parameters.","        // We don't actually need path parameters","        path: pick(params, ['language'])","      },","      requiredParams: ['language'],","      defaultOptions: self._options","    };","    return requestFactory(parameters, callback);","  });","};","","/**"," * Returns the classification information for a classifier on a phrase"," */","NaturalLanguageClassifierV1.prototype.classify = function(params, callback) {","  params = params || {};","","  // #84: use classifier_id not classifier.","  if (!params.classifier_id) {","    params.classifier_id = params.classifier;","  }","","  const parameters = {","    options: {","      url: '/v1/classifiers/{classifier_id}/classify',","      method: 'POST',","      json: true,","      path: pick(params, ['classifier_id']),","      body: pick(params, ['text'])","    },","    requiredParams: ['classifier_id', 'text'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Returns the training status of the classifier"," */","NaturalLanguageClassifierV1.prototype.status = function(params, callback) {","  params = params || {};","","  // #84: use classifier_id not classifier.","  if (!params.classifier_id) {","    params.classifier_id = params.classifier;","  }","","  const parameters = {","    options: {","      url: '/v1/classifiers/{classifier_id}',","      method: 'GET',","      json: true,","      path: params","    },","    requiredParams: ['classifier_id'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Retrieves the list of classifiers for the user"," */","NaturalLanguageClassifierV1.prototype.list = function(params, callback) {","  const parameters = {","    options: {","      url: '/v1/classifiers',","      method: 'GET',","      json: true","    },","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Deletes a classifier"," */","NaturalLanguageClassifierV1.prototype.remove = function(params, callback) {","  params = params || {};","","  // #84: use classifier_id not classifier.","  if (!params.classifier_id) {","    params.classifier_id = params.classifier;","  }","","  const parameters = {","    options: {","      url: '/v1/classifiers/{classifier_id}',","      method: 'DELETE',","      path: params,","      json: true","    },","    requiredParams: ['classifier_id'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","module.exports = NaturalLanguageClassifierV1;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"32":1,"33":0,"35":1,"36":1,"37":1,"38":1,"43":1,"44":0,"46":0,"47":0,"48":0,"50":0,"51":0,"52":0,"55":0,"57":0,"58":0,"59":0,"60":0,"63":0,"79":0,"86":1,"87":0,"90":0,"91":0,"94":0,"106":0,"112":1,"113":0,"116":0,"117":0,"120":0,"131":0,"137":1,"138":0,"147":0,"153":1,"154":0,"157":0,"158":0,"161":0,"172":0,"175":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/natural-language-classifier/json-training-to-csv.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/natural-language-classifier/json-training-to-csv.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"toCSVArray","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":26}}},"2":{"name":"toCSV","line":39,"loc":{"start":{"line":39,"column":17},"end":{"line":39,"column":46}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":43}},"2":{"start":{"line":26,"column":0},"end":{"line":32,"column":1}},"3":{"start":{"line":27,"column":2},"end":{"line":31,"column":3}},"4":{"start":{"line":28,"column":4},"end":{"line":28,"column":44}},"5":{"start":{"line":30,"column":4},"end":{"line":30,"column":140}},"6":{"start":{"line":39,"column":0},"end":{"line":49,"column":2}},"7":{"start":{"line":40,"column":2},"end":{"line":48,"column":3}},"8":{"start":{"line":41,"column":4},"end":{"line":45,"column":5}},"9":{"start":{"line":42,"column":6},"end":{"line":42,"column":46}},"10":{"start":{"line":44,"column":6},"end":{"line":44,"column":12}},"11":{"start":{"line":47,"column":4},"end":{"line":47,"column":23}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":2},"end":{"line":27,"column":2}},{"start":{"line":27,"column":2},"end":{"line":27,"column":2}}]},"2":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":6},"end":{"line":27,"column":15}},{"start":{"line":27,"column":19},"end":{"line":27,"column":31}},{"start":{"line":27,"column":35},"end":{"line":27,"column":58}}]},"3":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":2},"end":{"line":40,"column":2}},{"start":{"line":40,"column":2},"end":{"line":40,"column":2}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not"," * use this file except in compliance with the License. You may obtain a copy of"," * the License at"," *"," * http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT"," * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the"," * License for the specific language governing permissions and limitations under"," * the License."," */","","'use strict';","","const stringify = require('csv-stringify');","","/**"," * @private"," * @param {Object} data"," * @return {Array.<String>}"," */","function toCSVArray(data) {","  if (data.text && data.classes && data.classes.length > 0) {","    return [data.text].concat(data.classes);","  } else {","    throw Error('Invalid training_data format, it needs to be: ' + '[{ text: \"my-text\", classes:[\"my-class1\", \"my-class2\",...]}, {}, ...]');","  }","}","","/**"," * IF traning is json, convert it to csv."," * @param  {Object[]} jsonData the training_data as a json array"," * @param  {Function} cb the error first callback"," */","module.exports = function toCSV(training, cb) {","  if (Array.isArray(training)) {","    try {","      stringify(training.map(toCSVArray), cb);","    } catch (e) {","      cb(e);","    }","  } else {","    cb(null, training);","  }","};",""],"l":{"19":1,"26":1,"27":0,"28":0,"30":0,"39":1,"40":0,"41":0,"42":0,"44":0,"47":0}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/natural-language-understanding/v1.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/natural-language-understanding/v1.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":0,"18":1,"19":0,"20":0,"21":1,"22":0,"23":0,"24":1,"25":0,"26":0,"27":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"NaturalLanguageUnderstandingV1","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":49}}},"2":{"name":"(anonymous_2)","line":54,"loc":{"start":{"line":54,"column":69},"end":{"line":54,"column":84}}},"3":{"name":"(anonymous_3)","line":95,"loc":{"start":{"line":95,"column":51},"end":{"line":95,"column":78}}},"4":{"name":"(anonymous_4)","line":119,"loc":{"start":{"line":119,"column":54},"end":{"line":119,"column":81}}},"5":{"name":"(anonymous_5)","line":146,"loc":{"start":{"line":146,"column":55},"end":{"line":146,"column":82}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":29}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":51}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":33}},"5":{"start":{"line":29,"column":0},"end":{"line":35,"column":1}},"6":{"start":{"line":30,"column":2},"end":{"line":30,"column":34}},"7":{"start":{"line":31,"column":2},"end":{"line":33,"column":3}},"8":{"start":{"line":32,"column":4},"end":{"line":32,"column":130}},"9":{"start":{"line":34,"column":2},"end":{"line":34,"column":56}},"10":{"start":{"line":36,"column":0},"end":{"line":36,"column":59}},"11":{"start":{"line":37,"column":0},"end":{"line":37,"column":81}},"12":{"start":{"line":38,"column":0},"end":{"line":38,"column":56}},"13":{"start":{"line":39,"column":0},"end":{"line":39,"column":109}},"14":{"start":{"line":40,"column":0},"end":{"line":40,"column":70}},"15":{"start":{"line":43,"column":0},"end":{"line":43,"column":70}},"16":{"start":{"line":54,"column":0},"end":{"line":60,"column":2}},"17":{"start":{"line":55,"column":2},"end":{"line":59,"column":4}},"18":{"start":{"line":95,"column":0},"end":{"line":106,"column":2}},"19":{"start":{"line":96,"column":2},"end":{"line":104,"column":4}},"20":{"start":{"line":105,"column":2},"end":{"line":105,"column":46}},"21":{"start":{"line":119,"column":0},"end":{"line":129,"column":2}},"22":{"start":{"line":120,"column":2},"end":{"line":127,"column":4}},"23":{"start":{"line":128,"column":2},"end":{"line":128,"column":46}},"24":{"start":{"line":146,"column":0},"end":{"line":158,"column":2}},"25":{"start":{"line":147,"column":2},"end":{"line":156,"column":4}},"26":{"start":{"line":157,"column":2},"end":{"line":157,"column":46}},"27":{"start":{"line":160,"column":0},"end":{"line":160,"column":48}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":2},"end":{"line":31,"column":2}},{"start":{"line":31,"column":2},"end":{"line":31,"column":2}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not"," * use this file except in compliance with the License. You may obtain a copy of"," * the License at"," *"," * http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT"," * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the"," * License for the specific language governing permissions and limitations under"," * the License."," */","","'use strict';","","const requestFactory = require('../lib/requestwrapper');","const util = require('util');","const BaseService = require('../lib/base_service');","const extend = require('extend');","","/**"," * NaturalLanguageUnderstanding"," * @param {Object} options"," * @constructor"," */","function NaturalLanguageUnderstandingV1(options) {","  BaseService.call(this, options);","  if (typeof this._options.version_date === 'undefined') {","    throw new Error('Argument error: version_date was not specified, use NaturalLanguageUnderstandingV1.VERSION_DATE_2017_02_27');","  }","  this._options.qs.version = this._options.version_date;","}","util.inherits(NaturalLanguageUnderstandingV1, BaseService);","NaturalLanguageUnderstandingV1.prototype.name = 'natural_language_understanding';","NaturalLanguageUnderstandingV1.prototype.version = 'v1';","NaturalLanguageUnderstandingV1.URL = 'https://gateway.watsonplatform.net/natural-language-understanding/api';","NaturalLanguageUnderstandingV1.VERSION_DATE_2016_01_23 = '2016-01-23';","// GA version date: 2017-02-27","// https://www.ibm.com/watson/developercloud/doc/natural-language-understanding/release-notes.html","NaturalLanguageUnderstandingV1.VERSION_DATE_2017_02_27 = '2017-02-27';","","/**"," * Bluemix uses hyphens instead of underscores for NLU in the VCAP_SERVICES env property."," * No idea why."," *"," * This method also checks for the underscore'd version just in case they ever change it."," *"," * @private"," * @override"," */","NaturalLanguageUnderstandingV1.prototype.getCredentialsFromBluemix = function(name) {","  return extend(","    {},","    BaseService.prototype.getCredentialsFromBluemix.call(this, name),","    BaseService.prototype.getCredentialsFromBluemix.call(this, name.replace(/_/g, '-'))","  );","};","","/**","  * Analyze the query.","  * @params {object} params for the query","  * @param {object} [params.headers] - The headers added","  * @param {string} [params.text] - The text to analyze.","  * @param {string} [params.html] - The html to analyze.","  * @param {string} [params.url] - The url to fetch and analyze.","  * @param {object} [params.features] - The features to retrieve (need at least one)","  * @param {object} [params.features.categories] - categories feature","  * @param {object} [params.features.concepts] - concepts feature","  * @param {object} [params.features.emotion] - emotion feature","  * @param {object} [params.features.entities] - entities feature","  * @param {object} [params.features.keywords] - keywords feature","  * @param {object} [params.features.metadata] - metadata feature","  * @param {object} [params.features.relations] - relations feature","  * @param {object} [params.features.semantic_roles] - semantic roles feature","  * @param {object} [params.features.sentiment] - sentiment feature","  * @params {function} callback taking (error,  jsonResult)","  * @example","  * ```","  * const options = {","  *   'text': 'Natural Language Understanding analyzes unstructured text to return structured insights',","  *   'features': {","  *     'concepts': {","  *       'limit': 3","  *     },","  *     'emotion': {},","  *   },","  * };","  * nlu.analyze(options, myCallbackFunction);","  * ```","  * @return {void}","  */","NaturalLanguageUnderstandingV1.prototype.analyze = function(params, callback) {","  const parameters = {","    options: {","      url: '/v1/analyze',","      method: 'POST',","      json: true,","      body: params","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**","  * List custom models deployed to your service instance.","  * @params {object} params for the query","  * @param {object} [params.headers] - The headers added","  * @params {function} callback taking (error,  jsonResult)","  * @example","  * ```","  * nlu.listModels({}, myCallbackFunction);","  * ```","  * @return {void}","  */","NaturalLanguageUnderstandingV1.prototype.listModels = function(params, callback) {","  const parameters = {","    options: {","      url: '/v1/models',","      method: 'GET',","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**","  * Delete a custom model that is deployed to your service instance.","  * @params {object} params for the query","  * @param {object} [params.headers] - The headers added","  * @param {string} [params.model_id] - ID of the custom model to delete","  * @params {function} callback taking (error,  jsonResult)","  * @example","  * ```","  * const options = {","  *   'model_id': 'myModel123'","  * };","  * nlu.deleteModel(options, myCallbackFunction);","  * ```","  * @return {void}","  */","NaturalLanguageUnderstandingV1.prototype.deleteModel = function(params, callback) {","  const parameters = {","    options: {","      method: 'DELETE',","      url: '/v1/models/{model_id}',","      path: params,","      json: true","    },","    requiredParams: ['model_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","module.exports = NaturalLanguageUnderstandingV1;",""],"l":{"19":1,"20":1,"21":1,"22":1,"29":1,"30":0,"31":0,"32":0,"34":0,"36":1,"37":1,"38":1,"39":1,"40":1,"43":1,"54":1,"55":0,"95":1,"96":0,"105":0,"119":1,"120":0,"128":0,"146":1,"147":0,"157":0,"160":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/personality-insights/v2.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/personality-insights/v2.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"PersonalityInsightsV2","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":40}}},"2":{"name":"(anonymous_2)","line":49,"loc":{"start":{"line":49,"column":42},"end":{"line":52,"column":2}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":36}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":40}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":29}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":51}},"6":{"start":{"line":30,"column":0},"end":{"line":32,"column":1}},"7":{"start":{"line":31,"column":2},"end":{"line":31,"column":34}},"8":{"start":{"line":33,"column":0},"end":{"line":33,"column":50}},"9":{"start":{"line":34,"column":0},"end":{"line":34,"column":62}},"10":{"start":{"line":35,"column":0},"end":{"line":35,"column":47}},"11":{"start":{"line":36,"column":0},"end":{"line":36,"column":90}},"12":{"start":{"line":49,"column":0},"end":{"line":104,"column":2}},"13":{"start":{"line":53,"column":2},"end":{"line":53,"column":24}},"14":{"start":{"line":56,"column":2},"end":{"line":58,"column":3}},"15":{"start":{"line":57,"column":4},"end":{"line":57,"column":47}},"16":{"start":{"line":60,"column":2},"end":{"line":63,"column":3}},"17":{"start":{"line":61,"column":4},"end":{"line":61,"column":78}},"18":{"start":{"line":62,"column":4},"end":{"line":62,"column":11}},"19":{"start":{"line":66,"column":2},"end":{"line":66,"column":26}},"20":{"start":{"line":67,"column":2},"end":{"line":71,"column":3}},"21":{"start":{"line":68,"column":4},"end":{"line":68,"column":75}},"22":{"start":{"line":70,"column":4},"end":{"line":70,"column":38}},"23":{"start":{"line":73,"column":2},"end":{"line":76,"column":4}},"24":{"start":{"line":80,"column":2},"end":{"line":82,"column":3}},"25":{"start":{"line":81,"column":4},"end":{"line":81,"column":58}},"26":{"start":{"line":84,"column":2},"end":{"line":94,"column":4}},"27":{"start":{"line":96,"column":2},"end":{"line":101,"column":3}},"28":{"start":{"line":97,"column":4},"end":{"line":97,"column":51}},"29":{"start":{"line":98,"column":4},"end":{"line":100,"column":5}},"30":{"start":{"line":99,"column":6},"end":{"line":99,"column":45}},"31":{"start":{"line":103,"column":2},"end":{"line":103,"column":46}},"32":{"start":{"line":105,"column":0},"end":{"line":105,"column":39}}},"branchMap":{"1":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":11},"end":{"line":53,"column":17}},{"start":{"line":53,"column":21},"end":{"line":53,"column":23}}]},"2":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":2},"end":{"line":56,"column":2}},{"start":{"line":56,"column":2},"end":{"line":56,"column":2}}]},"3":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":2},"end":{"line":60,"column":2}},{"start":{"line":60,"column":2},"end":{"line":60,"column":2}}]},"4":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":6},"end":{"line":60,"column":18}},{"start":{"line":60,"column":22},"end":{"line":60,"column":42}}]},"5":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":2},"end":{"line":67,"column":2}},{"start":{"line":67,"column":2},"end":{"line":67,"column":2}}]},"6":{"line":68,"type":"cond-expr","locations":[{"start":{"line":68,"column":48},"end":{"line":68,"column":59}},{"start":{"line":68,"column":62},"end":{"line":68,"column":74}}]},"7":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":23},"end":{"line":75,"column":45}},{"start":{"line":75,"column":49},"end":{"line":75,"column":70}},{"start":{"line":75,"column":74},"end":{"line":75,"column":78}}]},"8":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":2},"end":{"line":80,"column":2}},{"start":{"line":80,"column":2},"end":{"line":80,"column":2}}]},"9":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":6},"end":{"line":80,"column":21}},{"start":{"line":80,"column":25},"end":{"line":80,"column":36}}]},"10":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":34},"end":{"line":81,"column":49}},{"start":{"line":81,"column":53},"end":{"line":81,"column":57}}]},"11":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":12},"end":{"line":88,"column":23}},{"start":{"line":88,"column":27},"end":{"line":88,"column":57}}]},"12":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":2},"end":{"line":96,"column":2}},{"start":{"line":96,"column":2},"end":{"line":96,"column":2}}]},"13":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":4},"end":{"line":98,"column":4}},{"start":{"line":98,"column":4},"end":{"line":98,"column":4}}]}},"code":["/**"," * Copyright 2014 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const requestFactory = require('../lib/requestwrapper');","const pick = require('object.pick');","const helper = require('../lib/helper');","const util = require('util');","const BaseService = require('../lib/base_service');","","/**"," *"," * @param {Object} options"," * @constructor"," */","function PersonalityInsightsV2(options) {","  BaseService.call(this, options);","}","util.inherits(PersonalityInsightsV2, BaseService);","PersonalityInsightsV2.prototype.name = 'personality_insights';","PersonalityInsightsV2.prototype.version = 'v2';","PersonalityInsightsV2.URL = 'https://gateway.watsonplatform.net/personality-insights/api';","","/**"," * @param params {Object} The parameters to call the service"," *   The accepted parameters are:"," *     - text: The text to analyze."," *     - contentItems: A JSON input (if 'text' not provided)."," *     - include_raw: include raw results"," *     - accept_language : The language expected for the output."," *     - language: The language of the input."," *"," * @param callback The callback."," */","PersonalityInsightsV2.prototype.profile = function(","  params,","  callback // eslint-disable-line complexity",") {","  params = params || {};","","  // support for the new snake_case","  if (params.content_items) {","    params.contentItems = params.content_items;","  }","","  if (!params.text && !params.contentItems) {","    callback(new Error('Missing required parameters: text or content_items'));","    return;","  }","","  // Content-Type","  let content_type = null;","  if (params.text) {","    content_type = helper.isHTML(params.text) ? 'text/html' : 'text/plain';","  } else {","    content_type = 'application/json';","  }","","  const headers = {","    'Content-type': content_type,","    'Accept-language': params.accept_language || params.acceptLanguage || 'en'","  };","","  // service bug: language in header overrides language in each JSON content item, so we can't set it on those requests","  // (also, content-language doesn't really make sense on JSON)","  if (params.language || params.text) {","    headers['Content-language'] = params.language || 'en';","  }","","  const parameters = {","    options: {","      method: 'POST',","      url: '/v2/profile',","      body: params.text || pick(params, ['contentItems']),","      json: true,","      qs: pick(params, ['include_raw']),","      headers: headers","    },","    defaultOptions: this._options","  };","","  if (params.csv) {","    parameters.options.headers.Accept = 'text/csv';","    if (params.csv_headers) {","      parameters.options.qs.headers = 'true';","    }","  }","","  return requestFactory(parameters, callback);","};","module.exports = PersonalityInsightsV2;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"30":1,"31":0,"33":1,"34":1,"35":1,"36":1,"49":1,"53":0,"56":0,"57":0,"60":0,"61":0,"62":0,"66":0,"67":0,"68":0,"70":0,"73":0,"80":0,"81":0,"84":0,"96":0,"97":0,"98":0,"99":0,"103":0,"105":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/personality-insights/v3.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/personality-insights/v3.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1,"14":1,"15":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"PersonalityInsightsV3","line":31,"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":40}}},"2":{"name":"(anonymous_2)","line":60,"loc":{"start":{"line":60,"column":42},"end":{"line":63,"column":2}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":36}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":33}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":40}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":29}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":51}},"7":{"start":{"line":31,"column":0},"end":{"line":39,"column":1}},"8":{"start":{"line":32,"column":2},"end":{"line":32,"column":34}},"9":{"start":{"line":35,"column":2},"end":{"line":37,"column":3}},"10":{"start":{"line":36,"column":4},"end":{"line":36,"column":86}},"11":{"start":{"line":38,"column":2},"end":{"line":38,"column":50}},"12":{"start":{"line":40,"column":0},"end":{"line":40,"column":50}},"13":{"start":{"line":41,"column":0},"end":{"line":41,"column":62}},"14":{"start":{"line":42,"column":0},"end":{"line":42,"column":47}},"15":{"start":{"line":43,"column":0},"end":{"line":43,"column":90}},"16":{"start":{"line":60,"column":0},"end":{"line":96,"column":2}},"17":{"start":{"line":64,"column":2},"end":{"line":64,"column":37}},"18":{"start":{"line":66,"column":2},"end":{"line":68,"column":3}},"19":{"start":{"line":67,"column":4},"end":{"line":67,"column":47}},"20":{"start":{"line":70,"column":2},"end":{"line":73,"column":3}},"21":{"start":{"line":71,"column":4},"end":{"line":71,"column":78}},"22":{"start":{"line":72,"column":4},"end":{"line":72,"column":11}},"23":{"start":{"line":76,"column":2},"end":{"line":76,"column":26}},"24":{"start":{"line":77,"column":2},"end":{"line":81,"column":3}},"25":{"start":{"line":78,"column":4},"end":{"line":78,"column":75}},"26":{"start":{"line":80,"column":4},"end":{"line":80,"column":38}},"27":{"start":{"line":83,"column":2},"end":{"line":93,"column":4}},"28":{"start":{"line":95,"column":2},"end":{"line":95,"column":46}},"29":{"start":{"line":97,"column":0},"end":{"line":97,"column":39}}},"branchMap":{"1":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":2},"end":{"line":35,"column":2}},{"start":{"line":35,"column":2},"end":{"line":35,"column":2}}]},"2":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":2},"end":{"line":66,"column":2}},{"start":{"line":66,"column":2},"end":{"line":66,"column":2}}]},"3":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":2},"end":{"line":70,"column":2}},{"start":{"line":70,"column":2},"end":{"line":70,"column":2}}]},"4":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":6},"end":{"line":70,"column":18}},{"start":{"line":70,"column":22},"end":{"line":70,"column":42}}]},"5":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":2},"end":{"line":77,"column":2}},{"start":{"line":77,"column":2},"end":{"line":77,"column":2}}]},"6":{"line":78,"type":"cond-expr","locations":[{"start":{"line":78,"column":48},"end":{"line":78,"column":59}},{"start":{"line":78,"column":62},"end":{"line":78,"column":74}}]},"7":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":12},"end":{"line":87,"column":23}},{"start":{"line":87,"column":27},"end":{"line":87,"column":57}}]}},"code":["/**"," * Copyright 2016 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const requestFactory = require('../lib/requestwrapper');","const pick = require('object.pick');","const extend = require('extend');","const helper = require('../lib/helper');","const util = require('util');","const BaseService = require('../lib/base_service');","","/**"," *"," * @param {Object} options"," * @constructor"," */","function PersonalityInsightsV3(options) {","  BaseService.call(this, options);","","  // Check if 'version_date' was provided","  if (typeof this._options.version_date === 'undefined') {","    throw new Error('Argument error: version_date was not specified, use 2016-10-19');","  }","  this._options.qs.version = options.version_date;","}","util.inherits(PersonalityInsightsV3, BaseService);","PersonalityInsightsV3.prototype.name = 'personality_insights';","PersonalityInsightsV3.prototype.version = 'v3';","PersonalityInsightsV3.URL = 'https://gateway.watsonplatform.net/personality-insights/api';","","/**"," * @param {Object} params The parameters to call the service"," * @param {Object} [params.headers] - The header parameters."," * @param {string} [params.headers.accept-language=en] - The desired language of the response."," * @param {string} [params.headers.content-type=text/plain] - The content type of the request: text/plain (the default), text/html, or application/json."," * @param {string} [params.headers.content-language=en] - The language of the input text for the request: ar (Arabic), en (English), es (Spanish), or ja (Japanese)"," * @param {string} [params.headers.accept=application/json] - The desired content type of the response: application/json (the default) or text/csv"," * @param {string} [params.text] - The text to analyze."," * @param {Object} [params.content_items] - A JSON input (if 'text' not provided)."," * @param {boolean} [params.raw_scores=false] - include raw results."," * @param {boolean} [params.csv_headers=false] - If true, column labels are returned with a CSV response; if false (the default), they are not. Applies only when the Accept header is set to text/csv."," * @param {boolean} [params.consumption_preferences=false] - If true, information about consumption preferences is returned with the results."," *"," * @param callback The callback."," */","PersonalityInsightsV3.prototype.profile = function(","  _params,","  callback // eslint-disable-line complexity",") {","  const params = extend({}, _params);","","  if (params.content_items) {","    params.contentItems = params.content_items;","  }","","  if (!params.text && !params.contentItems) {","    callback(new Error('Missing required parameters: text or content_items'));","    return;","  }","","  // Content-Type","  let content_type = null;","  if (params.text) {","    content_type = helper.isHTML(params.text) ? 'text/html' : 'text/plain';","  } else {","    content_type = 'application/json';","  }","","  const parameters = {","    options: {","      method: 'POST',","      url: '/v3/profile',","      body: params.text || pick(params, ['contentItems']),","      json: true,","      qs: pick(params, ['csv_headers', 'raw_scores', 'consumption_preferences']),","      headers: extend({ 'content-type': content_type, 'accept-language': 'en' }, params.headers)","    },","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","module.exports = PersonalityInsightsV3;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"31":1,"32":0,"35":0,"36":0,"38":0,"40":1,"41":1,"42":1,"43":1,"60":1,"64":0,"66":0,"67":0,"70":0,"71":0,"72":0,"76":0,"77":0,"78":0,"80":0,"83":0,"95":0,"97":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/retrieve-and-rank/v1.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/retrieve-and-rank/v1.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":1,"14":1,"15":1,"16":1,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":1,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":1,"56":0,"57":0,"58":0,"59":1,"60":0,"61":0,"62":0,"63":1,"64":0,"65":0,"66":0,"67":1,"68":0,"69":0,"70":0,"71":1,"72":0,"73":0,"74":0,"75":1,"76":0,"77":0,"78":0,"79":1,"80":0,"81":0,"82":0,"83":1,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":1,"99":0,"100":0,"101":0,"102":1,"103":0,"104":0,"105":0,"106":1,"107":0,"108":0,"109":0,"110":1,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":1,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":1,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"fnMap":{"1":{"name":"RetrieveAndRankV1","line":35,"loc":{"start":{"line":35,"column":0},"end":{"line":35,"column":36}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":43},"end":{"line":46,"column":70}}},"3":{"name":"(anonymous_3)","line":81,"loc":{"start":{"line":81,"column":35},"end":{"line":81,"column":62}}},"4":{"name":"(anonymous_4)","line":114,"loc":{"start":{"line":114,"column":43},"end":{"line":114,"column":70}}},"5":{"name":"(anonymous_5)","line":134,"loc":{"start":{"line":134,"column":42},"end":{"line":134,"column":69}}},"6":{"name":"(anonymous_6)","line":150,"loc":{"start":{"line":150,"column":43},"end":{"line":150,"column":70}}},"7":{"name":"(anonymous_7)","line":177,"loc":{"start":{"line":177,"column":43},"end":{"line":177,"column":70}}},"8":{"name":"(anonymous_8)","line":202,"loc":{"start":{"line":202,"column":44},"end":{"line":202,"column":71}}},"9":{"name":"(anonymous_9)","line":227,"loc":{"start":{"line":227,"column":42},"end":{"line":227,"column":69}}},"10":{"name":"(anonymous_10)","line":254,"loc":{"start":{"line":254,"column":44},"end":{"line":254,"column":71}}},"11":{"name":"(anonymous_11)","line":281,"loc":{"start":{"line":281,"column":46},"end":{"line":281,"column":73}}},"12":{"name":"(anonymous_12)","line":307,"loc":{"start":{"line":307,"column":44},"end":{"line":307,"column":71}}},"13":{"name":"(anonymous_13)","line":333,"loc":{"start":{"line":333,"column":46},"end":{"line":333,"column":73}}},"14":{"name":"(anonymous_14)","line":361,"loc":{"start":{"line":361,"column":42},"end":{"line":361,"column":69}}},"15":{"name":"(anonymous_15)","line":389,"loc":{"start":{"line":389,"column":43},"end":{"line":389,"column":70}}},"16":{"name":"(anonymous_16)","line":417,"loc":{"start":{"line":417,"column":20},"end":{"line":417,"column":39}}},"17":{"name":"(anonymous_17)","line":434,"loc":{"start":{"line":434,"column":40},"end":{"line":434,"column":67}}},"18":{"name":"(anonymous_18)","line":464,"loc":{"start":{"line":464,"column":43},"end":{"line":464,"column":70}}},"19":{"name":"(anonymous_19)","line":494,"loc":{"start":{"line":494,"column":46},"end":{"line":494,"column":73}}},"20":{"name":"(anonymous_20)","line":527,"loc":{"start":{"line":527,"column":47},"end":{"line":527,"column":74}}},"21":{"name":"(anonymous_21)","line":569,"loc":{"start":{"line":569,"column":47},"end":{"line":569,"column":74}}},"22":{"name":"(anonymous_22)","line":607,"loc":{"start":{"line":607,"column":47},"end":{"line":607,"column":64}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":25}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":27}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":56}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":36}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":40}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":36}},"7":{"start":{"line":25,"column":0},"end":{"line":25,"column":36}},"8":{"start":{"line":26,"column":0},"end":{"line":26,"column":37}},"9":{"start":{"line":27,"column":0},"end":{"line":27,"column":29}},"10":{"start":{"line":28,"column":0},"end":{"line":28,"column":51}},"11":{"start":{"line":35,"column":0},"end":{"line":37,"column":1}},"12":{"start":{"line":36,"column":2},"end":{"line":36,"column":34}},"13":{"start":{"line":38,"column":0},"end":{"line":38,"column":46}},"14":{"start":{"line":39,"column":0},"end":{"line":39,"column":55}},"15":{"start":{"line":40,"column":0},"end":{"line":40,"column":43}},"16":{"start":{"line":41,"column":0},"end":{"line":41,"column":83}},"17":{"start":{"line":46,"column":0},"end":{"line":71,"column":2}},"18":{"start":{"line":47,"column":2},"end":{"line":47,"column":24}},"19":{"start":{"line":49,"column":2},"end":{"line":52,"column":3}},"20":{"start":{"line":50,"column":4},"end":{"line":50,"column":70}},"21":{"start":{"line":51,"column":4},"end":{"line":51,"column":11}},"22":{"start":{"line":53,"column":2},"end":{"line":56,"column":3}},"23":{"start":{"line":54,"column":4},"end":{"line":54,"column":72}},"24":{"start":{"line":55,"column":4},"end":{"line":55,"column":11}},"25":{"start":{"line":58,"column":2},"end":{"line":69,"column":4}},"26":{"start":{"line":70,"column":2},"end":{"line":70,"column":46}},"27":{"start":{"line":81,"column":0},"end":{"line":109,"column":2}},"28":{"start":{"line":82,"column":2},"end":{"line":82,"column":24}},"29":{"start":{"line":84,"column":2},"end":{"line":87,"column":3}},"30":{"start":{"line":85,"column":4},"end":{"line":85,"column":68}},"31":{"start":{"line":86,"column":4},"end":{"line":86,"column":11}},"32":{"start":{"line":88,"column":2},"end":{"line":91,"column":3}},"33":{"start":{"line":89,"column":4},"end":{"line":89,"column":70}},"34":{"start":{"line":90,"column":4},"end":{"line":90,"column":11}},"35":{"start":{"line":93,"column":2},"end":{"line":93,"column":52}},"36":{"start":{"line":94,"column":2},"end":{"line":94,"column":48}},"37":{"start":{"line":95,"column":2},"end":{"line":95,"column":74}},"38":{"start":{"line":97,"column":2},"end":{"line":107,"column":4}},"39":{"start":{"line":108,"column":2},"end":{"line":108,"column":46}},"40":{"start":{"line":114,"column":0},"end":{"line":129,"column":2}},"41":{"start":{"line":115,"column":2},"end":{"line":115,"column":24}},"42":{"start":{"line":117,"column":2},"end":{"line":126,"column":4}},"43":{"start":{"line":128,"column":2},"end":{"line":128,"column":46}},"44":{"start":{"line":134,"column":0},"end":{"line":145,"column":2}},"45":{"start":{"line":135,"column":2},"end":{"line":142,"column":4}},"46":{"start":{"line":144,"column":2},"end":{"line":144,"column":46}},"47":{"start":{"line":150,"column":0},"end":{"line":165,"column":2}},"48":{"start":{"line":151,"column":2},"end":{"line":151,"column":24}},"49":{"start":{"line":153,"column":2},"end":{"line":162,"column":4}},"50":{"start":{"line":164,"column":2},"end":{"line":164,"column":46}},"51":{"start":{"line":177,"column":0},"end":{"line":190,"column":2}},"52":{"start":{"line":178,"column":2},"end":{"line":178,"column":24}},"53":{"start":{"line":180,"column":2},"end":{"line":187,"column":4}},"54":{"start":{"line":189,"column":2},"end":{"line":189,"column":46}},"55":{"start":{"line":202,"column":0},"end":{"line":216,"column":2}},"56":{"start":{"line":203,"column":2},"end":{"line":203,"column":24}},"57":{"start":{"line":205,"column":2},"end":{"line":213,"column":4}},"58":{"start":{"line":215,"column":2},"end":{"line":215,"column":46}},"59":{"start":{"line":227,"column":0},"end":{"line":242,"column":2}},"60":{"start":{"line":228,"column":2},"end":{"line":228,"column":24}},"61":{"start":{"line":230,"column":2},"end":{"line":239,"column":4}},"62":{"start":{"line":241,"column":2},"end":{"line":241,"column":46}},"63":{"start":{"line":254,"column":0},"end":{"line":270,"column":2}},"64":{"start":{"line":255,"column":2},"end":{"line":255,"column":24}},"65":{"start":{"line":257,"column":2},"end":{"line":267,"column":4}},"66":{"start":{"line":269,"column":2},"end":{"line":269,"column":46}},"67":{"start":{"line":281,"column":0},"end":{"line":296,"column":2}},"68":{"start":{"line":282,"column":2},"end":{"line":282,"column":24}},"69":{"start":{"line":284,"column":2},"end":{"line":293,"column":4}},"70":{"start":{"line":295,"column":2},"end":{"line":295,"column":46}},"71":{"start":{"line":307,"column":0},"end":{"line":322,"column":2}},"72":{"start":{"line":308,"column":2},"end":{"line":308,"column":24}},"73":{"start":{"line":310,"column":2},"end":{"line":319,"column":4}},"74":{"start":{"line":321,"column":2},"end":{"line":321,"column":46}},"75":{"start":{"line":333,"column":0},"end":{"line":348,"column":2}},"76":{"start":{"line":334,"column":2},"end":{"line":334,"column":24}},"77":{"start":{"line":336,"column":2},"end":{"line":345,"column":4}},"78":{"start":{"line":347,"column":2},"end":{"line":347,"column":46}},"79":{"start":{"line":361,"column":0},"end":{"line":376,"column":2}},"80":{"start":{"line":362,"column":2},"end":{"line":362,"column":24}},"81":{"start":{"line":364,"column":2},"end":{"line":373,"column":4}},"82":{"start":{"line":375,"column":2},"end":{"line":375,"column":46}},"83":{"start":{"line":389,"column":0},"end":{"line":422,"column":2}},"84":{"start":{"line":390,"column":2},"end":{"line":390,"column":24}},"85":{"start":{"line":392,"column":2},"end":{"line":395,"column":3}},"86":{"start":{"line":393,"column":4},"end":{"line":393,"column":72}},"87":{"start":{"line":394,"column":4},"end":{"line":394,"column":11}},"88":{"start":{"line":396,"column":2},"end":{"line":396,"column":24}},"89":{"start":{"line":397,"column":2},"end":{"line":404,"column":3}},"90":{"start":{"line":398,"column":4},"end":{"line":398,"column":61}},"91":{"start":{"line":399,"column":9},"end":{"line":404,"column":3}},"92":{"start":{"line":400,"column":4},"end":{"line":400,"column":40}},"93":{"start":{"line":402,"column":4},"end":{"line":402,"column":74}},"94":{"start":{"line":403,"column":4},"end":{"line":403,"column":11}},"95":{"start":{"line":406,"column":2},"end":{"line":414,"column":4}},"96":{"start":{"line":416,"column":2},"end":{"line":421,"column":48}},"97":{"start":{"line":419,"column":6},"end":{"line":419,"column":59}},"98":{"start":{"line":434,"column":0},"end":{"line":452,"column":2}},"99":{"start":{"line":435,"column":2},"end":{"line":435,"column":24}},"100":{"start":{"line":437,"column":2},"end":{"line":449,"column":4}},"101":{"start":{"line":451,"column":2},"end":{"line":451,"column":46}},"102":{"start":{"line":464,"column":0},"end":{"line":479,"column":2}},"103":{"start":{"line":465,"column":2},"end":{"line":465,"column":24}},"104":{"start":{"line":467,"column":2},"end":{"line":476,"column":4}},"105":{"start":{"line":478,"column":2},"end":{"line":478,"column":46}},"106":{"start":{"line":494,"column":0},"end":{"line":512,"column":2}},"107":{"start":{"line":495,"column":2},"end":{"line":495,"column":24}},"108":{"start":{"line":496,"column":2},"end":{"line":509,"column":4}},"109":{"start":{"line":511,"column":2},"end":{"line":511,"column":46}},"110":{"start":{"line":527,"column":0},"end":{"line":555,"column":2}},"111":{"start":{"line":528,"column":2},"end":{"line":528,"column":24}},"112":{"start":{"line":530,"column":2},"end":{"line":530,"column":106}},"113":{"start":{"line":531,"column":2},"end":{"line":534,"column":3}},"114":{"start":{"line":532,"column":4},"end":{"line":532,"column":28}},"115":{"start":{"line":533,"column":4},"end":{"line":533,"column":11}},"116":{"start":{"line":536,"column":2},"end":{"line":541,"column":4}},"117":{"start":{"line":543,"column":2},"end":{"line":552,"column":4}},"118":{"start":{"line":554,"column":2},"end":{"line":554,"column":46}},"119":{"start":{"line":569,"column":0},"end":{"line":596,"column":2}},"120":{"start":{"line":570,"column":2},"end":{"line":570,"column":24}},"121":{"start":{"line":572,"column":2},"end":{"line":572,"column":91}},"122":{"start":{"line":573,"column":2},"end":{"line":576,"column":3}},"123":{"start":{"line":574,"column":4},"end":{"line":574,"column":28}},"124":{"start":{"line":575,"column":4},"end":{"line":575,"column":11}},"125":{"start":{"line":578,"column":2},"end":{"line":582,"column":4}},"126":{"start":{"line":584,"column":2},"end":{"line":593,"column":4}},"127":{"start":{"line":595,"column":2},"end":{"line":595,"column":46}},"128":{"start":{"line":607,"column":0},"end":{"line":630,"column":2}},"129":{"start":{"line":608,"column":2},"end":{"line":608,"column":24}},"130":{"start":{"line":610,"column":2},"end":{"line":610,"column":91}},"131":{"start":{"line":611,"column":2},"end":{"line":613,"column":3}},"132":{"start":{"line":612,"column":4},"end":{"line":612,"column":24}},"133":{"start":{"line":615,"column":2},"end":{"line":615,"column":50}},"134":{"start":{"line":616,"column":2},"end":{"line":616,"column":71}},"135":{"start":{"line":618,"column":2},"end":{"line":624,"column":5}},"136":{"start":{"line":626,"column":2},"end":{"line":628,"column":3}},"137":{"start":{"line":627,"column":4},"end":{"line":627,"column":73}},"138":{"start":{"line":629,"column":2},"end":{"line":629,"column":20}},"139":{"start":{"line":632,"column":0},"end":{"line":632,"column":35}}},"branchMap":{"1":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":11},"end":{"line":47,"column":17}},{"start":{"line":47,"column":21},"end":{"line":47,"column":23}}]},"2":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":2},"end":{"line":49,"column":2}},{"start":{"line":49,"column":2},"end":{"line":49,"column":2}}]},"3":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":6},"end":{"line":49,"column":13}},{"start":{"line":49,"column":17},"end":{"line":49,"column":38}}]},"4":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":2},"end":{"line":53,"column":2}},{"start":{"line":53,"column":2},"end":{"line":53,"column":2}}]},"5":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":46}},{"start":{"line":53,"column":50},"end":{"line":53,"column":81}}]},"6":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":27},"end":{"line":65,"column":51}},{"start":{"line":65,"column":55},"end":{"line":65,"column":102}}]},"7":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":11},"end":{"line":82,"column":17}},{"start":{"line":82,"column":21},"end":{"line":82,"column":23}}]},"8":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":2},"end":{"line":84,"column":2}},{"start":{"line":84,"column":2},"end":{"line":84,"column":2}}]},"9":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":6},"end":{"line":84,"column":13}},{"start":{"line":84,"column":17},"end":{"line":84,"column":36}}]},"10":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":2},"end":{"line":88,"column":2}},{"start":{"line":88,"column":2},"end":{"line":88,"column":2}}]},"11":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":6},"end":{"line":88,"column":44}},{"start":{"line":88,"column":48},"end":{"line":88,"column":77}}]},"12":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":11},"end":{"line":115,"column":17}},{"start":{"line":115,"column":21},"end":{"line":115,"column":23}}]},"13":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":11},"end":{"line":151,"column":17}},{"start":{"line":151,"column":21},"end":{"line":151,"column":23}}]},"14":{"line":178,"type":"binary-expr","locations":[{"start":{"line":178,"column":11},"end":{"line":178,"column":17}},{"start":{"line":178,"column":21},"end":{"line":178,"column":23}}]},"15":{"line":203,"type":"binary-expr","locations":[{"start":{"line":203,"column":11},"end":{"line":203,"column":17}},{"start":{"line":203,"column":21},"end":{"line":203,"column":23}}]},"16":{"line":228,"type":"binary-expr","locations":[{"start":{"line":228,"column":11},"end":{"line":228,"column":17}},{"start":{"line":228,"column":21},"end":{"line":228,"column":23}}]},"17":{"line":255,"type":"binary-expr","locations":[{"start":{"line":255,"column":11},"end":{"line":255,"column":17}},{"start":{"line":255,"column":21},"end":{"line":255,"column":23}}]},"18":{"line":282,"type":"binary-expr","locations":[{"start":{"line":282,"column":11},"end":{"line":282,"column":17}},{"start":{"line":282,"column":21},"end":{"line":282,"column":23}}]},"19":{"line":308,"type":"binary-expr","locations":[{"start":{"line":308,"column":11},"end":{"line":308,"column":17}},{"start":{"line":308,"column":21},"end":{"line":308,"column":23}}]},"20":{"line":334,"type":"binary-expr","locations":[{"start":{"line":334,"column":11},"end":{"line":334,"column":17}},{"start":{"line":334,"column":21},"end":{"line":334,"column":23}}]},"21":{"line":362,"type":"binary-expr","locations":[{"start":{"line":362,"column":11},"end":{"line":362,"column":17}},{"start":{"line":362,"column":21},"end":{"line":362,"column":23}}]},"22":{"line":390,"type":"binary-expr","locations":[{"start":{"line":390,"column":11},"end":{"line":390,"column":17}},{"start":{"line":390,"column":21},"end":{"line":390,"column":23}}]},"23":{"line":392,"type":"if","locations":[{"start":{"line":392,"column":2},"end":{"line":392,"column":2}},{"start":{"line":392,"column":2},"end":{"line":392,"column":2}}]},"24":{"line":392,"type":"binary-expr","locations":[{"start":{"line":392,"column":6},"end":{"line":392,"column":13}},{"start":{"line":392,"column":17},"end":{"line":392,"column":40}}]},"25":{"line":397,"type":"if","locations":[{"start":{"line":397,"column":2},"end":{"line":397,"column":2}},{"start":{"line":397,"column":2},"end":{"line":397,"column":2}}]},"26":{"line":399,"type":"if","locations":[{"start":{"line":399,"column":9},"end":{"line":399,"column":9}},{"start":{"line":399,"column":9},"end":{"line":399,"column":9}}]},"27":{"line":435,"type":"binary-expr","locations":[{"start":{"line":435,"column":11},"end":{"line":435,"column":17}},{"start":{"line":435,"column":21},"end":{"line":435,"column":23}}]},"28":{"line":465,"type":"binary-expr","locations":[{"start":{"line":465,"column":11},"end":{"line":465,"column":17}},{"start":{"line":465,"column":21},"end":{"line":465,"column":23}}]},"29":{"line":495,"type":"binary-expr","locations":[{"start":{"line":495,"column":11},"end":{"line":495,"column":17}},{"start":{"line":495,"column":21},"end":{"line":495,"column":23}}]},"30":{"line":502,"type":"binary-expr","locations":[{"start":{"line":502,"column":12},"end":{"line":502,"column":21}},{"start":{"line":502,"column":25},"end":{"line":502,"column":31}}]},"31":{"line":528,"type":"binary-expr","locations":[{"start":{"line":528,"column":11},"end":{"line":528,"column":17}},{"start":{"line":528,"column":21},"end":{"line":528,"column":23}}]},"32":{"line":531,"type":"if","locations":[{"start":{"line":531,"column":2},"end":{"line":531,"column":2}},{"start":{"line":531,"column":2},"end":{"line":531,"column":2}}]},"33":{"line":539,"type":"binary-expr","locations":[{"start":{"line":539,"column":8},"end":{"line":539,"column":17}},{"start":{"line":539,"column":21},"end":{"line":539,"column":27}}]},"34":{"line":570,"type":"binary-expr","locations":[{"start":{"line":570,"column":11},"end":{"line":570,"column":17}},{"start":{"line":570,"column":21},"end":{"line":570,"column":23}}]},"35":{"line":573,"type":"if","locations":[{"start":{"line":573,"column":2},"end":{"line":573,"column":2}},{"start":{"line":573,"column":2},"end":{"line":573,"column":2}}]},"36":{"line":580,"type":"binary-expr","locations":[{"start":{"line":580,"column":8},"end":{"line":580,"column":17}},{"start":{"line":580,"column":21},"end":{"line":580,"column":27}}]},"37":{"line":608,"type":"binary-expr","locations":[{"start":{"line":608,"column":11},"end":{"line":608,"column":17}},{"start":{"line":608,"column":21},"end":{"line":608,"column":23}}]},"38":{"line":611,"type":"if","locations":[{"start":{"line":611,"column":2},"end":{"line":611,"column":2}},{"start":{"line":611,"column":2},"end":{"line":611,"column":2}}]},"39":{"line":616,"type":"cond-expr","locations":[{"start":{"line":616,"column":44},"end":{"line":616,"column":46}},{"start":{"line":616,"column":49},"end":{"line":616,"column":70}}]},"40":{"line":616,"type":"binary-expr","locations":[{"start":{"line":616,"column":49},"end":{"line":616,"column":64}},{"start":{"line":616,"column":68},"end":{"line":616,"column":70}}]},"41":{"line":621,"type":"binary-expr","locations":[{"start":{"line":621,"column":10},"end":{"line":621,"column":25}},{"start":{"line":621,"column":29},"end":{"line":621,"column":34}}]},"42":{"line":626,"type":"if","locations":[{"start":{"line":626,"column":2},"end":{"line":626,"column":2}},{"start":{"line":626,"column":2},"end":{"line":626,"column":2}}]},"43":{"line":626,"type":"binary-expr","locations":[{"start":{"line":626,"column":6},"end":{"line":626,"column":28}},{"start":{"line":626,"column":32},"end":{"line":626,"column":54}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const fs = require('fs');","const url = require('url');","const requestFactory = require('../lib/requestwrapper');","const solr = require('solr-client');","const helper = require('../lib/helper');","const pick = require('object.pick');","const omit = require('object.omit');","const isStream = require('isstream');","const util = require('util');","const BaseService = require('../lib/base_service');","","/**"," *"," * @param {Object} options"," * @constructor"," */","function RetrieveAndRankV1(options) {","  BaseService.call(this, options);","}","util.inherits(RetrieveAndRankV1, BaseService);","RetrieveAndRankV1.prototype.name = 'retrieve_and_rank';","RetrieveAndRankV1.prototype.version = 'v1';","RetrieveAndRankV1.URL = 'https://gateway.watsonplatform.net/retrieve-and-rank/api';","","/**"," * Creates a ranker"," */","RetrieveAndRankV1.prototype.createRanker = function(params, callback) {","  params = params || {};","","  if (!params || !params.training_data) {","    callback(new Error('Missing required parameters: training_data'));","    return;","  }","  if (typeof params.training_data !== 'string' && !isStream(params.training_data)) {","    callback(new Error('training_data needs to be a String or Stream'));","    return;","  }","","  const parameters = {","    options: {","      url: '/v1/rankers',","      method: 'POST',","      json: true,","      formData: {","        training_data: params.training_data,","        training_metadata: params.training_metadata || JSON.stringify(omit(params, ['training_data']))","      }","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Returns the ranked candidates"," *"," * @param {Object} params - everything except answer_data and answers will be passed in as answer_metadata"," * @param {String|ReadableStream} params.answer_data"," * @param {Number} [params.answers] - number of answers to return"," * @param {Function} callback"," */","RetrieveAndRankV1.prototype.rank = function(params, callback) {","  params = params || {};","","  if (!params || !params.answer_data) {","    callback(new Error('Missing required parameters: answer_data'));","    return;","  }","  if (typeof params.answer_data !== 'string' && !isStream(params.answer_data)) {","    callback(new Error('answer_data needs to be a String or Stream'));","    return;","  }","","  const topLevelParams = ['answer_data', 'answers'];","  const formData = pick(params, topLevelParams);","  formData.answer_metadata = JSON.stringify(omit(params, topLevelParams));","","  const parameters = {","    options: {","      url: '/v1/rankers/{ranker_id}/rank',","      method: 'POST',","      json: true,","      formData: formData,","      path: pick(params, ['ranker_id'])","    },","    requiredParams: ['ranker_id'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Returns the training status of the ranker"," */","RetrieveAndRankV1.prototype.rankerStatus = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/rankers/{ranker_id}',","      method: 'GET',","      json: true,","      path: params","    },","    requiredParams: ['ranker_id'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Retrieves the list of rankers for the user"," */","RetrieveAndRankV1.prototype.listRankers = function(params, callback) {","  const parameters = {","    options: {","      url: '/v1/rankers',","      method: 'GET',","      json: true","    },","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Deletes a ranker"," */","RetrieveAndRankV1.prototype.deleteRanker = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/rankers/{ranker_id}',","      method: 'DELETE',","      path: params,","      json: true","    },","    requiredParams: ['ranker_id'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","// Solr cluster lifecycle operations","","/**"," * Lists all Solr clusters associated with the service instance."," *"," * @param params An Object representing the parameters for this service call."," *   This request currently does not require any parameters."," *"," * @param callback The callback."," */","RetrieveAndRankV1.prototype.listClusters = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/solr_clusters',","      method: 'GET',","      json: true","    },","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Creates a Solr cluster."," *"," * @param params An Object representing the parameters for this service call."," *   Optional params"," *     - cluster_name: name to use for identifying the cluster in responses"," *     - cluster_size: size of the cluster to create"," *"," * @param callback The callback."," */","RetrieveAndRankV1.prototype.createCluster = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/solr_clusters',","      method: 'POST',","      json: true,","      body: params","    },","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Checks whether the specified Solr cluster is ready for use."," *"," * @param params An Object representing the parameters for this service call."," *   Required params:"," *     - cluster_id: the ID of the Solr cluster to poll"," *"," * @param callback The callback."," */","RetrieveAndRankV1.prototype.pollCluster = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/solr_clusters/{cluster_id}',","      method: 'GET',","      path: params,","      json: true","    },","    requiredParams: ['cluster_id'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Change the size of the Solr cluster.",""," * @param params An Object representing the parameters for this service call."," *   Required params:"," *     - cluster_id: the ID of the Solr cluster to poll"," *     - cluster_size: the integer size to resize the cluster to"," *"," * @param callback The callback."," */","RetrieveAndRankV1.prototype.resizeCluster = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/solr_clusters/{cluster_id}/cluster_size',","      method: 'PUT',","      body: { cluster_size: params.cluster_size },","      path: params,","      json: true","    },","    requiredParams: ['cluster_id', 'cluster_size'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Get the status of a resize request.",""," * @param params An Object representing the parameters for this service call."," *   Required params:"," *     - cluster_id: the ID of the Solr cluster to poll"," *"," * @param callback The callback."," */","RetrieveAndRankV1.prototype.getResizeStatus = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/solr_clusters/{cluster_id}/cluster_size',","      method: 'GET',","      path: params,","      json: true","    },","    requiredParams: ['cluster_id'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Deletes a Solr cluster."," *"," * @param params An Object representing the parameters for this service call."," *   Required params:"," *     - cluster_id: the ID of the Solr cluster to delete"," *"," * @param callback The callback."," */","RetrieveAndRankV1.prototype.deleteCluster = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/solr_clusters/{cluster_id}',","      method: 'DELETE',","      path: params,","      json: true","    },","    requiredParams: ['cluster_id'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Get memory and disk usage stats from a Solr cluster"," *"," * @param params An Object representing the parameters for this service call."," *   Required params:"," *     - cluster_id: the ID of the Solr cluster to get stats from"," *"," * @param callback The callback."," */","RetrieveAndRankV1.prototype.getClusterStats = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/solr_clusters/{cluster_id}/stats',","      method: 'GET',","      path: params,","      json: true","    },","    requiredParams: ['cluster_id'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","// Solr config operations","","/**"," * Lists the configuration sets in ZooKeeper."," *"," * @param params An Object representing the parameters for this service call."," *   Required params:"," *     - cluster_id: the ID of the Solr cluster to get configuration from"," *"," * @param callback The callback."," */","RetrieveAndRankV1.prototype.listConfigs = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/solr_clusters/{cluster_id}/config',","      method: 'GET',","      path: params,","      json: true","    },","    requiredParams: ['cluster_id'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Upload a configuration set to ZooKeeper."," *"," * @param params An Object representing the parameters for this service call."," *   Required params:"," *     - cluster_id: the ID of the Solr cluster to upload configuration to"," *     - config_name: the name of the config in ZooKeeper referenced when creating a collection"," *     - config_zip_path: the ZIP file to upload"," *"," * @param callback The callback."," */","RetrieveAndRankV1.prototype.uploadConfig = function(params, callback) {","  params = params || {};","","  if (!params || !params.config_zip_path) {","    callback(new Error('Missing required parameters: config_zip_path'));","    return;","  }","  let configFile = null;","  if (typeof params.config_zip_path === 'string') {","    configFile = fs.createReadStream(params.config_zip_path);","  } else if (isStream(params.config_zip_path)) {","    configFile = params.config_zip_path;","  } else {","    callback(new Error('config_zip_path needs to be a String or Stream'));","    return;","  }","","  const parameters = {","    options: {","      url: '/v1/solr_clusters/{cluster_id}/config/{config_name}',","      method: 'POST',","      path: params","    },","    requiredParams: ['cluster_id', 'config_name'],","    defaultOptions: this._options","  };","","  return configFile","    .on('response', function(response) {","      // Replace content-type","      response.headers['content-type'] = 'application/zip';","    })","    .pipe(requestFactory(parameters, callback));","};","","/**"," * Get a configuration set from ZooKeeper as a .zip file."," *"," * @param params An Object representing the parameters for this service call."," *   Required params:"," *     - cluster_id: the ID of the Solr cluster to get configuration from"," *     - config_name: the name of the config in ZooKeeper"," *"," * @param callback The callback."," */","RetrieveAndRankV1.prototype.getConfig = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/solr_clusters/{cluster_id}/config/{config_name}',","      method: 'GET',","      path: params,","      json: true,","      headers: {","        accept: 'application/zip'","      }","    },","    requiredParams: ['cluster_id', 'config_name'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Delete a configuration set in ZooKeeper."," *"," * @param params An Object representing the parameters for this service call."," *   Required params:"," *     - cluster_id: the ID of the Solr cluster to delete configuration from"," *     - config_name: the name of the config in ZooKeeper"," *"," * @param callback The callback."," */","RetrieveAndRankV1.prototype.deleteConfig = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v1/solr_clusters/{cluster_id}/config/{config_name}',","      method: 'DELETE',","      path: params,","      json: true","    },","    requiredParams: ['cluster_id', 'config_name'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","// Solr collection operations","","/**"," * List all collections for a Solr cluster."," *"," * @param params An Object representing the parameters for this service call."," *   Required params:"," *     - cluster_id: the ID of the Solr cluster to list collections from"," *   Optional params:"," *     - wt: the writer type for the response, defaults to 'json'"," *"," * @param callback The callback."," */","RetrieveAndRankV1.prototype.listCollections = function(params, callback) {","  params = params || {};","  const parameters = {","    options: {","      url: '/v1/solr_clusters/{cluster_id}/solr/admin/collections',","      method: 'GET',","      qs: {","        action: 'LIST',","        wt: params.wt || 'json'","      },","      path: params,","      json: true","    },","    requiredParams: ['cluster_id'],","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Create a Solr collection."," *"," * @param params An Object representing the parameters for this service call."," *   Required params:"," *     - cluster_id: the ID of the Solr cluster to create the collection on"," *     - collection_name: the name of the collection to create"," *     - config_name: the name of the config in ZooKeeper"," *   Optional params:"," *     - wt: the writer type for the response, defaults to 'json'"," *"," * @param callback The callback."," */","RetrieveAndRankV1.prototype.createCollection = function(params, callback) {","  params = params || {};","","  const missingParams = helper.getMissingParams(params, ['cluster_id', 'collection_name', 'config_name']);","  if (missingParams) {","    callback(missingParams);","    return;","  }","","  const queryParams = {","    'collection.configName': params.config_name,","    name: params.collection_name,","    wt: params.wt || 'json',","    action: 'CREATE'","  };","","  const parameters = {","    options: {","      url: '/v1/solr_clusters/{cluster_id}/solr/admin/collections',","      method: 'POST',","      qs: queryParams,","      path: pick(params, ['cluster_id']),","      json: true","    },","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Delete a Solr collection."," *"," * @param params An Object representing the parameters for this service call."," *   Required params:"," *     - cluster_id: the ID of the Solr cluster to delete the collection on"," *     - collection_name: the name of the collection to delete"," *   Optional params:"," *     - wt: the writer type for the response, defaults to 'json'"," *"," * @param callback The callback."," */","RetrieveAndRankV1.prototype.deleteCollection = function(params, callback) {","  params = params || {};","","  const missingParams = helper.getMissingParams(params, ['cluster_id', 'collection_name']);","  if (missingParams) {","    callback(missingParams);","    return;","  }","","  const queryParams = {","    name: params.collection_name,","    wt: params.wt || 'json',","    action: 'DELETE'","  };","","  const parameters = {","    options: {","      url: '/v1/solr_clusters/{cluster_id}/solr/admin/collections',","      method: 'POST',","      qs: queryParams,","      path: pick(params, ['cluster_id']),","      json: true","    },","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Get a Solr client for indexing and searching documents."," * See https://github.com/lbdremy/solr-node-client for documentation and examples."," *"," * @param params An Object representing the parameters for this service call."," *   Required params:"," *     - cluster_id: the ID of the Solr cluster to delete the collection on"," *     - collection_name: the name of the collection for indexing/searching"," */","RetrieveAndRankV1.prototype.createSolrClient = function(params) {","  params = params || {};","","  const missingParams = helper.getMissingParams(params, ['cluster_id', 'collection_name']);","  if (missingParams) {","    throw missingParams;","  }","","  const serviceUrl = url.parse(this._options.url);","  const apiPath = serviceUrl.path === '/' ? '' : serviceUrl.path || '';","","  const solrClient = solr.createClient({","    host: serviceUrl.hostname,","    path: apiPath + '/v1/solr_clusters/' + params.cluster_id + '/solr',","    port: serviceUrl.port || '443',","    secure: true,","    core: params.collection_name","  });","","  if (this._options.username && this._options.password) {","    solrClient.basicAuth(this._options.username, this._options.password);","  }","  return solrClient;","};","","module.exports = RetrieveAndRankV1;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"35":1,"36":0,"38":1,"39":1,"40":1,"41":1,"46":1,"47":0,"49":0,"50":0,"51":0,"53":0,"54":0,"55":0,"58":0,"70":0,"81":1,"82":0,"84":0,"85":0,"86":0,"88":0,"89":0,"90":0,"93":0,"94":0,"95":0,"97":0,"108":0,"114":1,"115":0,"117":0,"128":0,"134":1,"135":0,"144":0,"150":1,"151":0,"153":0,"164":0,"177":1,"178":0,"180":0,"189":0,"202":1,"203":0,"205":0,"215":0,"227":1,"228":0,"230":0,"241":0,"254":1,"255":0,"257":0,"269":0,"281":1,"282":0,"284":0,"295":0,"307":1,"308":0,"310":0,"321":0,"333":1,"334":0,"336":0,"347":0,"361":1,"362":0,"364":0,"375":0,"389":1,"390":0,"392":0,"393":0,"394":0,"396":0,"397":0,"398":0,"399":0,"400":0,"402":0,"403":0,"406":0,"416":0,"419":0,"434":1,"435":0,"437":0,"451":0,"464":1,"465":0,"467":0,"478":0,"494":1,"495":0,"496":0,"511":0,"527":1,"528":0,"530":0,"531":0,"532":0,"533":0,"536":0,"543":0,"554":0,"569":1,"570":0,"572":0,"573":0,"574":0,"575":0,"578":0,"584":0,"595":0,"607":1,"608":0,"610":0,"611":0,"612":0,"615":0,"616":0,"618":0,"626":0,"627":0,"629":0,"632":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/speech-to-text/v1.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/speech-to-text/v1.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":1,"28":1,"29":1,"30":1,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":1,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":1,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":1,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":1,"133":0,"134":0,"135":1,"136":0,"137":0,"138":1,"139":0,"140":0,"141":1,"142":0,"143":1,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":1,"153":0,"154":0,"155":1,"156":0,"157":0,"158":0,"159":0,"160":1,"161":2,"162":2,"163":0,"164":0,"165":0,"166":1,"167":0,"168":0,"169":1,"170":0,"171":0,"172":0,"173":0,"174":0,"175":1,"176":0,"177":0,"178":1,"179":0,"180":0,"181":1,"182":0,"183":0,"184":1,"185":0,"186":0,"187":1,"188":0,"189":0,"190":1,"191":0,"192":0,"193":1,"194":0,"195":0,"196":1,"197":0,"198":0,"199":1,"200":1,"201":1,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":1,"220":0,"221":0,"222":0,"223":0,"224":0,"225":1,"226":0,"227":0,"228":0,"229":0,"230":0,"231":1,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":1,"260":0,"261":0,"262":1,"263":0,"264":0,"265":1,"266":0,"267":0,"268":0,"269":0,"270":0,"271":1,"272":0,"273":0,"274":1,"275":0,"276":0,"277":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":2,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0},"fnMap":{"1":{"name":"formatChunk","line":57,"loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":28}}},"2":{"name":"SpeechToTextV1","line":84,"loc":{"start":{"line":84,"column":0},"end":{"line":84,"column":33}}},"3":{"name":"(anonymous_3)","line":104,"loc":{"start":{"line":104,"column":44},"end":{"line":104,"column":71}}},"4":{"name":"(anonymous_4)","line":141,"loc":{"start":{"line":141,"column":48},"end":{"line":141,"column":75}}},"5":{"name":"(anonymous_5)","line":174,"loc":{"start":{"line":174,"column":20},"end":{"line":174,"column":39}}},"6":{"name":"(anonymous_6)","line":190,"loc":{"start":{"line":190,"column":46},"end":{"line":190,"column":73}}},"7":{"name":"(anonymous_7)","line":214,"loc":{"start":{"line":214,"column":45},"end":{"line":214,"column":72}}},"8":{"name":"(anonymous_8)","line":242,"loc":{"start":{"line":242,"column":48},"end":{"line":242,"column":75}}},"9":{"name":"(anonymous_9)","line":284,"loc":{"start":{"line":284,"column":37},"end":{"line":284,"column":64}}},"10":{"name":"(anonymous_10)","line":317,"loc":{"start":{"line":317,"column":20},"end":{"line":317,"column":39}}},"11":{"name":"(anonymous_11)","line":336,"loc":{"start":{"line":336,"column":41},"end":{"line":336,"column":68}}},"12":{"name":"(anonymous_12)","line":362,"loc":{"start":{"line":362,"column":50},"end":{"line":362,"column":67}}},"13":{"name":"(anonymous_13)","line":366,"loc":{"start":{"line":366,"column":22},"end":{"line":366,"column":38}}},"14":{"name":"(anonymous_14)","line":370,"loc":{"start":{"line":370,"column":21},"end":{"line":370,"column":32}}},"15":{"name":"(anonymous_15)","line":381,"loc":{"start":{"line":381,"column":28},"end":{"line":381,"column":44}}},"16":{"name":"(anonymous_16)","line":399,"loc":{"start":{"line":399,"column":41},"end":{"line":399,"column":68}}},"17":{"name":"(anonymous_17)","line":422,"loc":{"start":{"line":422,"column":40},"end":{"line":422,"column":57}}},"18":{"name":"(anonymous_18)","line":424,"loc":{"start":{"line":424,"column":22},"end":{"line":424,"column":38}}},"19":{"name":"(anonymous_19)","line":435,"loc":{"start":{"line":435,"column":18},"end":{"line":435,"column":34}}},"20":{"name":"(anonymous_20)","line":455,"loc":{"start":{"line":455,"column":46},"end":{"line":455,"column":73}}},"21":{"name":"(anonymous_21)","line":476,"loc":{"start":{"line":476,"column":37},"end":{"line":476,"column":64}}},"22":{"name":"(anonymous_22)","line":497,"loc":{"start":{"line":497,"column":36},"end":{"line":497,"column":63}}},"23":{"name":"(anonymous_23)","line":520,"loc":{"start":{"line":520,"column":41},"end":{"line":520,"column":68}}},"24":{"name":"addSessionId","line":537,"loc":{"start":{"line":537,"column":2},"end":{"line":537,"column":28}}},"25":{"name":"(anonymous_25)","line":538,"loc":{"start":{"line":538,"column":11},"end":{"line":538,"column":43}}},"26":{"name":"(anonymous_26)","line":559,"loc":{"start":{"line":559,"column":41},"end":{"line":559,"column":68}}},"27":{"name":"(anonymous_27)","line":579,"loc":{"start":{"line":579,"column":49},"end":{"line":579,"column":66}}},"28":{"name":"(anonymous_28)","line":595,"loc":{"start":{"line":595,"column":43},"end":{"line":595,"column":58}}},"29":{"name":"deprecated","line":597,"loc":{"start":{"line":597,"column":35},"end":{"line":597,"column":63}}},"30":{"name":"(anonymous_30)","line":627,"loc":{"start":{"line":627,"column":47},"end":{"line":627,"column":74}}},"31":{"name":"(anonymous_31)","line":688,"loc":{"start":{"line":688,"column":45},"end":{"line":688,"column":72}}},"32":{"name":"(anonymous_32)","line":727,"loc":{"start":{"line":727,"column":44},"end":{"line":727,"column":71}}},"33":{"name":"(anonymous_33)","line":749,"loc":{"start":{"line":749,"column":46},"end":{"line":749,"column":73}}},"34":{"name":"(anonymous_34)","line":771,"loc":{"start":{"line":771,"column":46},"end":{"line":771,"column":73}}},"35":{"name":"(anonymous_35)","line":792,"loc":{"start":{"line":792,"column":47},"end":{"line":792,"column":74}}},"36":{"name":"(anonymous_36)","line":816,"loc":{"start":{"line":816,"column":37},"end":{"line":816,"column":64}}},"37":{"name":"(anonymous_37)","line":859,"loc":{"start":{"line":859,"column":38},"end":{"line":859,"column":65}}},"38":{"name":"(anonymous_38)","line":893,"loc":{"start":{"line":893,"column":37},"end":{"line":893,"column":64}}},"39":{"name":"(anonymous_39)","line":915,"loc":{"start":{"line":915,"column":40},"end":{"line":915,"column":67}}},"40":{"name":"(anonymous_40)","line":945,"loc":{"start":{"line":945,"column":50},"end":{"line":945,"column":77}}},"41":{"name":"(anonymous_41)","line":957,"loc":{"start":{"line":957,"column":24},"end":{"line":957,"column":38}}},"42":{"name":"(anonymous_42)","line":965,"loc":{"start":{"line":965,"column":4},"end":{"line":965,"column":19}}},"43":{"name":"(anonymous_43)","line":966,"loc":{"start":{"line":966,"column":36},"end":{"line":966,"column":65}}},"44":{"name":"isProcessing","line":993,"loc":{"start":{"line":993,"column":0},"end":{"line":993,"column":35}}},"45":{"name":"(anonymous_45)","line":994,"loc":{"start":{"line":994,"column":59},"end":{"line":994,"column":76}}},"46":{"name":"isAnalyzed","line":1010,"loc":{"start":{"line":1010,"column":0},"end":{"line":1010,"column":33}}},"47":{"name":"(anonymous_47)","line":1011,"loc":{"start":{"line":1011,"column":53},"end":{"line":1011,"column":70}}},"48":{"name":"(anonymous_48)","line":1032,"loc":{"start":{"line":1032,"column":47},"end":{"line":1032,"column":74}}},"49":{"name":"(anonymous_49)","line":1038,"loc":{"start":{"line":1038,"column":6},"end":{"line":1038,"column":21}}},"50":{"name":"(anonymous_50)","line":1039,"loc":{"start":{"line":1039,"column":32},"end":{"line":1039,"column":51}}},"51":{"name":"(anonymous_51)","line":1052,"loc":{"start":{"line":1052,"column":6},"end":{"line":1052,"column":21}}},"52":{"name":"(anonymous_52)","line":1060,"loc":{"start":{"line":1060,"column":30},"end":{"line":1060,"column":44}}},"53":{"name":"(anonymous_53)","line":1068,"loc":{"start":{"line":1068,"column":10},"end":{"line":1068,"column":25}}},"54":{"name":"(anonymous_54)","line":1069,"loc":{"start":{"line":1069,"column":36},"end":{"line":1069,"column":59}}},"55":{"name":"(anonymous_55)","line":1088,"loc":{"start":{"line":1088,"column":4},"end":{"line":1088,"column":23}}},"56":{"name":"(anonymous_56)","line":1105,"loc":{"start":{"line":1105,"column":36},"end":{"line":1105,"column":63}}},"57":{"name":"(anonymous_57)","line":1130,"loc":{"start":{"line":1130,"column":35},"end":{"line":1130,"column":62}}},"58":{"name":"(anonymous_58)","line":1190,"loc":{"start":{"line":1190,"column":36},"end":{"line":1190,"column":63}}},"59":{"name":"(anonymous_59)","line":1229,"loc":{"start":{"line":1229,"column":35},"end":{"line":1229,"column":62}}},"60":{"name":"(anonymous_60)","line":1253,"loc":{"start":{"line":1253,"column":38},"end":{"line":1253,"column":65}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":33}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":40}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":33}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":36}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":27}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":31}},"7":{"start":{"line":25,"column":0},"end":{"line":25,"column":29}},"8":{"start":{"line":26,"column":0},"end":{"line":26,"column":37}},"9":{"start":{"line":27,"column":0},"end":{"line":27,"column":56}},"10":{"start":{"line":28,"column":0},"end":{"line":28,"column":54}},"11":{"start":{"line":29,"column":0},"end":{"line":29,"column":39}},"12":{"start":{"line":30,"column":0},"end":{"line":30,"column":29}},"13":{"start":{"line":31,"column":0},"end":{"line":31,"column":51}},"14":{"start":{"line":32,"column":0},"end":{"line":32,"column":31}},"15":{"start":{"line":34,"column":0},"end":{"line":50,"column":2}},"16":{"start":{"line":57,"column":0},"end":{"line":77,"column":1}},"17":{"start":{"line":59,"column":2},"end":{"line":59,"column":21}},"18":{"start":{"line":63,"column":2},"end":{"line":65,"column":3}},"19":{"start":{"line":64,"column":4},"end":{"line":64,"column":30}},"20":{"start":{"line":68,"column":2},"end":{"line":74,"column":3}},"21":{"start":{"line":69,"column":4},"end":{"line":69,"column":54}},"22":{"start":{"line":70,"column":4},"end":{"line":70,"column":32}},"23":{"start":{"line":71,"column":4},"end":{"line":71,"column":37}},"24":{"start":{"line":76,"column":2},"end":{"line":76,"column":16}},"25":{"start":{"line":84,"column":0},"end":{"line":86,"column":1}},"26":{"start":{"line":85,"column":2},"end":{"line":85,"column":34}},"27":{"start":{"line":88,"column":0},"end":{"line":88,"column":43}},"28":{"start":{"line":89,"column":0},"end":{"line":89,"column":49}},"29":{"start":{"line":90,"column":0},"end":{"line":90,"column":40}},"30":{"start":{"line":91,"column":0},"end":{"line":91,"column":76}},"31":{"start":{"line":104,"column":0},"end":{"line":123,"column":2}},"32":{"start":{"line":105,"column":2},"end":{"line":105,"column":74}},"33":{"start":{"line":106,"column":2},"end":{"line":109,"column":3}},"34":{"start":{"line":107,"column":4},"end":{"line":107,"column":28}},"35":{"start":{"line":108,"column":4},"end":{"line":108,"column":11}},"36":{"start":{"line":111,"column":2},"end":{"line":120,"column":4}},"37":{"start":{"line":122,"column":2},"end":{"line":122,"column":46}},"38":{"start":{"line":141,"column":0},"end":{"line":179,"column":2}},"39":{"start":{"line":142,"column":2},"end":{"line":142,"column":83}},"40":{"start":{"line":143,"column":2},"end":{"line":146,"column":3}},"41":{"start":{"line":144,"column":4},"end":{"line":144,"column":28}},"42":{"start":{"line":145,"column":4},"end":{"line":145,"column":11}},"43":{"start":{"line":148,"column":2},"end":{"line":151,"column":3}},"44":{"start":{"line":149,"column":4},"end":{"line":149,"column":66}},"45":{"start":{"line":150,"column":4},"end":{"line":150,"column":11}},"46":{"start":{"line":153,"column":2},"end":{"line":153,"column":106}},"47":{"start":{"line":156,"column":2},"end":{"line":158,"column":3}},"48":{"start":{"line":157,"column":4},"end":{"line":157,"column":36}},"49":{"start":{"line":160,"column":2},"end":{"line":171,"column":4}},"50":{"start":{"line":173,"column":2},"end":{"line":178,"column":48}},"51":{"start":{"line":176,"column":6},"end":{"line":176,"column":61}},"52":{"start":{"line":190,"column":0},"end":{"line":204,"column":2}},"53":{"start":{"line":191,"column":2},"end":{"line":193,"column":3}},"54":{"start":{"line":192,"column":4},"end":{"line":192,"column":22}},"55":{"start":{"line":194,"column":2},"end":{"line":201,"column":4}},"56":{"start":{"line":203,"column":2},"end":{"line":203,"column":46}},"57":{"start":{"line":214,"column":0},"end":{"line":232,"column":2}},"58":{"start":{"line":215,"column":2},"end":{"line":215,"column":64}},"59":{"start":{"line":216,"column":2},"end":{"line":219,"column":3}},"60":{"start":{"line":217,"column":4},"end":{"line":217,"column":28}},"61":{"start":{"line":218,"column":4},"end":{"line":218,"column":11}},"62":{"start":{"line":221,"column":2},"end":{"line":229,"column":4}},"63":{"start":{"line":231,"column":2},"end":{"line":231,"column":46}},"64":{"start":{"line":242,"column":0},"end":{"line":260,"column":2}},"65":{"start":{"line":243,"column":2},"end":{"line":243,"column":64}},"66":{"start":{"line":244,"column":2},"end":{"line":247,"column":3}},"67":{"start":{"line":245,"column":4},"end":{"line":245,"column":28}},"68":{"start":{"line":246,"column":4},"end":{"line":246,"column":11}},"69":{"start":{"line":249,"column":2},"end":{"line":257,"column":4}},"70":{"start":{"line":259,"column":2},"end":{"line":259,"column":46}},"71":{"start":{"line":284,"column":0},"end":{"line":322,"column":2}},"72":{"start":{"line":285,"column":2},"end":{"line":285,"column":83}},"73":{"start":{"line":286,"column":2},"end":{"line":289,"column":3}},"74":{"start":{"line":287,"column":4},"end":{"line":287,"column":28}},"75":{"start":{"line":288,"column":4},"end":{"line":288,"column":11}},"76":{"start":{"line":290,"column":2},"end":{"line":293,"column":3}},"77":{"start":{"line":291,"column":4},"end":{"line":291,"column":66}},"78":{"start":{"line":292,"column":4},"end":{"line":292,"column":11}},"79":{"start":{"line":295,"column":2},"end":{"line":295,"column":51}},"80":{"start":{"line":296,"column":2},"end":{"line":298,"column":3}},"81":{"start":{"line":297,"column":4},"end":{"line":297,"column":58}},"82":{"start":{"line":300,"column":2},"end":{"line":300,"column":19}},"83":{"start":{"line":301,"column":2},"end":{"line":301,"column":68}},"84":{"start":{"line":302,"column":2},"end":{"line":302,"column":23}},"85":{"start":{"line":304,"column":2},"end":{"line":315,"column":4}},"86":{"start":{"line":316,"column":2},"end":{"line":321,"column":48}},"87":{"start":{"line":319,"column":6},"end":{"line":319,"column":61}},"88":{"start":{"line":336,"column":0},"end":{"line":385,"column":2}},"89":{"start":{"line":337,"column":2},"end":{"line":337,"column":106}},"90":{"start":{"line":339,"column":2},"end":{"line":342,"column":3}},"91":{"start":{"line":340,"column":4},"end":{"line":340,"column":28}},"92":{"start":{"line":341,"column":4},"end":{"line":341,"column":11}},"93":{"start":{"line":344,"column":2},"end":{"line":344,"column":100}},"94":{"start":{"line":345,"column":2},"end":{"line":345,"column":38}},"95":{"start":{"line":346,"column":2},"end":{"line":360,"column":4}},"96":{"start":{"line":361,"column":2},"end":{"line":361,"column":64}},"97":{"start":{"line":362,"column":2},"end":{"line":379,"column":5}},"98":{"start":{"line":363,"column":4},"end":{"line":363,"column":32}},"99":{"start":{"line":364,"column":4},"end":{"line":364,"column":24}},"100":{"start":{"line":366,"column":4},"end":{"line":368,"column":7}},"101":{"start":{"line":367,"column":6},"end":{"line":367,"column":26}},"102":{"start":{"line":370,"column":4},"end":{"line":378,"column":7}},"103":{"start":{"line":371,"column":6},"end":{"line":376,"column":7}},"104":{"start":{"line":372,"column":8},"end":{"line":372,"column":45}},"105":{"start":{"line":374,"column":8},"end":{"line":374,"column":29}},"106":{"start":{"line":375,"column":8},"end":{"line":375,"column":15}},"107":{"start":{"line":377,"column":6},"end":{"line":377,"column":33}},"108":{"start":{"line":381,"column":2},"end":{"line":383,"column":5}},"109":{"start":{"line":382,"column":4},"end":{"line":382,"column":20}},"110":{"start":{"line":384,"column":2},"end":{"line":384,"column":23}},"111":{"start":{"line":399,"column":0},"end":{"line":442,"column":2}},"112":{"start":{"line":400,"column":2},"end":{"line":400,"column":90}},"113":{"start":{"line":401,"column":2},"end":{"line":404,"column":3}},"114":{"start":{"line":402,"column":4},"end":{"line":402,"column":28}},"115":{"start":{"line":403,"column":4},"end":{"line":403,"column":11}},"116":{"start":{"line":405,"column":2},"end":{"line":405,"column":105}},"117":{"start":{"line":406,"column":2},"end":{"line":406,"column":38}},"118":{"start":{"line":407,"column":2},"end":{"line":420,"column":4}},"119":{"start":{"line":421,"column":2},"end":{"line":421,"column":64}},"120":{"start":{"line":422,"column":2},"end":{"line":433,"column":5}},"121":{"start":{"line":423,"column":4},"end":{"line":423,"column":32}},"122":{"start":{"line":424,"column":4},"end":{"line":432,"column":7}},"123":{"start":{"line":425,"column":6},"end":{"line":430,"column":7}},"124":{"start":{"line":426,"column":8},"end":{"line":426,"column":35}},"125":{"start":{"line":428,"column":8},"end":{"line":428,"column":24}},"126":{"start":{"line":429,"column":8},"end":{"line":429,"column":15}},"127":{"start":{"line":431,"column":6},"end":{"line":431,"column":28}},"128":{"start":{"line":435,"column":2},"end":{"line":437,"column":5}},"129":{"start":{"line":436,"column":4},"end":{"line":436,"column":20}},"130":{"start":{"line":439,"column":2},"end":{"line":439,"column":12}},"131":{"start":{"line":441,"column":2},"end":{"line":441,"column":13}},"132":{"start":{"line":455,"column":0},"end":{"line":467,"column":2}},"133":{"start":{"line":456,"column":2},"end":{"line":465,"column":4}},"134":{"start":{"line":466,"column":2},"end":{"line":466,"column":46}},"135":{"start":{"line":476,"column":0},"end":{"line":487,"column":2}},"136":{"start":{"line":477,"column":2},"end":{"line":485,"column":4}},"137":{"start":{"line":486,"column":2},"end":{"line":486,"column":46}},"138":{"start":{"line":497,"column":0},"end":{"line":509,"column":2}},"139":{"start":{"line":498,"column":2},"end":{"line":507,"column":4}},"140":{"start":{"line":508,"column":2},"end":{"line":508,"column":46}},"141":{"start":{"line":520,"column":0},"end":{"line":550,"column":2}},"142":{"start":{"line":521,"column":2},"end":{"line":529,"column":4}},"143":{"start":{"line":537,"column":2},"end":{"line":547,"column":3}},"144":{"start":{"line":538,"column":4},"end":{"line":546,"column":6}},"145":{"start":{"line":539,"column":6},"end":{"line":542,"column":7}},"146":{"start":{"line":540,"column":8},"end":{"line":540,"column":34}},"147":{"start":{"line":541,"column":8},"end":{"line":541,"column":15}},"148":{"start":{"line":543,"column":6},"end":{"line":543,"column":70}},"149":{"start":{"line":544,"column":6},"end":{"line":544,"column":46}},"150":{"start":{"line":545,"column":6},"end":{"line":545,"column":32}},"151":{"start":{"line":549,"column":2},"end":{"line":549,"column":60}},"152":{"start":{"line":559,"column":0},"end":{"line":571,"column":2}},"153":{"start":{"line":560,"column":2},"end":{"line":569,"column":4}},"154":{"start":{"line":570,"column":2},"end":{"line":570,"column":46}},"155":{"start":{"line":579,"column":0},"end":{"line":592,"column":2}},"156":{"start":{"line":580,"column":2},"end":{"line":580,"column":24}},"157":{"start":{"line":581,"column":2},"end":{"line":581,"column":33}},"158":{"start":{"line":583,"column":2},"end":{"line":589,"column":4}},"159":{"start":{"line":591,"column":2},"end":{"line":591,"column":37}},"160":{"start":{"line":595,"column":0},"end":{"line":608,"column":3}},"161":{"start":{"line":596,"column":2},"end":{"line":596,"column":50}},"162":{"start":{"line":597,"column":2},"end":{"line":607,"column":4}},"163":{"start":{"line":598,"column":4},"end":{"line":605,"column":5}},"164":{"start":{"line":600,"column":6},"end":{"line":604,"column":8}},"165":{"start":{"line":606,"column":4},"end":{"line":606,"column":43}},"166":{"start":{"line":627,"column":0},"end":{"line":639,"column":2}},"167":{"start":{"line":628,"column":2},"end":{"line":637,"column":4}},"168":{"start":{"line":638,"column":2},"end":{"line":638,"column":46}},"169":{"start":{"line":688,"column":0},"end":{"line":703,"column":2}},"170":{"start":{"line":689,"column":2},"end":{"line":692,"column":3}},"171":{"start":{"line":690,"column":4},"end":{"line":690,"column":22}},"172":{"start":{"line":691,"column":4},"end":{"line":691,"column":16}},"173":{"start":{"line":693,"column":2},"end":{"line":701,"column":4}},"174":{"start":{"line":702,"column":2},"end":{"line":702,"column":46}},"175":{"start":{"line":727,"column":0},"end":{"line":739,"column":2}},"176":{"start":{"line":728,"column":2},"end":{"line":737,"column":4}},"177":{"start":{"line":738,"column":2},"end":{"line":738,"column":46}},"178":{"start":{"line":749,"column":0},"end":{"line":762,"column":2}},"179":{"start":{"line":750,"column":2},"end":{"line":760,"column":4}},"180":{"start":{"line":761,"column":2},"end":{"line":761,"column":46}},"181":{"start":{"line":771,"column":0},"end":{"line":783,"column":2}},"182":{"start":{"line":772,"column":2},"end":{"line":781,"column":4}},"183":{"start":{"line":782,"column":2},"end":{"line":782,"column":46}},"184":{"start":{"line":792,"column":0},"end":{"line":804,"column":2}},"185":{"start":{"line":793,"column":2},"end":{"line":802,"column":4}},"186":{"start":{"line":803,"column":2},"end":{"line":803,"column":46}},"187":{"start":{"line":816,"column":0},"end":{"line":830,"column":2}},"188":{"start":{"line":817,"column":2},"end":{"line":828,"column":4}},"189":{"start":{"line":829,"column":2},"end":{"line":829,"column":46}},"190":{"start":{"line":859,"column":0},"end":{"line":871,"column":2}},"191":{"start":{"line":860,"column":2},"end":{"line":869,"column":4}},"192":{"start":{"line":870,"column":2},"end":{"line":870,"column":46}},"193":{"start":{"line":893,"column":0},"end":{"line":905,"column":2}},"194":{"start":{"line":894,"column":2},"end":{"line":903,"column":4}},"195":{"start":{"line":904,"column":2},"end":{"line":904,"column":46}},"196":{"start":{"line":915,"column":0},"end":{"line":927,"column":2}},"197":{"start":{"line":916,"column":2},"end":{"line":925,"column":4}},"198":{"start":{"line":926,"column":2},"end":{"line":926,"column":46}},"199":{"start":{"line":929,"column":0},"end":{"line":929,"column":49}},"200":{"start":{"line":930,"column":0},"end":{"line":930,"column":43}},"201":{"start":{"line":945,"column":0},"end":{"line":985,"column":2}},"202":{"start":{"line":946,"column":2},"end":{"line":946,"column":20}},"203":{"start":{"line":950,"column":2},"end":{"line":956,"column":4}},"204":{"start":{"line":957,"column":2},"end":{"line":962,"column":4}},"205":{"start":{"line":961,"column":4},"end":{"line":961,"column":51}},"206":{"start":{"line":963,"column":2},"end":{"line":984,"column":4}},"207":{"start":{"line":966,"column":6},"end":{"line":981,"column":9}},"208":{"start":{"line":967,"column":8},"end":{"line":980,"column":9}},"209":{"start":{"line":968,"column":10},"end":{"line":968,"column":20}},"210":{"start":{"line":969,"column":15},"end":{"line":980,"column":9}},"211":{"start":{"line":971,"column":10},"end":{"line":971,"column":101}},"212":{"start":{"line":972,"column":10},"end":{"line":972,"column":48}},"213":{"start":{"line":973,"column":10},"end":{"line":973,"column":20}},"214":{"start":{"line":974,"column":15},"end":{"line":980,"column":9}},"215":{"start":{"line":975,"column":10},"end":{"line":975,"column":36}},"216":{"start":{"line":976,"column":15},"end":{"line":980,"column":9}},"217":{"start":{"line":977,"column":10},"end":{"line":977,"column":59}},"218":{"start":{"line":979,"column":10},"end":{"line":979,"column":86}},"219":{"start":{"line":993,"column":0},"end":{"line":1002,"column":1}},"220":{"start":{"line":994,"column":2},"end":{"line":996,"column":5}},"221":{"start":{"line":995,"column":4},"end":{"line":995,"column":50}},"222":{"start":{"line":997,"column":2},"end":{"line":1001,"column":3}},"223":{"start":{"line":998,"column":4},"end":{"line":998,"column":17}},"224":{"start":{"line":1000,"column":4},"end":{"line":1000,"column":16}},"225":{"start":{"line":1010,"column":0},"end":{"line":1019,"column":1}},"226":{"start":{"line":1011,"column":2},"end":{"line":1013,"column":5}},"227":{"start":{"line":1012,"column":4},"end":{"line":1012,"column":43}},"228":{"start":{"line":1014,"column":2},"end":{"line":1018,"column":3}},"229":{"start":{"line":1015,"column":4},"end":{"line":1015,"column":16}},"230":{"start":{"line":1017,"column":4},"end":{"line":1017,"column":17}},"231":{"start":{"line":1032,"column":0},"end":{"line":1095,"column":2}},"232":{"start":{"line":1033,"column":2},"end":{"line":1033,"column":20}},"233":{"start":{"line":1035,"column":2},"end":{"line":1094,"column":4}},"234":{"start":{"line":1039,"column":8},"end":{"line":1049,"column":11}},"235":{"start":{"line":1040,"column":10},"end":{"line":1042,"column":11}},"236":{"start":{"line":1041,"column":12},"end":{"line":1041,"column":29}},"237":{"start":{"line":1043,"column":10},"end":{"line":1047,"column":11}},"238":{"start":{"line":1044,"column":12},"end":{"line":1044,"column":98}},"239":{"start":{"line":1045,"column":12},"end":{"line":1045,"column":53}},"240":{"start":{"line":1046,"column":12},"end":{"line":1046,"column":29}},"241":{"start":{"line":1048,"column":10},"end":{"line":1048,"column":17}},"242":{"start":{"line":1053,"column":8},"end":{"line":1059,"column":10}},"243":{"start":{"line":1060,"column":8},"end":{"line":1065,"column":10}},"244":{"start":{"line":1064,"column":10},"end":{"line":1064,"column":57}},"245":{"start":{"line":1066,"column":8},"end":{"line":1085,"column":10}},"246":{"start":{"line":1069,"column":12},"end":{"line":1082,"column":15}},"247":{"start":{"line":1070,"column":14},"end":{"line":1081,"column":15}},"248":{"start":{"line":1071,"column":16},"end":{"line":1071,"column":26}},"249":{"start":{"line":1072,"column":21},"end":{"line":1081,"column":15}},"250":{"start":{"line":1074,"column":16},"end":{"line":1074,"column":109}},"251":{"start":{"line":1075,"column":16},"end":{"line":1075,"column":54}},"252":{"start":{"line":1076,"column":16},"end":{"line":1076,"column":26}},"253":{"start":{"line":1077,"column":21},"end":{"line":1081,"column":15}},"254":{"start":{"line":1078,"column":16},"end":{"line":1078,"column":36}},"255":{"start":{"line":1080,"column":16},"end":{"line":1080,"column":69}},"256":{"start":{"line":1089,"column":6},"end":{"line":1091,"column":7}},"257":{"start":{"line":1090,"column":8},"end":{"line":1090,"column":29}},"258":{"start":{"line":1092,"column":6},"end":{"line":1092,"column":29}},"259":{"start":{"line":1105,"column":0},"end":{"line":1118,"column":2}},"260":{"start":{"line":1106,"column":2},"end":{"line":1116,"column":4}},"261":{"start":{"line":1117,"column":2},"end":{"line":1117,"column":46}},"262":{"start":{"line":1130,"column":0},"end":{"line":1143,"column":2}},"263":{"start":{"line":1131,"column":2},"end":{"line":1141,"column":4}},"264":{"start":{"line":1142,"column":2},"end":{"line":1142,"column":46}},"265":{"start":{"line":1190,"column":0},"end":{"line":1207,"column":2}},"266":{"start":{"line":1191,"column":2},"end":{"line":1194,"column":3}},"267":{"start":{"line":1192,"column":4},"end":{"line":1192,"column":22}},"268":{"start":{"line":1193,"column":4},"end":{"line":1193,"column":16}},"269":{"start":{"line":1195,"column":2},"end":{"line":1205,"column":4}},"270":{"start":{"line":1206,"column":2},"end":{"line":1206,"column":46}},"271":{"start":{"line":1229,"column":0},"end":{"line":1241,"column":2}},"272":{"start":{"line":1230,"column":2},"end":{"line":1239,"column":4}},"273":{"start":{"line":1240,"column":2},"end":{"line":1240,"column":46}},"274":{"start":{"line":1253,"column":0},"end":{"line":1265,"column":2}},"275":{"start":{"line":1254,"column":2},"end":{"line":1263,"column":4}},"276":{"start":{"line":1264,"column":2},"end":{"line":1264,"column":46}},"277":{"start":{"line":1267,"column":0},"end":{"line":1267,"column":32}}},"branchMap":{"1":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":2},"end":{"line":63,"column":2}},{"start":{"line":63,"column":2},"end":{"line":63,"column":2}}]},"2":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":6},"end":{"line":63,"column":13}},{"start":{"line":63,"column":17},"end":{"line":63,"column":44}}]},"3":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":2},"end":{"line":106,"column":2}},{"start":{"line":106,"column":2},"end":{"line":106,"column":2}}]},"4":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":2},"end":{"line":143,"column":2}},{"start":{"line":143,"column":2},"end":{"line":143,"column":2}}]},"5":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":2},"end":{"line":148,"column":2}},{"start":{"line":148,"column":2},"end":{"line":148,"column":2}}]},"6":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":2},"end":{"line":156,"column":2}},{"start":{"line":156,"column":2},"end":{"line":156,"column":2}}]},"7":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":2},"end":{"line":191,"column":2}},{"start":{"line":191,"column":2},"end":{"line":191,"column":2}}]},"8":{"line":191,"type":"binary-expr","locations":[{"start":{"line":191,"column":6},"end":{"line":191,"column":15}},{"start":{"line":191,"column":19},"end":{"line":191,"column":47}}]},"9":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":2},"end":{"line":216,"column":2}},{"start":{"line":216,"column":2},"end":{"line":216,"column":2}}]},"10":{"line":244,"type":"if","locations":[{"start":{"line":244,"column":2},"end":{"line":244,"column":2}},{"start":{"line":244,"column":2},"end":{"line":244,"column":2}}]},"11":{"line":286,"type":"if","locations":[{"start":{"line":286,"column":2},"end":{"line":286,"column":2}},{"start":{"line":286,"column":2},"end":{"line":286,"column":2}}]},"12":{"line":290,"type":"if","locations":[{"start":{"line":290,"column":2},"end":{"line":290,"column":2}},{"start":{"line":290,"column":2},"end":{"line":290,"column":2}}]},"13":{"line":296,"type":"if","locations":[{"start":{"line":296,"column":2},"end":{"line":296,"column":2}},{"start":{"line":296,"column":2},"end":{"line":296,"column":2}}]},"14":{"line":301,"type":"cond-expr","locations":[{"start":{"line":301,"column":30},"end":{"line":301,"column":62}},{"start":{"line":301,"column":65},"end":{"line":301,"column":67}}]},"15":{"line":339,"type":"if","locations":[{"start":{"line":339,"column":2},"end":{"line":339,"column":2}},{"start":{"line":339,"column":2},"end":{"line":339,"column":2}}]},"16":{"line":350,"type":"cond-expr","locations":[{"start":{"line":350,"column":48},"end":{"line":350,"column":66}},{"start":{"line":350,"column":69},"end":{"line":350,"column":71}}]},"17":{"line":361,"type":"cond-expr","locations":[{"start":{"line":361,"column":51},"end":{"line":361,"column":55}},{"start":{"line":361,"column":58},"end":{"line":361,"column":63}}]},"18":{"line":401,"type":"if","locations":[{"start":{"line":401,"column":2},"end":{"line":401,"column":2}},{"start":{"line":401,"column":2},"end":{"line":401,"column":2}}]},"19":{"line":411,"type":"cond-expr","locations":[{"start":{"line":411,"column":53},"end":{"line":411,"column":76}},{"start":{"line":411,"column":79},"end":{"line":411,"column":81}}]},"20":{"line":421,"type":"cond-expr","locations":[{"start":{"line":421,"column":51},"end":{"line":421,"column":55}},{"start":{"line":421,"column":58},"end":{"line":421,"column":63}}]},"21":{"line":539,"type":"if","locations":[{"start":{"line":539,"column":6},"end":{"line":539,"column":6}},{"start":{"line":539,"column":6},"end":{"line":539,"column":6}}]},"22":{"line":580,"type":"binary-expr","locations":[{"start":{"line":580,"column":11},"end":{"line":580,"column":17}},{"start":{"line":580,"column":21},"end":{"line":580,"column":23}}]},"23":{"line":598,"type":"if","locations":[{"start":{"line":598,"column":4},"end":{"line":598,"column":4}},{"start":{"line":598,"column":4},"end":{"line":598,"column":4}}]},"24":{"line":598,"type":"binary-expr","locations":[{"start":{"line":598,"column":8},"end":{"line":598,"column":30}},{"start":{"line":598,"column":34},"end":{"line":598,"column":55}}]},"25":{"line":598,"type":"binary-expr","locations":[{"start":{"line":598,"column":10},"end":{"line":598,"column":16}},{"start":{"line":598,"column":20},"end":{"line":598,"column":22}}]},"26":{"line":689,"type":"if","locations":[{"start":{"line":689,"column":2},"end":{"line":689,"column":2}},{"start":{"line":689,"column":2},"end":{"line":689,"column":2}}]},"27":{"line":689,"type":"binary-expr","locations":[{"start":{"line":689,"column":6},"end":{"line":689,"column":34}},{"start":{"line":689,"column":38},"end":{"line":689,"column":47}}]},"28":{"line":967,"type":"if","locations":[{"start":{"line":967,"column":8},"end":{"line":967,"column":8}},{"start":{"line":967,"column":8},"end":{"line":967,"column":8}}]},"29":{"line":969,"type":"if","locations":[{"start":{"line":969,"column":15},"end":{"line":969,"column":15}},{"start":{"line":969,"column":15},"end":{"line":969,"column":15}}]},"30":{"line":969,"type":"binary-expr","locations":[{"start":{"line":969,"column":19},"end":{"line":969,"column":53}},{"start":{"line":969,"column":57},"end":{"line":969,"column":92}}]},"31":{"line":974,"type":"if","locations":[{"start":{"line":974,"column":15},"end":{"line":974,"column":15}},{"start":{"line":974,"column":15},"end":{"line":974,"column":15}}]},"32":{"line":974,"type":"binary-expr","locations":[{"start":{"line":974,"column":19},"end":{"line":974,"column":51}},{"start":{"line":974,"column":55},"end":{"line":974,"column":91}}]},"33":{"line":976,"type":"if","locations":[{"start":{"line":976,"column":15},"end":{"line":976,"column":15}},{"start":{"line":976,"column":15},"end":{"line":976,"column":15}}]},"34":{"line":997,"type":"if","locations":[{"start":{"line":997,"column":2},"end":{"line":997,"column":2}},{"start":{"line":997,"column":2},"end":{"line":997,"column":2}}]},"35":{"line":1014,"type":"if","locations":[{"start":{"line":1014,"column":2},"end":{"line":1014,"column":2}},{"start":{"line":1014,"column":2},"end":{"line":1014,"column":2}}]},"36":{"line":1040,"type":"if","locations":[{"start":{"line":1040,"column":10},"end":{"line":1040,"column":10}},{"start":{"line":1040,"column":10},"end":{"line":1040,"column":10}}]},"37":{"line":1043,"type":"if","locations":[{"start":{"line":1043,"column":10},"end":{"line":1043,"column":10}},{"start":{"line":1043,"column":10},"end":{"line":1043,"column":10}}]},"38":{"line":1070,"type":"if","locations":[{"start":{"line":1070,"column":14},"end":{"line":1070,"column":14}},{"start":{"line":1070,"column":14},"end":{"line":1070,"column":14}}]},"39":{"line":1072,"type":"if","locations":[{"start":{"line":1072,"column":21},"end":{"line":1072,"column":21}},{"start":{"line":1072,"column":21},"end":{"line":1072,"column":21}}]},"40":{"line":1077,"type":"if","locations":[{"start":{"line":1077,"column":21},"end":{"line":1077,"column":21}},{"start":{"line":1077,"column":21},"end":{"line":1077,"column":21}}]},"41":{"line":1089,"type":"if","locations":[{"start":{"line":1089,"column":6},"end":{"line":1089,"column":6}},{"start":{"line":1089,"column":6},"end":{"line":1089,"column":6}}]},"42":{"line":1191,"type":"if","locations":[{"start":{"line":1191,"column":2},"end":{"line":1191,"column":2}},{"start":{"line":1191,"column":2},"end":{"line":1191,"column":2}}]},"43":{"line":1191,"type":"binary-expr","locations":[{"start":{"line":1191,"column":6},"end":{"line":1191,"column":34}},{"start":{"line":1191,"column":38},"end":{"line":1191,"column":47}}]}},"code":["/**"," * Copyright 2014 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const extend = require('extend');","const helper = require('../lib/helper');","const cookie = require('cookie');","const pick = require('object.pick');","const url = require('url');","const https = require('https');","const http = require('http');","const isStream = require('isstream');","const requestFactory = require('../lib/requestwrapper');","const RecognizeStream = require('./recognize_stream');","const pkg = require('../package.json');","const util = require('util');","const BaseService = require('../lib/base_service');","const async = require('async');","","const PARAMS_ALLOWED = [","  'continuous',","  'max_alternatives',","  'timestamps',","  'word_confidence',","  'inactivity_timeout',","  'model',","  'content-type', // this is accepted in querystring by the service, but methods here all accept content_type and then set a header","  'interim_results',","  'keywords',","  'keywords_threshold',","  'word_alternatives_threshold',","  'profanity_filter',","  'smart_formatting',","  'customization_id',","  'speaker_labels'","];","","/**"," * @private"," * @param chunk"," * @return {*}"," */","function formatChunk(chunk) {","  // Convert the string into an array","  let result = chunk;","","  // Check if in the stream doesn't have","  // two results together and parse them","  if (!result || result.indexOf('}{') === -1) {","    return JSON.parse(result);","  }","","  // Check if we can parse the response","  try {","    result = '[' + result.replace(/}{/g, '},{') + ']';","    result = JSON.parse(result);","    return result[result.length - 1];","  } catch (e) {","    // if it fails, then this isn't valid json (or a concatenated list of valid json) - just return the original string","  }","","  return result;","}","","/**"," * Speech Recognition API Wrapper"," * @constructor"," * @param {Object} options"," */","function SpeechToTextV1(options) {","  BaseService.call(this, options);","}","","util.inherits(SpeechToTextV1, BaseService);","SpeechToTextV1.prototype.name = 'speech_to_text';","SpeechToTextV1.prototype.version = 'v1';","SpeechToTextV1.URL = 'https://stream.watsonplatform.net/speech-to-text/api';","","/**"," * Registers a callback URL with the service for use with subsequent asynchronous recognition requests."," * The service attempts to register, or white-list, the callback URL if it is not already registered by sending a GET"," * request to the callback URL."," *"," * @param {object} params - The parameters"," * @param {string} params.callback_url - A URL to which callback notifications are to be sent"," * @param {string} [params.user_secret] - A user-specified string that the service uses to generate the HMAC-SHA1 signature that it sends via the X-Callback-Signature header"," * @param {Function} callback"," * @returns {ReadableStream|undefined}"," */","SpeechToTextV1.prototype.registerCallback = function(params, callback) {","  const missingParams = helper.getMissingParams(params, ['callback_url']);","  if (missingParams) {","    callback(missingParams);","    return;","  }","","  const parameters = {","    requiredParams: ['callback_url'],","    options: {","      method: 'POST',","      url: '/v1/register_callback',","      qs: pick(params, ['callback_url', 'user_secret']),","      json: true","    },","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Creates a job for a new asynchronous recognition request."," * The job is owned by the user whose service credentials are used to create it."," * How you learn the status and results of a job depends on the parameters you include with the job creation request."," *"," * @param {object} params - The parameters"," * @param {Stream}  params.audio - Audio to be recognized"," * @param {string} params.content_type - The Content-type e.g. audio/l16; rate=48000"," * @param {string} params.callback_url - A URL to which callback notifications are to be sent"," * @param {string|Array<string>} [params.events] - Events to trigger the callback for. Valid options are recognitions.started, recognitions.completed, recognitions.failed, recognitions.completed_with_results"," * @param {string} [params.user_token] - The token allows the user to maintain an internal mapping between jobs and notification events"," * @param {number} [params.results_ttl] - time to alive of the job result"," * @param {*} [params.*] - all params that .recognize() accepts may also be passed to createRecognitionJob()"," * @param {Function} callback"," * @returns {ReadableStream|undefined}"," */","SpeechToTextV1.prototype.createRecognitionJob = function(params, callback) {","  const missingParams = helper.getMissingParams(params, ['audio', 'content_type']);","  if (missingParams) {","    callback(missingParams);","    return;","  }","","  if (!isStream(params.audio)) {","    callback(new Error('audio is not a standard Node.js Stream'));","    return;","  }","","  const qs = pick(params, ['callback_url', 'events', 'user_token', 'results_ttl'].concat(PARAMS_ALLOWED));","","  // multiple events must be sent as a comma-separated string. Default behavior is multiple &event= params in the querystring","  if (Array.isArray(qs.events)) {","    qs.events = qs.events.join(',');","  }","","  const parameters = {","    options: {","      method: 'POST',","      url: '/v1/recognitions',","      headers: {","        'Content-Type': params.content_type","      },","      qs: qs,","      json: true","    },","    defaultOptions: this._options","  };","","  return params.audio","    .on('response', function(response) {","      // Replace content-type","      response.headers['content-type'] = params.content_type;","    })","    .pipe(requestFactory(parameters, callback));","};","","/**"," * Returns the status and ID of all outstanding jobs associated with the service credentials with which it is called."," * The method also returns the creation and update times of each job, and, if a job was created with a callback URL"," * and a user token, the user token for the job."," *"," * @param {Object} [params]"," * @param {Function} callback"," * @returns {ReadableStream|undefined}"," */","SpeechToTextV1.prototype.getRecognitionJobs = function(params, callback) {","  if (!callback && typeof params === 'function') {","    callback = params;","  }","  const parameters = {","    options: {","      method: 'GET',","      url: '/v1/recognitions',","      json: true","    },","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Returns the status and ID of all outstanding jobs associated with the service credentials with which it is called."," *"," * @param params"," * @param params.id - id of the Job"," * @param callback"," * @returns {ReadableStream|undefined}"," */","SpeechToTextV1.prototype.getRecognitionJob = function(params, callback) {","  const missingParams = helper.getMissingParams(params, ['id']);","  if (missingParams) {","    callback(missingParams);","    return;","  }","","  const parameters = {","    options: {","      method: 'GET',","      url: '/v1/recognitions/{id}',","      path: pick(params, ['id']),","      json: true","    },","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Deletes the specified job. You cannot delete a job that the service is actively processing."," *"," * @param params - The parameters"," * @param params.id - id of the Job"," * @param callback"," * @returns {ReadableStream|undefined}"," */","SpeechToTextV1.prototype.deleteRecognitionJob = function(params, callback) {","  const missingParams = helper.getMissingParams(params, ['id']);","  if (missingParams) {","    callback(missingParams);","    return;","  }","","  const parameters = {","    options: {","      method: 'DELETE',","      url: '/v1/recognitions/{id}',","      path: pick(params, ['id']),","      json: true","    },","    defaultOptions: this._options","  };","","  return requestFactory(parameters, callback);","};","","/**"," * Speech recognition for given audio using default model."," *"," * @param {Object} params The parameters"," * @param {Stream} params.audio - Audio to be recognized"," * @param {String} params.content_type - Content-type"," * @param {Boolean} [params.continuous],"," * @param {Number} [params.max_alternatives],"," * @param {Boolean} [params.timestamps],"," * @param {Boolean} [params.word_confidence],"," * @param {Number} [params.inactivity_timeout],"," * @param {String} [params.model],"," * @param {Boolean} [params.interim_results],"," * @param {Boolean} [params.keywords],"," * @param {Number} [params.keywords_threshold],"," * @param {Number} [params.word_alternatives_threshold],"," * @param {Boolean} [params.profanity_filter],"," * @param {Boolean} [params.smart_formatting],"," * @param {String} [params.customization_id],"," * @param {Boolean} [params.speaker_labels]"," * @param {function} callback"," */","SpeechToTextV1.prototype.recognize = function(params, callback) {","  const missingParams = helper.getMissingParams(params, ['audio', 'content_type']);","  if (missingParams) {","    callback(missingParams);","    return;","  }","  if (!isStream(params.audio)) {","    callback(new Error('audio is not a standard Node.js Stream'));","    return;","  }","","  const queryParams = pick(params, PARAMS_ALLOWED);","  if (Array.isArray(queryParams.keywords)) {","    queryParams.keywords = queryParams.keywords.join(',');","  }","","  let _url = '/v1';","  _url += params.session_id ? '/sessions/' + params.session_id : '';","  _url += '/recognize';","","  const parameters = {","    options: {","      method: 'POST',","      url: _url,","      headers: {","        'Content-Type': params.content_type","      },","      json: true,","      qs: queryParams","    },","    defaultOptions: this._options","  };","  return params.audio","    .on('response', function(response) {","      // Replace content-type","      response.headers['content-type'] = params.content_type;","    })","    .pipe(requestFactory(parameters, callback));","};","","/**"," * Creates a HTTP/HTTPS request to /recognize and keep the connection open."," * Sets 'Transfer-Encoding': 'chunked' and prepare the connection to send"," * chunk data."," *"," * @deprecated use createRecognizeStream instead"," *"," * @param {Object} params The parameters"," * @param {String} [params.content_type] - The Content-type e.g. audio/l16; rate=48000"," * @param {String} [params.session_id] - The session id"," * @param {function} callback"," */","SpeechToTextV1.prototype.recognizeLive = function(params, callback) {","  const missingParams = helper.getMissingParams(params, ['session_id', 'content_type', 'cookie_session']);","","  if (missingParams) {","    callback(missingParams);","    return;","  }","","  const serviceUrl = [this._options.url, '/v1/sessions/', params.session_id, '/recognize'].join('');","  const parts = url.parse(serviceUrl);","  const options = {","    agent: false,","    host: parts.hostname,","    port: parts.port,","    path: parts.pathname + (params.continuous ? '?continuous=true' : ''),","    method: 'POST',","    headers: extend(","      {","        'Transfer-Encoding': 'chunked',","        cookie: 'SESSIONID=' + params.cookie_session,","        'Content-type': params.content_type","      },","      this._options.headers","    )","  };","  const protocol = parts.protocol.match('http:') ? http : https;","  const recognize_req = protocol.request(options, function(result) {","    result.setEncoding('utf-8');","    let transcript = '';","","    result.on('data', function(chunk) {","      transcript += chunk;","    });","","    result.on('end', function() {","      try {","        transcript = formatChunk(transcript);","      } catch (e) {","        callback(transcript);","        return;","      }","      callback(null, transcript);","    });","  });","","  recognize_req.on('error', function(error) {","    callback(error);","  });","  return recognize_req;","};","","/**"," * Result observer for upcoming or ongoing recognition task in the session."," * This request has to be started before POST on recognize finishes,"," * otherwise it waits for the next recognition."," *"," * @deprecated use createRecognizeStream instead"," *"," * @param {Object} params The parameters"," * @param {String} [params.session_id] - Session used in the recognition"," * @param {boolean} [params.interim_results] - If true, interim results will be returned. Default: false"," * @param {Function} callback"," */","SpeechToTextV1.prototype.observeResult = function(params, callback) {","  const missingParams = helper.getMissingParams(params, ['session_id', 'cookie_session']);","  if (missingParams) {","    callback(missingParams);","    return;","  }","  const serviceUrl = [this._options.url, '/v1/sessions/', params.session_id, '/observe_result'].join('');","  const parts = url.parse(serviceUrl);","  const options = {","    agent: false,","    host: parts.hostname,","    port: parts.port,","    path: parts.pathname + (params.interim_results ? '?interim_results=true' : ''),","    method: 'GET',","    headers: extend(","      {","        cookie: 'SESSIONID=' + params.cookie_session,","        Accept: 'application/json'","      },","      this._options.headers","    )","  };","  const protocol = parts.protocol.match('http:') ? http : https;","  const req = protocol.request(options, function(result) {","    result.setEncoding('utf-8');","    result.on('data', function(chunk) {","      try {","        chunk = formatChunk(chunk);","      } catch (e) {","        callback(chunk);","        return;","      }","      callback(null, chunk);","    });","  });","","  req.on('error', function(error) {","    callback(error);","  });","","  req.end();","","  return req;","};","","/**"," * Get the state of the engine to check if recognize is available."," * This is the way to check if the session is ready to accept a new recognition task."," * The returned state has to be 'initialized' to be able to do recognize POST."," *"," * @deprecated use createRecognizeStream instead"," *"," * @param {Object} params The parameters"," * @param {String} [params.session_id] - Session used in the recognition"," * @param {Function} callback"," */","SpeechToTextV1.prototype.getRecognizeStatus = function(params, callback) {","  const parameters = {","    requiredParams: ['session_id'],","    options: {","      method: 'GET',","      url: '/v1/sessions/{session_id}/recognize',","      path: pick(params, ['session_id']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * List of models available."," *"," * @param {Object} params The parameters"," * @param {Function} callback"," * @return {ReadableStream|undefined}"," */","SpeechToTextV1.prototype.getModels = function(params, callback) {","  const parameters = {","    options: {","      method: 'GET',","      url: '/v1/models',","      path: params,","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Get information about a model based on the given model_id"," *"," * @param {Object} params The parameters"," * @param {String} params.model_id - The desired model"," * @param {Function} callback"," * @return {ReadableStream|undefined}"," */","SpeechToTextV1.prototype.getModel = function(params, callback) {","  const parameters = {","    requiredParams: ['model_id'],","    options: {","      method: 'GET',","      url: '/v1/models/{model_id}',","      path: pick(params, ['model_id']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Create a session"," * Set-cookie header is returned with a cookie that must be used for"," * each request using this session."," *"," * @param {Object} params The parameters"," * @param {string} params.model - The model to use during the session"," * @param {Function} callback"," */","SpeechToTextV1.prototype.createSession = function(params, callback) {","  const parameters = {","    options: {","      method: 'POST',","      url: '/v1/sessions',","      json: true,","      qs: params","    },","    defaultOptions: this._options","  };","","  /**","   * Add the cookie_session to the response","   * @private","   * @param cb","   * @return {Function}","   */","  function addSessionId(cb) {","    return function(error, body, response) {","      if (error) {","        cb(error, body, response);","        return;","      }","      const cookies = cookie.parse(response.headers['set-cookie'][0]);","      body.cookie_session = cookies.SESSIONID;","      cb(error, body, response);","    };","  }","","  return requestFactory(parameters, addSessionId(callback));","};","","/**"," * Deletes the specified session."," *"," * @param {Object} params The parameters"," * @param {String} params.session_id - Session id."," * @param {Function} callback"," */","SpeechToTextV1.prototype.deleteSession = function(params, callback) {","  const parameters = {","    requiredParams: ['session_id'],","    options: {","      method: 'DELETE',","      url: '/v1/sessions/{session_id}',","      json: true,","      path: pick(params, ['session_id'])","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Replaces recognizeLive & friends with a single 2-way stream over websockets"," *"," * @param {Object} params The parameters"," * @return {RecognizeStream}"," */","SpeechToTextV1.prototype.createRecognizeStream = function(params) {","  params = params || {};","  params.url = this._options.url;","","  params.headers = extend(","    {","      'user-agent': pkg.name + '-nodejs-' + pkg.version,","      authorization: this._options.headers.Authorization","    },","    params.headers","  );","","  return new RecognizeStream(params);","};","","// set up a warning message for the deprecated methods","['recognizeLive', 'observeResult'].forEach(function(name) {","  const original = SpeechToTextV1.prototype[name];","  SpeechToTextV1.prototype[name] = function deprecated(params) {","    if (!(params || {}).silent && !this._options.silent) {","      // eslint-disable-next-line no-console","      console.log(","        new Error(","          `The ${name}() method is deprecated and will be removed from a future version of the watson-developer-cloud SDK. Please use createRecognizeStream() instead.\\n(Set {silent: true} to hide this message.)`","        )","      );","    }","    return original.apply(this, arguments);","  };","});","","/**"," * Creates a new empty custom voice model"," *"," * Response looks like:"," *"," * ```json"," * {"," *   \"customization_id\": \"abc996ea-86ca-482e-b7ec-0f31c34e5ee9\""," * }"," * ```"," *"," * @param {Object} params The parameters"," * @param {String} params.base_model_name - The base language model, for example, en-US_BroadbandModel"," * @param {String} params.name - The customization name"," * @param {String} [params.description] - The customization description"," * @param {Function} callback"," */","SpeechToTextV1.prototype.createCustomization = function(params, callback) {","  const parameters = {","    requiredParams: ['base_model_name', 'name'],","    options: {","      method: 'POST',","      url: '/v1/customizations',","      body: pick(params, ['name', 'base_model_name', 'description']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * @typedef Word"," * @type {Object}"," * @property {String} word - The word as written"," * @property {String} translation - The phonetic or sounds-like translation for the word. A phonetic translation is based on the SSML format for representing the phonetic string of a word either as an IPA or IBM SPR translation. A sounds-like translation consists of one or more words that, when combined, sound like the word."," */","","/**"," * List all customizations"," *"," * Example response:"," ```json"," { customizations:","     [ { owner: '8a6f5bb1-5b2d-4a20-85a9-eaa421d25c88',","         base_model_name: 'en-US_BroadbandModel',","         customization_id: '6a7785a0-9665-11e6-a73a-0da9193a4475',","         created: '2016-10-20T01:35:00.346Z',","         name: 'IEEE-test',","         description: '',","         progress: 0,","         language: 'en-US',","         status: 'pending' },","       { owner: '8a6f5bb1-5b2d-4a20-85a9-eaa421d25c88',","         base_model_name: 'en-US_BroadbandModel',","         customization_id: '9e2f6bb0-9665-11e6-a73a-0da9193a4475',","         created: '2016-10-20T01:36:27.115Z',","         name: 'IEEE-test',","         description: '',","         progress: 0,","         language: 'en-US',","         status: 'ready' },","       { owner: '8a6f5bb1-5b2d-4a20-85a9-eaa421d25c88',","         base_model_name: 'en-US_BroadbandModel',","         customization_id: '6b194e70-9666-11e6-a73a-0da9193a4475',","         created: '2016-10-20T01:42:10.903Z',","         name: 'IEEE-test',","         description: '',","         progress: 100,","         language: 'en-US',","         status: 'available' } ] }",""," ```"," *"," * @param {Object} params The parameters"," * @param {String} [params.language] optional filter."," * @param {Function} callback"," */","SpeechToTextV1.prototype.getCustomizations = function(params, callback) {","  if (typeof params === 'function' && !callback) {","    callback = params;","    params = {};","  }","  const parameters = {","    options: {","      method: 'GET',","      url: '/v1/customizations/',","      qs: pick(params, ['language']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Get customization details"," *"," * Example response:"," *"," ```json"," { owner: '8a6f5bb1-5b2d-4a20-85a9-eaa421d25c88',","   base_model_name: 'en-US_BroadbandModel',","   customization_id: 'e695ad30-97c1-11e6-be92-bb627d4684b9',","   created: '2016-10-21T19:09:33.443Z',","   name: 'js-sdk-test-temporary',","   description: 'Temporary customization to test the JS SDK. Should be automatically deleted within a few minutes.',","   progress: 0,","   language: 'en-US',","   status: 'pending' }"," ```"," *"," *"," * @param {Object} params The parameters"," * @param {String} params.customization_id - The GUID of the custom language model"," * @param {Function} callback"," */","SpeechToTextV1.prototype.getCustomization = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id'],","    options: {","      method: 'GET',","      url: '/v1/customizations/{customization_id}',","      path: pick(params, ['customization_id']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Train a custom model."," *"," * @param {Object} params The parameters"," * @param {String} params.customization_id - The GUID of the custom language model"," * @param {String} [params.word_type_to_add=all] - set to 'user' to train the model only on new words that were added or modified by the user; the model is not trained on new words extracted from corpora."," * @param {Function} callback"," */","SpeechToTextV1.prototype.trainCustomization = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id'],","    options: {","      method: 'POST',","      url: '/v1/customizations/{customization_id}/train',","      path: pick(params, ['customization_id']),","      qs: pick(params, ['word_type_to_add']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Reset a custom model."," *"," * @param {Object} params The parameters"," * @param {String} params.customization_id - The GUID of the custom language model"," * @param {Function} callback"," */","SpeechToTextV1.prototype.resetCustomization = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id'],","    options: {","      method: 'POST',","      url: '/v1/customizations/{customization_id}/reset',","      path: pick(params, ['customization_id']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Delete a custom model."," *"," * @param {Object} params The parameters"," * @param {String} params.customization_id - The GUID of the custom language model"," * @param {Function} callback"," */","SpeechToTextV1.prototype.deleteCustomization = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id'],","    options: {","      method: 'DELETE',","      url: '/v1/customizations/{customization_id}',","      path: pick(params, ['customization_id']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Add a corpus to a custom model."," *"," * @param {Object} params The parameters"," * @param {String} params.customization_id - The GUID of the custom language model to which a corpus is to be added. You must make the request with the service credentials of the model's owner."," * @param {String} params.name - The name of the corpus that is to be added. The name cannot contain spaces and cannot be the string user, which is reserved by the service to denote custom words added or modified by the user."," * @param {Boolean} [parms.allow_overwrite=false] - Indicates whether the specified corpus is to overwrite an existing corpus with the same name. If a corpus with the same name already exists, the request fails unless allow_overwrite is set to true; by default, the parameter is false. The parameter has no effect if a corpus with the same name does not already exist."," * @param {String|Buffer|ReadStream} [params.corpus] - the text of the corpus - may be provided as a String, a Buffer, or a ReadableStream. A ReadableStream is recommended when reading a file from disk."," * @param {Function} callback"," */","SpeechToTextV1.prototype.addCorpus = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id', 'name', 'corpus'],","    originalParams: params,","    options: {","      method: 'POST', // shouldn't this be a PUT?","      url: '/v1/customizations/{customization_id}/corpora/{name}',","      path: pick(params, ['customization_id', 'name']),","      qs: pick(params, ['allow_overwrite']),","      body: params.corpus","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * List corpora"," *"," * Lists information about all corpora that have been added to the specified custom language model."," * The information includes the total number of words and out-of-vocabulary (OOV) words, name, and status of each corpus."," *"," * Example Result:"," ```json"," {","     \"corpora\": [{","         \"out_of_vocabulary_words\": 1,","         \"total_words\": 233,","         \"name\": \"corpus-1\",","         \"status\": \"analyzed\"","     }, {","         \"out_of_vocabulary_words\": 3,","         \"total_words\": 20,","         \"name\": \"corpus-2\",","         \"status\": \"being_processed\"","     }]"," }"," ```"," *"," * @param {Object} params The parameters"," * @param {String} params.customization_id - The GUID of the custom language model"," * @param {Function} callback"," */","SpeechToTextV1.prototype.getCorpora = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id'],","    options: {","      method: 'GET',","      url: '/v1/customizations/{customization_id}/corpora',","      path: pick(params, ['customization_id']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Get corpus details"," *"," * Example response:"," *"," ```json"," {","   \"name\": \"corpus-1\",","   \"total_words\": 100,","   \"out_of_vocabulary_words\": 5,","   \"status\": \"analyzed\""," }"," ```"," *"," *"," * @param {Object} params The parameters"," * @param {String} params.customization_id - The GUID of the custom language model"," * @param {String} params.name - The corpus name"," * @param {Function} callback"," */","SpeechToTextV1.prototype.getCorpus = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id', 'name'],","    options: {","      method: 'GET',","      url: '/v1/customizations/{customization_id}/corpora/{name}',","      path: pick(params, ['customization_id', 'name']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Delete a corpus."," *"," * @param {Object} params The parameters"," * @param {String} params.customization_id - The GUID of the custom language model"," * @param {String} params.name - The name of the corpus."," * @param {Function} callback"," */","SpeechToTextV1.prototype.deleteCorpus = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id', 'name'],","    options: {","      method: 'DELETE',","      url: '/v1/customizations/{customization_id}/corpora/{name}',","      path: pick(params, ['customization_id', 'name']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","SpeechToTextV1.ERR_NO_CORPORA = 'ERR_NO_CORPORA';","SpeechToTextV1.ERR_TIMEOUT = 'ERR_TIMEOUT';","","/**"," * Waits while a customization status is 'pending' or 'training', fires callback once the status is 'ready' or 'available'."," *"," * Note: the customization will remain in 'pending' status until at least one word corpus is added."," *"," * See http://www.ibm.com/watson/developercloud/speech-to-text/api/v1/#list_models for status details."," *"," * @param {Object} params The parameters"," * @param {String} params.customization_id - The GUID of the custom language model"," * @param {Number} [params.interval=5000] - (milliseconds) - how log to wait between status checks"," * @param {Number} [params.times=30] - maximum number of attempts"," * @param {Function} callback"," */","SpeechToTextV1.prototype.whenCustomizationReady = function(params, callback) {","  const self = this;","","  // check the customization status repeatedly until it's ready or available","","  const options = extend(","    {","      interval: 5000,","      times: 30","    },","    params","  );","  options.errorFilter = function(err) {","    // if it's a timeout error, then getCustomization is called again after params.interval","    // otherwise the error is passed back to the user","    // if the params.times limit is reached, the error will be passed to the user regardless","    return err.code === SpeechToTextV1.ERR_TIMEOUT;","  };","  async.retry(","    options,","    function(next) {","      self.getCustomization(params, function(err, customization) {","        if (err) {","          next(err);","        } else if (customization.status === 'pending' || customization.status === 'training') {","          // if the loop times out, async returns the last error, which will be this one.","          err = new Error('Customization is still pending, try increasing interval or times params');","          err.code = SpeechToTextV1.ERR_TIMEOUT;","          next(err);","        } else if (customization.status === 'ready' || customization.status === 'available') {","          next(null, customization);","        } else if (customization.status === 'failed') {","          next(new Error('Customization training failed'));","        } else {","          next(new Error('Unexpected customization status: ' + customization.status));","        }","      });","    },","    callback","  );","};","","/**"," * Check if there is a corpus that is still being processed"," * @private"," * @param corporaList"," * @return {boolean}"," */","function isProcessing(corporaList) {","  const recordsBeingProcessed = corporaList.corpora.filter(function(record) {","    return record['status'] === 'being_processed';","  });","  if (recordsBeingProcessed.length === 0) {","    return false;","  } else {","    return true;","  }","}","","/**"," * Check if corpora has been analyzed"," * @private"," * @param corporaList"," * @return {boolean}"," */","function isAnalyzed(corporaList) {","  const recordsAnalyzed = corporaList.corpora.filter(function(record) {","    return record['status'] === 'analyzed';","  });","  if (recordsAnalyzed.length === corporaList.corpora.length) {","    return true;","  } else {","    return false;","  }","}","/**"," * Waits while corpora analysis status is 'being_processes', fires callback once the status is 'analyzed'"," *"," * Note: the code will throw an error in case there in no corpus in the customization"," *"," *"," * @param {Object} params The parameters"," * @param {String} params.customization_id - The GUID of the custom language model"," * @param {Number} [params.interval=5000] - (milliseconds) - how long to wait between status checks"," * @param {Number} [params.times=30] - maximum number of attempts"," * @param {Function} callback"," */","SpeechToTextV1.prototype.whenCorporaAnalyzed = function(params, callback) {","  const self = this;","","  async.parallel(","    [","      // validate that it has at least one corpus","      function(next) {","        self.getCorpora(params, function(err, res) {","          if (err) {","            return next(err);","          }","          if (!res.corpora.length) {","            err = new Error('Customization has no corpa and therefore corpus cannot be analyzed');","            err.code = SpeechToTextV1.ERR_NO_CORPORA;","            return next(err);","          }","          next();","        });","      },","      // check the customization status repeatedly until it's available","      function(next) {","        const options = extend(","          {","            interval: 5000,","            times: 30","          },","          params","        );","        options.errorFilter = function(err) {","          // if it's a timeout error, then getCorpora is called again after params.interval","          // otherwise the error is passed back to the user","          // if the params.times limit is reached, the error will be passed to the user regardless","          return err.code === SpeechToTextV1.ERR_TIMEOUT;","        };","        async.retry(","          options,","          function(done) {","            self.getCorpora(params, function(err, corpora) {","              if (err) {","                done(err);","              } else if (isProcessing(corpora)) {","                // if the loop times out, async returns the last error, which will be this one.","                err = new Error('Corpora is still being processed, try increasing interval or times params');","                err.code = SpeechToTextV1.ERR_TIMEOUT;","                done(err);","              } else if (isAnalyzed(corpora)) {","                done(null, corpora);","              } else {","                done(new Error('Unexpected corpus analysis status'));","              }","            });","          },","          next","        );","      }","    ],","    function(err, res) {","      if (err) {","        return callback(err);","      }","      callback(null, res[1]); // callback with the final customization object","    }","  );","};","","/**"," * Add multiple custom words."," *"," * @param {Object} params The parameters"," * @param {String} params.customization_id - The GUID of the custom language model"," * @param {Array<Word>} params.words - Array of objects: [{word: String, sounds_like: [String, ...], display_as: String}, ...]"," * @param {Function} callback"," */","SpeechToTextV1.prototype.addWords = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id', 'words'],","    options: {","      method: 'POST',","      url: '/v1/customizations/{customization_id}/words',","      path: pick(params, ['customization_id']),","      body: pick(params, ['words']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Add a single custom word."," *"," * @param {Object} params The parameters"," * @param {String} params.customization_id - The GUID of the custom language model"," * @param {String} params.word - The custom word that is to be added to the custom model. Do not include spaces in the word. Use a - (dash) or _ (underscore) to connect the tokens of compound words."," * @param {Array<String>} params.sounds_like - An array of sounds-like pronunciations for the custom word."," * @param {String} [params.display_as] - An alternative spelling for the custom word when it appears in a transcript."," * @param {Function} callback"," */","SpeechToTextV1.prototype.addWord = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id', 'word', 'sounds_like'],","    options: {","      method: 'PUT',","      url: '/v1/customizations/{customization_id}/words/{word}',","      path: pick(params, ['customization_id', 'word']),","      body: pick(params, ['sounds_like', 'display_as']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * List all custom words"," *"," * Lists information about all custom words from a custom language model."," * You can list all words from the custom model's words resource, only custom words that were added or modified by the user, or only OOV words that were extracted from corpora."," *"," * Example response:"," ```json"," {","     \"words\": [","        {","           \"word\": \"hhonors\",","           \"sounds_like\": [\"hilton honors\",\"h honors\"],","           \"display_as\": \"HHonors\",","           \"source\": [\"corpus1\"]","        },","        {","           \"word\": \"ieee\",","           \"sounds_like\": [\"i triple e\"],","           \"display_as\": \"IEEE\",","           \"source\": [\"corpus1\",\"corpus2\"]","        },","        {","           \"word\": \"tomato\",","           \"sounds_like\": [\"tomatoh\",\"tomayto\"],","           \"display_as\": \"\",","           \"source\": [\"user\"]","        },","        {","           \"word\": \"$75.00\",","           \"sounds_like\": [\"75 dollars\"],","           \"display_as\": \"\",","           \"source\": [\"user\"],","           \"error\":\" Numbers are not allowed in sounds-like\"","        }","     ]","  }"," ```"," *"," * @param {Object} params The parameters"," * @param {String} params.customization_id - The GUID of the custom language model"," * @param {String} params.sort - +alphabetical|-alphabetical|+count|-count to order result in alphabetical oredering or count ordering."," * @param {String} [params.word_type=all] - all|user|corpora - user shows only custom words that were added or modified by the user; corpora shows only OOV that were extracted from corpora."," * @param {Function} callback"," */","SpeechToTextV1.prototype.getWords = function(params, callback) {","  if (typeof params === 'function' && !callback) {","    callback = params;","    params = {};","  }","  const parameters = {","    requiredParams: ['customization_id'],","    options: {","      method: 'GET',","      url: '/v1/customizations/{customization_id}/words',","      path: pick(params, ['customization_id']),","      qs: pick(params, ['word_type', 'sort']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Get a custom word"," *"," * Lists information about a custom word from a custom language model."," *"," * Example output:"," *"," * ```json"," {","    \"sounds_like\": [\"N. C. A. A.\",\"N. C. double A.\"],","    \"display_as\": \"NCAA\",","    \"source\": [\"corpus3\",\"user\"]"," }"," ```"," *"," * @param {Object} params The parameters"," * @param {String} params.customization_id - The GUID of the custom language model"," * @param {String} params.word - The custom word"," * @param {Function} callback"," */","SpeechToTextV1.prototype.getWord = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id', 'word'],","    options: {","      method: 'GET',","      url: '/v1/customizations/{customization_id}/words/{word}',","      path: pick(params, ['customization_id', 'word']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Delete a custom word"," *"," * Removing a custom word does not affect the custom model until you train the model with the Train a custom model method."," *"," * @param {Object} params The parameters"," * @param {String} params.customization_id - The GUID of the custom language model"," * @param {String} params.word - The custom word that is to be deleted."," * @param {Function} callback"," */","SpeechToTextV1.prototype.deleteWord = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id', 'word'],","    options: {","      method: 'DELETE',","      url: '/v1/customizations/{customization_id}/words/{word}',","      path: pick(params, ['customization_id', 'word']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","module.exports = SpeechToTextV1;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"34":1,"57":1,"59":0,"63":0,"64":0,"68":0,"69":0,"70":0,"71":0,"76":0,"84":1,"85":0,"88":1,"89":1,"90":1,"91":1,"104":1,"105":0,"106":0,"107":0,"108":0,"111":0,"122":0,"141":1,"142":0,"143":0,"144":0,"145":0,"148":0,"149":0,"150":0,"153":0,"156":0,"157":0,"160":0,"173":0,"176":0,"190":1,"191":0,"192":0,"194":0,"203":0,"214":1,"215":0,"216":0,"217":0,"218":0,"221":0,"231":0,"242":1,"243":0,"244":0,"245":0,"246":0,"249":0,"259":0,"284":1,"285":0,"286":0,"287":0,"288":0,"290":0,"291":0,"292":0,"295":0,"296":0,"297":0,"300":0,"301":0,"302":0,"304":0,"316":0,"319":0,"336":1,"337":0,"339":0,"340":0,"341":0,"344":0,"345":0,"346":0,"361":0,"362":0,"363":0,"364":0,"366":0,"367":0,"370":0,"371":0,"372":0,"374":0,"375":0,"377":0,"381":0,"382":0,"384":0,"399":1,"400":0,"401":0,"402":0,"403":0,"405":0,"406":0,"407":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"428":0,"429":0,"431":0,"435":0,"436":0,"439":0,"441":0,"455":1,"456":0,"466":0,"476":1,"477":0,"486":0,"497":1,"498":0,"508":0,"520":1,"521":0,"537":1,"538":0,"539":0,"540":0,"541":0,"543":0,"544":0,"545":0,"549":0,"559":1,"560":0,"570":0,"579":1,"580":0,"581":0,"583":0,"591":0,"595":1,"596":2,"597":2,"598":0,"600":0,"606":0,"627":1,"628":0,"638":0,"688":1,"689":0,"690":0,"691":0,"693":0,"702":0,"727":1,"728":0,"738":0,"749":1,"750":0,"761":0,"771":1,"772":0,"782":0,"792":1,"793":0,"803":0,"816":1,"817":0,"829":0,"859":1,"860":0,"870":0,"893":1,"894":0,"904":0,"915":1,"916":0,"926":0,"929":1,"930":1,"945":1,"946":0,"950":0,"957":0,"961":0,"963":0,"966":0,"967":0,"968":0,"969":0,"971":0,"972":0,"973":0,"974":0,"975":0,"976":0,"977":0,"979":0,"993":1,"994":0,"995":0,"997":0,"998":0,"1000":0,"1010":1,"1011":0,"1012":0,"1014":0,"1015":0,"1017":0,"1032":1,"1033":0,"1035":0,"1039":0,"1040":0,"1041":0,"1043":0,"1044":0,"1045":0,"1046":0,"1048":0,"1053":0,"1060":0,"1064":0,"1066":0,"1069":0,"1070":0,"1071":0,"1072":0,"1074":0,"1075":0,"1076":0,"1077":0,"1078":0,"1080":0,"1089":0,"1090":0,"1092":0,"1105":1,"1106":0,"1117":0,"1130":1,"1131":0,"1142":0,"1190":1,"1191":0,"1192":0,"1193":0,"1195":0,"1206":0,"1229":1,"1230":0,"1240":0,"1253":1,"1254":0,"1264":0,"1267":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/speech-to-text/recognize_stream.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/speech-to-text/recognize_stream.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":1,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1,"81":1,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":1,"94":0,"95":0,"96":0,"97":1,"98":0,"99":0,"100":0,"101":1,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":1,"109":1,"110":0,"111":0,"112":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"RecognizeStream","line":53,"loc":{"start":{"line":53,"column":0},"end":{"line":53,"column":34}}},"2":{"name":"(anonymous_2)","line":61,"loc":{"start":{"line":61,"column":39},"end":{"line":61,"column":50}}},"3":{"name":"(anonymous_3)","line":77,"loc":{"start":{"line":77,"column":9},"end":{"line":77,"column":23}}},"4":{"name":"(anonymous_4)","line":107,"loc":{"start":{"line":107,"column":20},"end":{"line":107,"column":31}}},"5":{"name":"(anonymous_5)","line":111,"loc":{"start":{"line":111,"column":27},"end":{"line":111,"column":38}}},"6":{"name":"(anonymous_6)","line":117,"loc":{"start":{"line":117,"column":19},"end":{"line":117,"column":35}}},"7":{"name":"(anonymous_7)","line":122,"loc":{"start":{"line":122,"column":23},"end":{"line":122,"column":34}}},"8":{"name":"(anonymous_8)","line":127,"loc":{"start":{"line":127,"column":24},"end":{"line":127,"column":36}}},"9":{"name":"emitError","line":141,"loc":{"start":{"line":141,"column":2},"end":{"line":141,"column":38}}},"10":{"name":"(anonymous_10)","line":151,"loc":{"start":{"line":151,"column":21},"end":{"line":151,"column":37}}},"11":{"name":"(anonymous_11)","line":220,"loc":{"start":{"line":220,"column":34},"end":{"line":220,"column":55}}},"12":{"name":"(anonymous_12)","line":225,"loc":{"start":{"line":225,"column":35},"end":{"line":225,"column":71}}},"13":{"name":"(anonymous_13)","line":237,"loc":{"start":{"line":237,"column":27},"end":{"line":237,"column":38}}},"14":{"name":"afterSend","line":246,"loc":{"start":{"line":246,"column":38},"end":{"line":246,"column":63}}},"15":{"name":"(anonymous_15)","line":256,"loc":{"start":{"line":256,"column":33},"end":{"line":256,"column":44}}},"16":{"name":"(anonymous_16)","line":269,"loc":{"start":{"line":269,"column":45},"end":{"line":269,"column":56}}},"17":{"name":"(anonymous_17)","line":288,"loc":{"start":{"line":288,"column":33},"end":{"line":288,"column":50}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":40}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":29}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":33}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":36}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":55}},"6":{"start":{"line":25,"column":0},"end":{"line":39,"column":2}},"7":{"start":{"line":41,"column":0},"end":{"line":41,"column":104}},"8":{"start":{"line":53,"column":0},"end":{"line":58,"column":1}},"9":{"start":{"line":54,"column":2},"end":{"line":54,"column":29}},"10":{"start":{"line":55,"column":2},"end":{"line":55,"column":25}},"11":{"start":{"line":56,"column":2},"end":{"line":56,"column":25}},"12":{"start":{"line":57,"column":2},"end":{"line":57,"column":27}},"13":{"start":{"line":59,"column":0},"end":{"line":59,"column":39}},"14":{"start":{"line":61,"column":0},"end":{"line":218,"column":2}},"15":{"start":{"line":62,"column":2},"end":{"line":62,"column":31}},"16":{"start":{"line":65,"column":2},"end":{"line":67,"column":3}},"17":{"start":{"line":66,"column":4},"end":{"line":66,"column":44}},"18":{"start":{"line":68,"column":2},"end":{"line":70,"column":3}},"19":{"start":{"line":69,"column":4},"end":{"line":69,"column":51}},"20":{"start":{"line":71,"column":2},"end":{"line":73,"column":3}},"21":{"start":{"line":72,"column":4},"end":{"line":72,"column":71}},"22":{"start":{"line":75,"column":2},"end":{"line":75,"column":101}},"23":{"start":{"line":76,"column":2},"end":{"line":80,"column":15}},"24":{"start":{"line":78,"column":6},"end":{"line":78,"column":108}},"25":{"start":{"line":82,"column":2},"end":{"line":82,"column":140}},"26":{"start":{"line":84,"column":2},"end":{"line":96,"column":4}},"27":{"start":{"line":98,"column":2},"end":{"line":98,"column":44}},"28":{"start":{"line":100,"column":2},"end":{"line":100,"column":20}},"29":{"start":{"line":104,"column":2},"end":{"line":104,"column":88}},"30":{"start":{"line":107,"column":2},"end":{"line":115,"column":5}},"31":{"start":{"line":108,"column":4},"end":{"line":114,"column":5}},"32":{"start":{"line":109,"column":6},"end":{"line":109,"column":55}},"33":{"start":{"line":111,"column":6},"end":{"line":113,"column":9}},"34":{"start":{"line":112,"column":8},"end":{"line":112,"column":57}},"35":{"start":{"line":117,"column":2},"end":{"line":120,"column":4}},"36":{"start":{"line":118,"column":4},"end":{"line":118,"column":27}},"37":{"start":{"line":119,"column":4},"end":{"line":119,"column":30}},"38":{"start":{"line":122,"column":2},"end":{"line":125,"column":4}},"39":{"start":{"line":123,"column":4},"end":{"line":123,"column":48}},"40":{"start":{"line":124,"column":4},"end":{"line":124,"column":25}},"41":{"start":{"line":127,"column":2},"end":{"line":136,"column":4}},"42":{"start":{"line":128,"column":4},"end":{"line":128,"column":27}},"43":{"start":{"line":129,"column":4},"end":{"line":129,"column":20}},"44":{"start":{"line":135,"column":4},"end":{"line":135,"column":41}},"45":{"start":{"line":141,"column":2},"end":{"line":149,"column":3}},"46":{"start":{"line":142,"column":4},"end":{"line":146,"column":5}},"47":{"start":{"line":143,"column":6},"end":{"line":143,"column":44}},"48":{"start":{"line":145,"column":6},"end":{"line":145,"column":27}},"49":{"start":{"line":147,"column":4},"end":{"line":147,"column":20}},"50":{"start":{"line":148,"column":4},"end":{"line":148,"column":28}},"51":{"start":{"line":151,"column":2},"end":{"line":215,"column":4}},"52":{"start":{"line":152,"column":4},"end":{"line":154,"column":5}},"53":{"start":{"line":153,"column":6},"end":{"line":153,"column":77}},"54":{"start":{"line":156,"column":4},"end":{"line":156,"column":13}},"55":{"start":{"line":157,"column":4},"end":{"line":161,"column":5}},"56":{"start":{"line":158,"column":6},"end":{"line":158,"column":36}},"57":{"start":{"line":160,"column":6},"end":{"line":160,"column":77}},"58":{"start":{"line":163,"column":4},"end":{"line":163,"column":27}},"59":{"start":{"line":164,"column":4},"end":{"line":167,"column":5}},"60":{"start":{"line":165,"column":6},"end":{"line":165,"column":35}},"61":{"start":{"line":166,"column":6},"end":{"line":166,"column":24}},"62":{"start":{"line":169,"column":4},"end":{"line":179,"column":5}},"63":{"start":{"line":171,"column":6},"end":{"line":177,"column":7}},"64":{"start":{"line":172,"column":8},"end":{"line":172,"column":30}},"65":{"start":{"line":173,"column":8},"end":{"line":173,"column":31}},"66":{"start":{"line":175,"column":8},"end":{"line":175,"column":31}},"67":{"start":{"line":176,"column":8},"end":{"line":176,"column":23}},"68":{"start":{"line":178,"column":6},"end":{"line":178,"column":24}},"69":{"start":{"line":181,"column":4},"end":{"line":198,"column":5}},"70":{"start":{"line":187,"column":6},"end":{"line":187,"column":33}},"71":{"start":{"line":189,"column":6},"end":{"line":196,"column":7}},"72":{"start":{"line":195,"column":8},"end":{"line":195,"column":70}},"73":{"start":{"line":197,"column":6},"end":{"line":197,"column":24}},"74":{"start":{"line":202,"column":4},"end":{"line":210,"column":5}},"75":{"start":{"line":208,"column":6},"end":{"line":208,"column":40}},"76":{"start":{"line":209,"column":6},"end":{"line":209,"column":24}},"77":{"start":{"line":212,"column":4},"end":{"line":214,"column":5}},"78":{"start":{"line":213,"column":6},"end":{"line":213,"column":59}},"79":{"start":{"line":217,"column":2},"end":{"line":217,"column":26}},"80":{"start":{"line":220,"column":0},"end":{"line":223,"column":2}},"81":{"start":{"line":225,"column":0},"end":{"line":242,"column":2}},"82":{"start":{"line":226,"column":2},"end":{"line":226,"column":20}},"83":{"start":{"line":227,"column":2},"end":{"line":241,"column":3}},"84":{"start":{"line":228,"column":4},"end":{"line":228,"column":28}},"85":{"start":{"line":229,"column":4},"end":{"line":229,"column":29}},"86":{"start":{"line":231,"column":4},"end":{"line":236,"column":5}},"87":{"start":{"line":232,"column":6},"end":{"line":234,"column":7}},"88":{"start":{"line":233,"column":8},"end":{"line":233,"column":77}},"89":{"start":{"line":235,"column":6},"end":{"line":235,"column":24}},"90":{"start":{"line":237,"column":4},"end":{"line":240,"column":7}},"91":{"start":{"line":238,"column":6},"end":{"line":238,"column":30}},"92":{"start":{"line":239,"column":6},"end":{"line":239,"column":31}},"93":{"start":{"line":246,"column":0},"end":{"line":254,"column":2}},"94":{"start":{"line":249,"column":2},"end":{"line":253,"column":3}},"95":{"start":{"line":250,"column":4},"end":{"line":250,"column":27}},"96":{"start":{"line":252,"column":4},"end":{"line":252,"column":52}},"97":{"start":{"line":256,"column":0},"end":{"line":260,"column":2}},"98":{"start":{"line":257,"column":2},"end":{"line":257,"column":24}},"99":{"start":{"line":258,"column":2},"end":{"line":258,"column":25}},"100":{"start":{"line":259,"column":2},"end":{"line":259,"column":22}},"101":{"start":{"line":269,"column":0},"end":{"line":280,"column":2}},"102":{"start":{"line":270,"column":2},"end":{"line":279,"column":3}},"103":{"start":{"line":271,"column":4},"end":{"line":271,"column":92}},"104":{"start":{"line":273,"column":4},"end":{"line":278,"column":7}},"105":{"start":{"line":274,"column":6},"end":{"line":276,"column":9}},"106":{"start":{"line":275,"column":8},"end":{"line":275,"column":81}},"107":{"start":{"line":277,"column":6},"end":{"line":277,"column":31}},"108":{"start":{"line":283,"column":0},"end":{"line":287,"column":2}},"109":{"start":{"line":288,"column":0},"end":{"line":291,"column":2}},"110":{"start":{"line":289,"column":2},"end":{"line":289,"column":47}},"111":{"start":{"line":290,"column":2},"end":{"line":290,"column":37}},"112":{"start":{"line":293,"column":0},"end":{"line":293,"column":33}}},"branchMap":{"1":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":2},"end":{"line":65,"column":2}},{"start":{"line":65,"column":2},"end":{"line":65,"column":2}}]},"2":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":6},"end":{"line":65,"column":19}},{"start":{"line":65,"column":23},"end":{"line":65,"column":47}}]},"3":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":2},"end":{"line":68,"column":2}},{"start":{"line":68,"column":2},"end":{"line":68,"column":2}}]},"4":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":26}},{"start":{"line":68,"column":30},"end":{"line":68,"column":54}}]},"5":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":2},"end":{"line":71,"column":2}},{"start":{"line":71,"column":2},"end":{"line":71,"column":2}}]},"6":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":6},"end":{"line":71,"column":33}},{"start":{"line":71,"column":37},"end":{"line":71,"column":74}}]},"7":{"line":78,"type":"cond-expr","locations":[{"start":{"line":78,"column":51},"end":{"line":78,"column":67}},{"start":{"line":78,"column":70},"end":{"line":78,"column":106}}]},"8":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":15},"end":{"line":82,"column":26}},{"start":{"line":82,"column":30},"end":{"line":82,"column":82}}]},"9":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":4},"end":{"line":108,"column":4}},{"start":{"line":108,"column":4},"end":{"line":108,"column":4}}]},"10":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":8},"end":{"line":108,"column":19}},{"start":{"line":108,"column":23},"end":{"line":108,"column":67}}]},"11":{"line":142,"type":"if","locations":[{"start":{"line":142,"column":4},"end":{"line":142,"column":4}},{"start":{"line":142,"column":4},"end":{"line":142,"column":4}}]},"12":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":4},"end":{"line":152,"column":4}},{"start":{"line":152,"column":4},"end":{"line":152,"column":4}}]},"13":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":4},"end":{"line":164,"column":4}},{"start":{"line":164,"column":4},"end":{"line":164,"column":4}}]},"14":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":4},"end":{"line":169,"column":4}},{"start":{"line":169,"column":4},"end":{"line":169,"column":4}}]},"15":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":6},"end":{"line":171,"column":6}},{"start":{"line":171,"column":6},"end":{"line":171,"column":6}}]},"16":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":4},"end":{"line":181,"column":4}},{"start":{"line":181,"column":4},"end":{"line":181,"column":4}}]},"17":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":6},"end":{"line":189,"column":6}},{"start":{"line":189,"column":6},"end":{"line":189,"column":6}}]},"18":{"line":189,"type":"binary-expr","locations":[{"start":{"line":189,"column":10},"end":{"line":189,"column":25}},{"start":{"line":189,"column":29},"end":{"line":189,"column":50}},{"start":{"line":189,"column":54},"end":{"line":189,"column":82}}]},"19":{"line":202,"type":"if","locations":[{"start":{"line":202,"column":4},"end":{"line":202,"column":4}},{"start":{"line":202,"column":4},"end":{"line":202,"column":4}}]},"20":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":4},"end":{"line":212,"column":4}},{"start":{"line":212,"column":4},"end":{"line":212,"column":4}}]},"21":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":2},"end":{"line":227,"column":2}},{"start":{"line":227,"column":2},"end":{"line":227,"column":2}}]},"22":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":4},"end":{"line":231,"column":4}},{"start":{"line":231,"column":4},"end":{"line":231,"column":4}}]},"23":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":6},"end":{"line":232,"column":6}},{"start":{"line":232,"column":6},"end":{"line":232,"column":6}}]},"24":{"line":249,"type":"if","locations":[{"start":{"line":249,"column":2},"end":{"line":249,"column":2}},{"start":{"line":249,"column":2},"end":{"line":249,"column":2}}]},"25":{"line":249,"type":"binary-expr","locations":[{"start":{"line":249,"column":37},"end":{"line":249,"column":70}},{"start":{"line":249,"column":74},"end":{"line":249,"column":75}}]},"26":{"line":270,"type":"if","locations":[{"start":{"line":270,"column":2},"end":{"line":270,"column":2}},{"start":{"line":270,"column":2},"end":{"line":270,"column":2}}]},"27":{"line":270,"type":"binary-expr","locations":[{"start":{"line":270,"column":6},"end":{"line":270,"column":17}},{"start":{"line":270,"column":21},"end":{"line":270,"column":40}},{"start":{"line":270,"column":44},"end":{"line":270,"column":72}},{"start":{"line":270,"column":76},"end":{"line":270,"column":112}}]}},"code":["/**"," * Copyright 2014 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const Duplex = require('stream').Duplex;","const util = require('util');","const extend = require('extend');","const pick = require('object.pick');","const W3CWebSocket = require('websocket').w3cwebsocket;","","const OPENING_MESSAGE_PARAMS_ALLOWED = [","  'continuous',","  'max_alternatives',","  'timestamps',","  'word_confidence',","  'inactivity_timeout',","  'content-type',","  'interim_results',","  'keywords',","  'keywords_threshold',","  'word_alternatives_threshold',","  'profanity_filter',","  'smart_formatting',","  'speaker_labels'","];","","const QUERY_PARAMS_ALLOWED = ['model', 'X-Watson-Learning-Opt-Out', 'watson-token', 'customization_id'];","","/**"," * pipe()-able Node.js Readable/Writeable stream - accepts binary audio and emits text in it's `data` events."," * Also emits `results` events with interim results and other data."," *"," * Cannot be instantiated directly, instead reated by calling #createRecognizeStream()"," *"," * Uses WebSockets under the hood. For audio with no recognizable speech, no `data` events are emitted."," * @param {Object} options"," * @constructor"," */","function RecognizeStream(options) {","  Duplex.call(this, options);","  this.options = options;","  this.listening = false;","  this.initialized = false;","}","util.inherits(RecognizeStream, Duplex);","","RecognizeStream.prototype.initialize = function() {","  const options = this.options;","","  // todo: apply these corrections to other methods (?)","  if (options.token && !options['watson-token']) {","    options['watson-token'] = options.token;","  }","  if (options.content_type && !options['content-type']) {","    options['content-type'] = options.content_type;","  }","  if (options['X-WDC-PL-OPT-OUT'] && !options['X-Watson-Learning-Opt-Out']) {","    options['X-Watson-Learning-Opt-Out'] = options['X-WDC-PL-OPT-OUT'];","  }","","  const queryParams = extend({ model: 'en-US_BroadbandModel' }, pick(options, QUERY_PARAMS_ALLOWED));","  const queryString = Object.keys(queryParams)","    .map(function(key) {","      return key + '=' + (key === 'watson-token' ? queryParams[key] : encodeURIComponent(queryParams[key])); // our server chokes if the token is correctly url-encoded","    })","    .join('&');","","  const url = (options.url || 'wss://stream.watsonplatform.net/speech-to-text/api').replace(/^http/, 'ws') + '/v1/recognize?' + queryString;","","  const openingMessage = extend(","    {","      action: 'start',","      'content-type': 'audio/wav',","      continuous: true,","      interim_results: true,","      word_confidence: true,","      timestamps: true,","      max_alternatives: 3,","      inactivity_timeout: 600","    },","    pick(options, OPENING_MESSAGE_PARAMS_ALLOWED)","  );","","  const closingMessage = { action: 'stop' };","","  const self = this;","","  // node params: requestUrl, protocols, origin, headers, extraRequestOptions","  // browser params: requestUrl, protocols (all others ignored)","  const socket = this.socket = new W3CWebSocket(url, null, null, options.headers, null);","","  // when the input stops, let the service know that we're done","  self.on('finish', function() {","    if (self.socket && self.socket.readyState === W3CWebSocket.OPEN) {","      self.socket.send(JSON.stringify(closingMessage));","    } else {","      self.once('connect', function() {","        self.socket.send(JSON.stringify(closingMessage));","      });","    }","  });","","  socket.onerror = function(error) {","    self.listening = false;","    self.emit('error', error);","  };","","  this.socket.onopen = function() {","    socket.send(JSON.stringify(openingMessage));","    self.emit('connect');","  };","","  this.socket.onclose = function(e) {","    self.listening = false;","    self.push(null);","    /**","     * @event RecognizeStream#close","     * @param {Number} reasonCode","     * @param {String} description","     */","    self.emit('close', e.code, e.reason);","  };","","  /**","   * @event RecognizeStream#error","   */","  function emitError(msg, frame, err) {","    if (err) {","      err.message = msg + ' ' + err.message;","    } else {","      err = new Error(msg);","    }","    err.raw = frame;","    self.emit('error', err);","  }","","  socket.onmessage = function(frame) {","    if (typeof frame.data !== 'string') {","      return emitError('Unexpected binary data received from server', frame);","    }","","    let data;","    try {","      data = JSON.parse(frame.data);","    } catch (jsonEx) {","      return emitError('Invalid JSON received from service:', frame, jsonEx);","    }","","    let recognized = false;","    if (data.error) {","      emitError(data.error, frame);","      recognized = true;","    }","","    if (data.state === 'listening') {","      // this is emitted both when the server is ready for audio, and after we send the close message to indicate that it's done processing","      if (!self.listening) {","        self.listening = true;","        self.emit('listening');","      } else {","        self.listening = false;","        socket.close();","      }","      recognized = true;","    }","","    if (data.results) {","      /**","       * Object with interim or final results, including possible alternatives. May have no results at all for empty audio files.","       * @event RecognizeStream#results","       * @param {Object} results","       */","      self.emit('results', data);","      // note: currently there is always either no entries or exactly 1 entry in the results array. However, this may change in the future.","      if (data.results[0] && data.results[0].final && data.results[0].alternatives) {","        /**","         * Finalized text","         * @event RecognizeStream#data","         * @param {String} transcript","         */","        self.push(data.results[0].alternatives[0].transcript, 'utf8'); // this is the \"data\" event that can be easily piped to other streams","      }","      recognized = true;","    }","","    // note: some messages will have both results and speaker_labels","    // this will cause them to be emitted twice - once for each event","    if (data.speaker_labels) {","      /**","       * Speaker labels","       * @event RecognizeStream#speaker_labels","       * @param {Object} speaker_labels","       */","      self.emit('speaker_labels', data);","      recognized = true;","    }","","    if (!recognized) {","      emitError('Unrecognised message from server', frame);","    }","  };","","  this.initialized = true;","};","","RecognizeStream.prototype._read = function() /* size*/ {","  // there's no easy way to control reads from the underlying library","  // so, the best we can do here is a no-op","};","","RecognizeStream.prototype._write = function(chunk, encoding, callback) {","  const self = this;","  if (self.listening) {","    self.socket.send(chunk);","    this.afterSend(callback);","  } else {","    if (!this.initialized) {","      if (!this.options['content-type']) {","        this.options['content-type'] = RecognizeStream.getContentType(chunk);","      }","      this.initialize();","    }","    this.once('listening', function() {","      self.socket.send(chunk);","      self.afterSend(callback);","    });","  }","};","","// flow control - don't ask for more data until we've finished what we have","// todo: see if this can be improved","RecognizeStream.prototype.afterSend = function afterSend(next) {","  // note: bufferedAmount is currently always 0","  // see https://github.com/theturtle32/WebSocket-Node/issues/243","  if (this.socket.bufferedAmount <= (this._writableState.highWaterMark || 0)) {","    process.nextTick(next);","  } else {","    setTimeout(this.afterSend.bind(this, next), 10);","  }","};","","RecognizeStream.prototype.stop = function() {","  this.emit('stopping');","  this.listening = false;","  this.socket.close();","};","","/**"," * Returns a Promise that resolves with Watson Transaction ID from the X-Transaction-ID header"," *"," * Works in Node.js but not in browsers (the W3C WebSocket API does not expose headers)"," *"," * @return Promise<String>"," */","RecognizeStream.prototype.getTransactionId = function() {","  if (this.socket && this.socket._client && this.socket._client.response && this.socket._client.response.headers) {","    return Promise.resolve(this.socket._client.response.headers['x-global-transaction-id']);","  } else {","    return new Promise((resolve, reject) => {","      this.on('connect', () => {","        resolve(this.socket._client.response.headers['x-global-transaction-id']);","      });","      this.on('error', reject);","    });","  }","};","","// quick/dumb way to determine content type from a supported file format","const headerToContentType = {","  fLaC: 'audio/flac',","  RIFF: 'audio/wav',","  OggS: 'audio/ogg; codecs=opus'","};","RecognizeStream.getContentType = function(buffer) {","  const header = buffer.slice(0, 4).toString();","  return headerToContentType[header];","};","","module.exports = RecognizeStream;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"25":1,"41":1,"53":1,"54":0,"55":0,"56":0,"57":0,"59":1,"61":1,"62":0,"65":0,"66":0,"68":0,"69":0,"71":0,"72":0,"75":0,"76":0,"78":0,"82":0,"84":0,"98":0,"100":0,"104":0,"107":0,"108":0,"109":0,"111":0,"112":0,"117":0,"118":0,"119":0,"122":0,"123":0,"124":0,"127":0,"128":0,"129":0,"135":0,"141":1,"142":0,"143":0,"145":0,"147":0,"148":0,"151":0,"152":0,"153":0,"156":0,"157":0,"158":0,"160":0,"163":0,"164":0,"165":0,"166":0,"169":0,"171":0,"172":0,"173":0,"175":0,"176":0,"178":0,"181":0,"187":0,"189":0,"195":0,"197":0,"202":0,"208":0,"209":0,"212":0,"213":0,"217":0,"220":1,"225":1,"226":0,"227":0,"228":0,"229":0,"231":0,"232":0,"233":0,"235":0,"237":0,"238":0,"239":0,"246":1,"249":0,"250":0,"252":0,"256":1,"257":0,"258":0,"259":0,"269":1,"270":0,"271":0,"273":0,"274":0,"275":0,"277":0,"283":1,"288":1,"289":0,"290":0,"293":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/text-to-speech/v1.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/text-to-speech/v1.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":1,"20":0,"21":0,"22":1,"23":0,"24":0,"25":1,"26":0,"27":0,"28":1,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":1,"41":0,"42":0,"43":1,"44":0,"45":0,"46":1,"47":0,"48":0,"49":1,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1,"56":0,"57":0,"58":1,"59":0,"60":0,"61":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"TextToSpeechV1","line":31,"loc":{"start":{"line":31,"column":0},"end":{"line":31,"column":33}}},"2":{"name":"(anonymous_2)","line":50,"loc":{"start":{"line":50,"column":38},"end":{"line":50,"column":65}}},"3":{"name":"(anonymous_3)","line":82,"loc":{"start":{"line":82,"column":34},"end":{"line":82,"column":61}}},"4":{"name":"(anonymous_4)","line":101,"loc":{"start":{"line":101,"column":33},"end":{"line":101,"column":60}}},"5":{"name":"(anonymous_5)","line":125,"loc":{"start":{"line":125,"column":41},"end":{"line":125,"column":68}}},"6":{"name":"(anonymous_6)","line":156,"loc":{"start":{"line":156,"column":47},"end":{"line":156,"column":74}}},"7":{"name":"(anonymous_7)","line":202,"loc":{"start":{"line":202,"column":47},"end":{"line":202,"column":74}}},"8":{"name":"(anonymous_8)","line":254,"loc":{"start":{"line":254,"column":45},"end":{"line":254,"column":72}}},"9":{"name":"(anonymous_9)","line":305,"loc":{"start":{"line":305,"column":44},"end":{"line":305,"column":71}}},"10":{"name":"(anonymous_10)","line":326,"loc":{"start":{"line":326,"column":47},"end":{"line":326,"column":74}}},"11":{"name":"(anonymous_11)","line":360,"loc":{"start":{"line":360,"column":36},"end":{"line":360,"column":63}}},"12":{"name":"(anonymous_12)","line":400,"loc":{"start":{"line":400,"column":35},"end":{"line":400,"column":62}}},"13":{"name":"(anonymous_13)","line":454,"loc":{"start":{"line":454,"column":36},"end":{"line":454,"column":63}}},"14":{"name":"(anonymous_14)","line":488,"loc":{"start":{"line":488,"column":35},"end":{"line":488,"column":62}}},"15":{"name":"(anonymous_15)","line":510,"loc":{"start":{"line":510,"column":38},"end":{"line":510,"column":65}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":36}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":33}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":56}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":29}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":51}},"6":{"start":{"line":31,"column":0},"end":{"line":33,"column":1}},"7":{"start":{"line":32,"column":2},"end":{"line":32,"column":34}},"8":{"start":{"line":34,"column":0},"end":{"line":34,"column":43}},"9":{"start":{"line":35,"column":0},"end":{"line":35,"column":49}},"10":{"start":{"line":36,"column":0},"end":{"line":36,"column":40}},"11":{"start":{"line":37,"column":0},"end":{"line":37,"column":76}},"12":{"start":{"line":50,"column":0},"end":{"line":72,"column":2}},"13":{"start":{"line":51,"column":2},"end":{"line":51,"column":64}},"14":{"start":{"line":53,"column":2},"end":{"line":70,"column":4}},"15":{"start":{"line":71,"column":2},"end":{"line":71,"column":46}},"16":{"start":{"line":82,"column":0},"end":{"line":92,"column":2}},"17":{"start":{"line":83,"column":2},"end":{"line":90,"column":4}},"18":{"start":{"line":91,"column":2},"end":{"line":91,"column":46}},"19":{"start":{"line":101,"column":0},"end":{"line":114,"column":2}},"20":{"start":{"line":102,"column":2},"end":{"line":112,"column":4}},"21":{"start":{"line":113,"column":2},"end":{"line":113,"column":46}},"22":{"start":{"line":125,"column":0},"end":{"line":137,"column":2}},"23":{"start":{"line":126,"column":2},"end":{"line":135,"column":4}},"24":{"start":{"line":136,"column":2},"end":{"line":136,"column":46}},"25":{"start":{"line":156,"column":0},"end":{"line":168,"column":2}},"26":{"start":{"line":157,"column":2},"end":{"line":166,"column":4}},"27":{"start":{"line":167,"column":2},"end":{"line":167,"column":46}},"28":{"start":{"line":202,"column":0},"end":{"line":215,"column":2}},"29":{"start":{"line":203,"column":2},"end":{"line":213,"column":4}},"30":{"start":{"line":214,"column":2},"end":{"line":214,"column":46}},"31":{"start":{"line":254,"column":0},"end":{"line":269,"column":2}},"32":{"start":{"line":255,"column":2},"end":{"line":258,"column":3}},"33":{"start":{"line":256,"column":4},"end":{"line":256,"column":22}},"34":{"start":{"line":257,"column":4},"end":{"line":257,"column":16}},"35":{"start":{"line":259,"column":2},"end":{"line":267,"column":4}},"36":{"start":{"line":268,"column":2},"end":{"line":268,"column":46}},"37":{"start":{"line":305,"column":0},"end":{"line":317,"column":2}},"38":{"start":{"line":306,"column":2},"end":{"line":315,"column":4}},"39":{"start":{"line":316,"column":2},"end":{"line":316,"column":46}},"40":{"start":{"line":326,"column":0},"end":{"line":338,"column":2}},"41":{"start":{"line":327,"column":2},"end":{"line":336,"column":4}},"42":{"start":{"line":337,"column":2},"end":{"line":337,"column":46}},"43":{"start":{"line":360,"column":0},"end":{"line":373,"column":2}},"44":{"start":{"line":361,"column":2},"end":{"line":371,"column":4}},"45":{"start":{"line":372,"column":2},"end":{"line":372,"column":46}},"46":{"start":{"line":400,"column":0},"end":{"line":413,"column":2}},"47":{"start":{"line":401,"column":2},"end":{"line":411,"column":4}},"48":{"start":{"line":412,"column":2},"end":{"line":412,"column":46}},"49":{"start":{"line":454,"column":0},"end":{"line":470,"column":2}},"50":{"start":{"line":455,"column":2},"end":{"line":458,"column":3}},"51":{"start":{"line":456,"column":4},"end":{"line":456,"column":22}},"52":{"start":{"line":457,"column":4},"end":{"line":457,"column":16}},"53":{"start":{"line":459,"column":2},"end":{"line":468,"column":4}},"54":{"start":{"line":469,"column":2},"end":{"line":469,"column":46}},"55":{"start":{"line":488,"column":0},"end":{"line":500,"column":2}},"56":{"start":{"line":489,"column":2},"end":{"line":498,"column":4}},"57":{"start":{"line":499,"column":2},"end":{"line":499,"column":46}},"58":{"start":{"line":510,"column":0},"end":{"line":522,"column":2}},"59":{"start":{"line":511,"column":2},"end":{"line":520,"column":4}},"60":{"start":{"line":521,"column":2},"end":{"line":521,"column":46}},"61":{"start":{"line":524,"column":0},"end":{"line":524,"column":32}}},"branchMap":{"1":{"line":255,"type":"if","locations":[{"start":{"line":255,"column":2},"end":{"line":255,"column":2}},{"start":{"line":255,"column":2},"end":{"line":255,"column":2}}]},"2":{"line":255,"type":"binary-expr","locations":[{"start":{"line":255,"column":6},"end":{"line":255,"column":34}},{"start":{"line":255,"column":38},"end":{"line":255,"column":47}}]},"3":{"line":455,"type":"if","locations":[{"start":{"line":455,"column":2},"end":{"line":455,"column":2}},{"start":{"line":455,"column":2},"end":{"line":455,"column":2}}]},"4":{"line":455,"type":"binary-expr","locations":[{"start":{"line":455,"column":6},"end":{"line":455,"column":34}},{"start":{"line":455,"column":38},"end":{"line":455,"column":47}}]}},"code":["/**"," * Copyright 2014 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const pick = require('object.pick');","const extend = require('extend');","const requestFactory = require('../lib/requestwrapper');","const util = require('util');","const BaseService = require('../lib/base_service');","","/**"," * Watson Text to Speech service"," *"," * @param {Object} options"," * @constructor"," */","function TextToSpeechV1(options) {","  BaseService.call(this, options);","}","util.inherits(TextToSpeechV1, BaseService);","TextToSpeechV1.prototype.name = 'text_to_speech';","TextToSpeechV1.prototype.version = 'v1';","TextToSpeechV1.URL = 'https://stream.watsonplatform.net/text-to-speech/api';","","/**"," * Streaming speech synthesis of the text in a query parameter"," *"," * @param {Object} params"," * @param {String} params.text"," * @param {String} [params.voice=en-US_MichaelVoice] - Call .voices() for a complete list"," * @param {String} [params.accept=audio/ogg;codecs=opus] - Supported formats are audio/ogg;codecs=opus, audio/wav, audio/flac, audio/l16, audio/basic"," * @param {Boolean} [params.X-Watson-Learning-Opt-Out]"," * @param {String} [params.customization_id]"," * @param {Function} callback"," */","TextToSpeechV1.prototype.synthesize = function(params, callback) {","  params = extend({ accept: 'audio/ogg; codecs=opus' }, params);","","  const parameters = {","    requiredParams: ['text'],","    options: {","      method: 'POST',","      url: '/v1/synthesize',","      body: JSON.stringify(pick(params, ['text'])),","      qs: pick(params, ['accept', 'voice', 'customization_id']),","      path: pick(params, ['text']),","      headers: extend(","        {","          'content-type': 'application/json'","        },","        pick(params, ['X-Watson-Learning-Opt-Out'])","      ),","      encoding: null","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","// todo: add websocket support","// http://www.ibm.com/watson/developercloud/text-to-speech/api/v1/?curl#www_synthesize12","","/**"," * Retrieves the voices available for speech synthesis"," * @param {Object} params"," * @param {Function} callback"," */","TextToSpeechV1.prototype.voices = function(params, callback) {","  const parameters = {","    options: {","      method: 'GET',","      url: '/v1/voices',","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Retrieves information about the specified voice"," *"," * @param {Object} params"," * @param {String} params.voice"," * @param {String} [params.customization_id]"," */","TextToSpeechV1.prototype.voice = function(params, callback) {","  const parameters = {","    requiredParams: ['voice'],","    options: {","      method: 'GET',","      url: '/v1/voices/{voice}',","      path: pick(params, ['voice']),","      qs: pick(params, ['customization_id']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Returns the phonetic pronunciation for the specified word."," *"," * @param {Object} params"," * @param {String} params.text - a single word"," * @param {String} [params.format=ipa] - Supported formats are ipa, spr for US English, or spr for other languages"," * @param {String} [params.voice] - Defaults to en-US_MichaelVoice unless a customization_id is specified. Do not specify both a voice and a customization_id"," * @param {String} [params.customization_id] - do not specify both a voice and a customization_id"," */","TextToSpeechV1.prototype.pronunciation = function(params, callback) {","  const parameters = {","    requiredParams: ['text'],","    options: {","      method: 'GET',","      url: '/v1/pronunciation',","      qs: pick(params, ['text', 'voice', 'format', 'customization_id']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Creates a new empty custom voice model"," *"," * Response looks like:"," *"," * ```json"," * {"," *   \"customization_id\": \"abc996ea-86ca-482e-b7ec-0f31c34e5ee9\""," * }"," * ```"," *"," * @param {Object} params"," * @param {String} params.name"," * @param {String} [params.language=en-US]"," * @param {String} [params.description]"," * @param {Function} callback"," */","TextToSpeechV1.prototype.createCustomization = function(params, callback) {","  const parameters = {","    requiredParams: ['name'],","    options: {","      method: 'POST',","      url: '/v1/customizations',","      body: pick(params, ['name', 'language', 'description']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * @typedef Word"," * @type {Object}"," * @property {String} word - the word as written"," * @property {String} translation - The phonetic or sounds-like translation for the word. A phonetic translation is based on the SSML format for representing the phonetic string of a word either as an IPA or IBM SPR translation. A sounds-like translation consists of one or more words that, when combined, sound like the word."," */","","/**"," * Update voice model"," *"," * Updates information for the specified custom voice model."," * You can update the metadata such as the name and description of the voice model."," * You can also update the words in the model and their translations."," * A custom model can contain no more than 20,000 entries."," * Only the owner of a custom voice model can use this method to update the model."," *"," * An example of params.words could be:"," *"," * ```json"," *  ["," *    {\"word\":\"NCAA\", \"translation\":\"N C double A\"},"," *    {\"word\":\"iPhone\", \"translation\":\"I phone\"}"," *  ]"," * ```"," *"," * @param {Object} params"," * @param {String} params.customization_id"," * @param {String} [params.name]"," * @param {String} [params.description]"," * @param {Array<Word>} params.words - Array of {word, translation} objects where translation is the phonetic or sounds-like translation for the word. A phonetic translation is based on the SSML format for representing the phonetic string of a word either as an IPA or IBM SPR translation. A sounds-like translation consists of one or more words that, when combined, sound like the word."," * @param {Function} callback"," */","TextToSpeechV1.prototype.updateCustomization = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id', 'words'],","    originalParams: params,","    options: {","      method: 'POST',","      url: '/v1/customizations/' + params.customization_id,","      body: pick(params, ['name', 'description', 'words']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * List custom voice models"," *"," * Lists metadata such as the name and description for all custom voice models that you own for all languages."," * Specify a language to list the voice models that you own for the specified language only."," *"," * Example response:"," *"," * ```json","{","  \"customizations\": [","    {","      \"owner\": \"53fd7517-af0d-849d-801b-6e042a5d2f22\",","      \"language\": \"en-US\",","      \"created\": 1461173032707,","      \"customization_id\": \"a4df11a9-7cf9-48e8-8319-08fb7c3b1aa8\",","      \"name\": \"Second cURL Test\",","      \"description\": \"Second customization test via cURL\",","      \"last_modified\": 1461173032707","    },","    {","      \"owner\": \"53fd7517-af0d-849d-801b-6e042a5d2f22\",","      \"language\": \"en-US\",","      \"created\": 1461173032106,","      \"customization_id\": \"53506a62-6861-41f5-9a44-352047edcf6f\",","      \"name\": \"First cURL Test Update\",","      \"description\": \"First customization test via cURL update\",","      \"last_modified\": 1461173033323","    }","  ]","}```"," *"," *"," * @param {Object} [params]"," * @param {String} [params.language] optional filter."," * @param {Function} callback"," */","TextToSpeechV1.prototype.getCustomizations = function(params, callback) {","  if (typeof params === 'function' && !callback) {","    callback = params;","    params = {};","  }","  const parameters = {","    options: {","      method: 'GET',","      url: '/v1/customizations/',","      qs: pick(params, ['language']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Get a custom voice model"," *"," * Lists all information about the specified custom voice model."," * In addition to metadata such as the name and description of the voice model, the output includes the words in the model and their translations as defined in the model."," * Only the owner of a custom voice model can use this method to query information about the model."," *"," * Example response:"," * ```json"," {","   \"words\": [","     {","       \"word\": \"NCAA\",","       \"translation\": \"N C double A\"","     },","     {","       \"word\": \"iPhone\",","       \"translation\": \"I phone\"","     }","   ],","   \"owner\": \"53fd7517-af0d-849d-801b-6e042a5d2f22\",","   \"created\": 1461173032106,","   \"language\": \"en-US\",","   \"last_modified\": 1461173033323,","   \"customization_id\": \"53506a62-6861-41f5-9a44-352047edcf6f\",","   \"name\": \"First cURL Test Update\",","   \"description\": \"First customization test via cURL update\""," }```"," *"," *"," * @param {Object} params"," * @param {String} params.customization_id"," * @param {Function} callback"," */","TextToSpeechV1.prototype.getCustomization = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id'],","    originalParams: params,","    options: {","      method: 'GET',","      url: '/v1/customizations/' + params.customization_id,","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Delete a custom voice model"," *"," * @param {Object} params"," * @param {String} params.customization_id"," * @param {Function} callback"," */","TextToSpeechV1.prototype.deleteCustomization = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id'],","    originalParams: params,","    options: {","      method: 'DELETE',","      url: '/v1/customizations/' + params.customization_id,","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Add words to a custom voice model"," *"," * Adds one or more words and their translations to the specified custom voice model."," * A custom model can contain no more than 20,000 entries."," *"," * An example of params.words could be:"," *"," * ```json"," *  ["," *    {\"word\":\"NCAA\", \"translation\":\"N C double A\"},"," *    {\"word\":\"iPhone\", \"translation\":\"I phone\"}"," *  ]"," * ```"," *"," * @param {Object} params"," * @param {String} params.customization_id"," * @param {Array<Word>} params.words - Array of {word, translation} objects where translation is the phonetic or sounds-like translation for the word. A phonetic translation is based on the SSML format for representing the phonetic string of a word either as an IPA or IBM SPR translation. A sounds-like translation consists of one or more words that, when combined, sound like the word."," * @param {Function} callback"," */","TextToSpeechV1.prototype.addWords = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id', 'words'],","    originalParams: params,","    options: {","      method: 'POST',","      url: '/v1/customizations/' + params.customization_id + '/words',","      body: pick(params, ['words']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Add a word to a custom voice model"," *"," * Adds a single word and its translation to the specified custom voice model."," * A custom model can contain no more than 20,000 entries."," *"," * An example call could be"," *"," * ```json"," *  myTextToSpeech.addWord({"," *      customization_id: '<model-id>',"," *      word: 'ACLs',"," *      translation: 'ackles'"," *    },"," *    function(err, res) {"," *      console.log(err, res);"," *   });"," * ```"," *"," * @param {Object} params"," * @param {String} params.customization_id"," * @param {String} params.word"," * @param {String} params.translation - the phonetic or sounds-like translation for the word. A phonetic translation is based on the SSML format for representing the phonetic string of a word either as an IPA or IBM SPR translation. A sounds-like translation consists of one or more words that, when combined, sound like the word."," * @param {Function} callback"," */","TextToSpeechV1.prototype.addWord = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id', 'word', 'translation'],","    originalParams: params,","    options: {","      method: 'PUT',","      url: '/v1/customizations/' + params.customization_id + '/words/' + params.word,","      body: pick(params, ['translation']),","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * List words"," *"," * Lists all of the words and their translations for the specified custom voice model."," * The output shows the translations as they are defined in the model."," *"," * Example response:"," *"," * ```json"," {","    \"words\": [","       {","          \"word\": \"NCAA\",","           \"translation\": \"N C double A\"","       },","       {","          \"word\": \"iPhone\",","          \"translation\": \"I phone\"","       },","       {","          \"word\": \"EEE\",","          \"translation\": \"<phoneme alphabet=\"ibm\" ph=\"tr1Ipxl.1i\"></phoneme>\"","       },","       {","          \"word\": \"IEEE\",","          \"translation\": \"<phoneme alphabet=\"ibm\" ph=\"1Y.tr1Ipxl.1i\"></phoneme>\"","       },","       {","          \"word\": \"ACLs\",","          \"translation\": \"ackles\"","       }","    ]"," }"," *  ```"," *"," * @param {Object} params"," * @param {String} params.customization_id"," * @param {Function} callback"," */","TextToSpeechV1.prototype.getWords = function(params, callback) {","  if (typeof params === 'function' && !callback) {","    callback = params;","    params = {};","  }","  const parameters = {","    requiredParams: ['customization_id'],","    originalParams: params,","    options: {","      method: 'GET',","      url: '/v1/customizations/' + params.customization_id + '/words',","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Get the translation for a single word from the specified custom model."," *"," * Example output:"," *"," * ```json","{","  \"translation\": \"ackles\"","}"," * ```"," *"," * @param {Object} params"," * @param {String} params.customization_id"," * @param {String} params.word"," * @param {Function} callback"," */","TextToSpeechV1.prototype.getWord = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id', 'word'],","    originalParams: params,","    options: {","      method: 'GET',","      url: '/v1/customizations/' + params.customization_id + '/words/' + params.word,","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Deletes a single word from the specified custom voice model."," *"," * @param {Object} params"," * @param {String} params.customization_id"," * @param {String} params.word"," * @param {Function} callback"," */","TextToSpeechV1.prototype.deleteWord = function(params, callback) {","  const parameters = {","    requiredParams: ['customization_id', 'word'],","    originalParams: params,","    options: {","      method: 'DELETE',","      url: '/v1/customizations/' + params.customization_id + '/words/' + params.word,","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","module.exports = TextToSpeechV1;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"31":1,"32":0,"34":1,"35":1,"36":1,"37":1,"50":1,"51":0,"53":0,"71":0,"82":1,"83":0,"91":0,"101":1,"102":0,"113":0,"125":1,"126":0,"136":0,"156":1,"157":0,"167":0,"202":1,"203":0,"214":0,"254":1,"255":0,"256":0,"257":0,"259":0,"268":0,"305":1,"306":0,"316":0,"326":1,"327":0,"337":0,"360":1,"361":0,"372":0,"400":1,"401":0,"412":0,"454":1,"455":0,"456":0,"457":0,"459":0,"469":0,"488":1,"489":0,"499":0,"510":1,"511":0,"521":0,"524":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/tone-analyzer/v3.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/tone-analyzer/v3.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":1,"12":1,"13":1,"14":1,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"ToneAnalyzerV3","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":33}}},"2":{"name":"(anonymous_2)","line":67,"loc":{"start":{"line":67,"column":32},"end":{"line":67,"column":59}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":33}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":36}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":56}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":29}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":51}},"6":{"start":{"line":30,"column":0},"end":{"line":38,"column":1}},"7":{"start":{"line":31,"column":2},"end":{"line":31,"column":34}},"8":{"start":{"line":33,"column":2},"end":{"line":35,"column":3}},"9":{"start":{"line":34,"column":4},"end":{"line":34,"column":86}},"10":{"start":{"line":37,"column":2},"end":{"line":37,"column":56}},"11":{"start":{"line":39,"column":0},"end":{"line":39,"column":43}},"12":{"start":{"line":40,"column":0},"end":{"line":40,"column":48}},"13":{"start":{"line":41,"column":0},"end":{"line":41,"column":40}},"14":{"start":{"line":42,"column":0},"end":{"line":42,"column":76}},"15":{"start":{"line":67,"column":0},"end":{"line":89,"column":2}},"16":{"start":{"line":68,"column":2},"end":{"line":71,"column":3}},"17":{"start":{"line":69,"column":4},"end":{"line":69,"column":61}},"18":{"start":{"line":70,"column":4},"end":{"line":70,"column":11}},"19":{"start":{"line":72,"column":2},"end":{"line":72,"column":65}},"20":{"start":{"line":73,"column":2},"end":{"line":86,"column":4}},"21":{"start":{"line":88,"column":2},"end":{"line":88,"column":46}},"22":{"start":{"line":91,"column":0},"end":{"line":91,"column":32}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":2},"end":{"line":33,"column":2}},{"start":{"line":33,"column":2},"end":{"line":33,"column":2}}]},"2":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":2},"end":{"line":68,"column":2}},{"start":{"line":68,"column":2},"end":{"line":68,"column":2}}]},"3":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":13}},{"start":{"line":68,"column":17},"end":{"line":68,"column":29}}]},"4":{"line":72,"type":"cond-expr","locations":[{"start":{"line":72,"column":38},"end":{"line":72,"column":49}},{"start":{"line":72,"column":52},"end":{"line":72,"column":64}}]}},"code":["/**"," * Copyright 2015 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const extend = require('extend');","const pick = require('object.pick');","const requestFactory = require('../lib/requestwrapper');","const util = require('util');","const BaseService = require('../lib/base_service');","","/**"," * Tone Analyzer"," * @param {Object} options"," * @constructor"," */","function ToneAnalyzerV3(options) {","  BaseService.call(this, options);","  // Check if 'version_date' was provided","  if (typeof this._options.version_date === 'undefined') {","    throw new Error('Argument error: version_date was not specified, use 2016-05-19');","  }","  // todo: confirm that the service wants version, not version_date","  this._options.qs.version = this._options.version_date;","}","util.inherits(ToneAnalyzerV3, BaseService);","ToneAnalyzerV3.prototype.name = 'tone_analyzer';","ToneAnalyzerV3.prototype.version = 'v3';","ToneAnalyzerV3.URL = 'https://gateway.watsonplatform.net/tone-analyzer/api';","","/**"," * Main API call. Returns the different tone dimensions of a text."," *"," * @param params: An object with a string 'text' element."," *"," * Additional arguments on `params` object are optional, they include:"," *"," * - `tones`: A Comma-separated list of tones. Only these will be computed"," *    in this API call. Allowed values are 'social', 'emotion', 'language'."," *    It defaults to 'all of them'."," * - `sentences`: A boolean, telling if sentence-level analysis (which is"," *    slower than just document-level) needs to be computed. It defaults"," *    to true."," * - `isHTML`: A boolean value telling that the `params.text` argument is"," *    to be trated as HTML contents. On HTML input, the services does"," *    cleanup of tags and performs the analysis on the text contents only."," *"," * @return upon success, the callback function is called with an object"," * containing the different tones (emotion, writing and social) analyzed."," *"," * @see the API docs for a the full documentation."," *"," */","ToneAnalyzerV3.prototype.tone = function(params, callback) {","  if (!params || !params.text) {","    callback(new Error('Missing required parameters: text'));","    return;","  }","  const contentType = params.isHTML ? 'text/html' : 'text/plain';","  const parameters = {","    options: {","      url: '/v3/tone',","      method: 'POST',","      body: params.text,","      qs: pick(params, ['tones', 'sentences'])","    },","    defaultOptions: extend(true, this._options, {","      headers: {","        accept: 'application/json',","        'content-type': contentType","      }","    })","  };","","  return requestFactory(parameters, callback);","};","","module.exports = ToneAnalyzerV3;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"30":1,"31":0,"33":0,"34":0,"37":0,"39":1,"40":1,"41":1,"42":1,"67":1,"68":0,"69":0,"70":0,"72":0,"73":0,"88":0,"91":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/tradeoff-analytics/v1.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/tradeoff-analytics/v1.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"TradeoffAnalyticsV1","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":38}}},"2":{"name":"(anonymous_2)","line":54,"loc":{"start":{"line":54,"column":41},"end":{"line":54,"column":68}}},"3":{"name":"(anonymous_3)","line":87,"loc":{"start":{"line":87,"column":39},"end":{"line":87,"column":66}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":56}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":36}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":29}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":51}},"5":{"start":{"line":29,"column":0},"end":{"line":31,"column":1}},"6":{"start":{"line":30,"column":2},"end":{"line":30,"column":34}},"7":{"start":{"line":32,"column":0},"end":{"line":32,"column":48}},"8":{"start":{"line":33,"column":0},"end":{"line":33,"column":58}},"9":{"start":{"line":34,"column":0},"end":{"line":34,"column":45}},"10":{"start":{"line":35,"column":0},"end":{"line":35,"column":86}},"11":{"start":{"line":54,"column":0},"end":{"line":78,"column":2}},"12":{"start":{"line":55,"column":2},"end":{"line":55,"column":24}},"13":{"start":{"line":56,"column":2},"end":{"line":56,"column":16}},"14":{"start":{"line":57,"column":2},"end":{"line":59,"column":3}},"15":{"start":{"line":58,"column":4},"end":{"line":58,"column":38}},"16":{"start":{"line":60,"column":2},"end":{"line":62,"column":3}},"17":{"start":{"line":61,"column":4},"end":{"line":61,"column":38}},"18":{"start":{"line":63,"column":2},"end":{"line":76,"column":4}},"19":{"start":{"line":77,"column":2},"end":{"line":77,"column":46}},"20":{"start":{"line":87,"column":0},"end":{"line":103,"column":2}},"21":{"start":{"line":88,"column":2},"end":{"line":88,"column":24}},"22":{"start":{"line":90,"column":2},"end":{"line":101,"column":4}},"23":{"start":{"line":102,"column":2},"end":{"line":102,"column":46}},"24":{"start":{"line":105,"column":0},"end":{"line":105,"column":37}}},"branchMap":{"1":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":11},"end":{"line":55,"column":17}},{"start":{"line":55,"column":21},"end":{"line":55,"column":23}}]},"2":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":2},"end":{"line":57,"column":2}},{"start":{"line":57,"column":2},"end":{"line":57,"column":2}}]},"3":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":2},"end":{"line":60,"column":2}},{"start":{"line":60,"column":2},"end":{"line":60,"column":2}}]},"4":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":11},"end":{"line":88,"column":17}},{"start":{"line":88,"column":21},"end":{"line":88,"column":23}}]}},"code":["/**"," * Copyright 2014 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const requestFactory = require('../lib/requestwrapper');","const omit = require('object.omit');","const util = require('util');","const BaseService = require('../lib/base_service');","","/**"," *"," * @param {Object} options"," * @constructor"," */","function TradeoffAnalyticsV1(options) {","  BaseService.call(this, options);","}","util.inherits(TradeoffAnalyticsV1, BaseService);","TradeoffAnalyticsV1.prototype.name = 'tradeoff_analytics';","TradeoffAnalyticsV1.prototype.version = 'v1';","TradeoffAnalyticsV1.URL = 'https://gateway.watsonplatform.net/tradeoff-analytics/api';","","/**"," * Returns a dilemma that contains the problem and a resolution."," * The problem contains a set of options and objectives."," * The resolution contains a set of optimal options,"," * their analytical characteristics, and representation on a 2D space."," *"," * @param  {Array}  params.columns List of possible objectives"," * @param  {String} params.subject Name of the decision problem"," * @param  {String} params.options A list of options. Typically, the rows in a"," *                                 table representation of your data"," * @param  {String} params.metadataHeader Value of the x-watson-metadata header to be forwarded"," * \t\t\t\t\t\t\t\t                        for analytics purposes"," * @param  {String} params.generate_visualization Boolean (default = true). if false, the algorithm"," *                                                will not create the \"map\" visualization, and will typically run much faster"," * @param  {String} params.find_preferable_options Boolean (default = false). if true the algorithm includes a refined subset of best candidate options"," * that will most likely satisfy the greatest number of users."," */","TradeoffAnalyticsV1.prototype.dilemmas = function(params, callback) {","  params = params || {};","  const qs = {};","  if (params.find_preferable_options) {","    qs.find_preferable_options = true;","  }","  if (params.generate_visualization === false) {","    qs.generate_visualization = false;","  }","  const parameters = {","    options: {","      method: 'POST',","      url: '/v1/dilemmas',","      body: omit(params, ['metadata_header', 'generate_visualization', 'find_preferable_options']),","      headers: {","        'x-watson-metadata': params.metadata_header","      },","      qs: qs,","      json: true","    },","    requiredParams: ['columns', 'subject', 'options'],","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","/**"," * Forward events from the Tradeoff Analytics widget to the service"," *"," * @param  {String} params - the array of events to forward to the service"," * @param  {String} params.metadataHeader Value of the x-watson-metadata header to be forwarded"," * \t\t\t\t\t\t\t\t   for analytics purposes"," */","TradeoffAnalyticsV1.prototype.events = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      method: 'POST',","      url: '/v1/events',","      body: omit(params, ['metadata_header', 'generate_visualization']),","      headers: {","        'x-watson-metadata': params.metadata_header","      },","      json: true","    },","    defaultOptions: this._options","  };","  return requestFactory(parameters, callback);","};","","module.exports = TradeoffAnalyticsV1;",""],"l":{"19":1,"20":1,"21":1,"22":1,"29":1,"30":0,"32":1,"33":1,"34":1,"35":1,"54":1,"55":0,"56":0,"57":0,"58":0,"60":0,"61":0,"63":0,"77":0,"87":1,"88":0,"90":0,"102":0,"105":1}},"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/visual-recognition/v3.js":{"path":"/home/travis/build/npmtest/node-npmtest-watson-developer-cloud/watson-developer-cloud/visual-recognition/v3.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":0,"58":1,"59":0,"60":1,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":1,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":1,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":1,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":1,"102":0,"103":0,"104":0,"105":0,"106":0,"107":1,"108":0,"109":0,"110":1,"111":0,"112":0,"113":1,"114":0,"115":0,"116":1,"117":0,"118":0,"119":0,"120":1,"121":0,"122":0,"123":0,"124":1,"125":0,"126":0,"127":0,"128":0,"129":1,"130":0,"131":0,"132":0,"133":1,"134":0,"135":0,"136":0,"137":0,"138":0,"139":1,"140":0,"141":0,"142":0,"143":1,"144":0,"145":0,"146":0,"147":1,"148":0,"149":0,"150":0,"151":1,"152":0,"153":0,"154":0,"155":1,"156":0,"157":0,"158":0,"159":1,"160":0,"161":0,"162":0,"163":1,"164":0,"165":0,"166":0,"167":0,"168":0,"169":1},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0,0,0,0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},"fnMap":{"1":{"name":"xor","line":36,"loc":{"start":{"line":36,"column":0},"end":{"line":36,"column":19}}},"2":{"name":"detectContentType","line":49,"loc":{"start":{"line":49,"column":0},"end":{"line":49,"column":35}}},"3":{"name":"fixupImageParam","line":73,"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":33}}},"4":{"name":"errorFormatter","line":99,"loc":{"start":{"line":99,"column":0},"end":{"line":99,"column":28}}},"5":{"name":"(anonymous_5)","line":100,"loc":{"start":{"line":100,"column":64},"end":{"line":100,"column":75}}},"6":{"name":"(anonymous_6)","line":101,"loc":{"start":{"line":101,"column":9},"end":{"line":101,"column":31}}},"7":{"name":"VisualRecognitionV3","line":131,"loc":{"start":{"line":131,"column":0},"end":{"line":131,"column":38}}},"8":{"name":"(anonymous_8)","line":154,"loc":{"start":{"line":154,"column":40},"end":{"line":154,"column":65}}},"9":{"name":"(anonymous_9)","line":170,"loc":{"start":{"line":170,"column":48},"end":{"line":170,"column":66}}},"10":{"name":"(anonymous_10)","line":192,"loc":{"start":{"line":192,"column":62},"end":{"line":192,"column":77}}},"11":{"name":"(anonymous_11)","line":205,"loc":{"start":{"line":205,"column":58},"end":{"line":205,"column":69}}},"12":{"name":"(anonymous_12)","line":255,"loc":{"start":{"line":255,"column":41},"end":{"line":255,"column":68}}},"13":{"name":"(anonymous_13)","line":351,"loc":{"start":{"line":351,"column":44},"end":{"line":351,"column":71}}},"14":{"name":"(anonymous_14)","line":440,"loc":{"start":{"line":440,"column":46},"end":{"line":440,"column":73}}},"15":{"name":"(anonymous_15)","line":523,"loc":{"start":{"line":523,"column":49},"end":{"line":523,"column":76}}},"16":{"name":"(anonymous_16)","line":526,"loc":{"start":{"line":526,"column":50},"end":{"line":526,"column":64}}},"17":{"name":"(anonymous_17)","line":577,"loc":{"start":{"line":577,"column":50},"end":{"line":577,"column":77}}},"18":{"name":"(anonymous_18)","line":580,"loc":{"start":{"line":580,"column":50},"end":{"line":580,"column":64}}},"19":{"name":"(anonymous_19)","line":619,"loc":{"start":{"line":619,"column":48},"end":{"line":619,"column":75}}},"20":{"name":"(anonymous_20)","line":654,"loc":{"start":{"line":654,"column":46},"end":{"line":654,"column":73}}},"21":{"name":"(anonymous_21)","line":676,"loc":{"start":{"line":676,"column":49},"end":{"line":676,"column":76}}},"22":{"name":"(anonymous_22)","line":709,"loc":{"start":{"line":709,"column":49},"end":{"line":709,"column":76}}},"23":{"name":"(anonymous_23)","line":742,"loc":{"start":{"line":742,"column":46},"end":{"line":742,"column":73}}},"24":{"name":"(anonymous_24)","line":775,"loc":{"start":{"line":775,"column":48},"end":{"line":775,"column":75}}},"25":{"name":"(anonymous_25)","line":799,"loc":{"start":{"line":799,"column":49},"end":{"line":799,"column":76}}},"26":{"name":"(anonymous_26)","line":841,"loc":{"start":{"line":841,"column":41},"end":{"line":841,"column":68}}},"27":{"name":"(anonymous_27)","line":888,"loc":{"start":{"line":888,"column":43},"end":{"line":888,"column":70}}},"28":{"name":"(anonymous_28)","line":919,"loc":{"start":{"line":919,"column":41},"end":{"line":919,"column":68}}},"29":{"name":"(anonymous_29)","line":944,"loc":{"start":{"line":944,"column":44},"end":{"line":944,"column":71}}},"30":{"name":"(anonymous_30)","line":970,"loc":{"start":{"line":970,"column":49},"end":{"line":970,"column":76}}},"31":{"name":"(anonymous_31)","line":1011,"loc":{"start":{"line":1011,"column":49},"end":{"line":1011,"column":76}}},"32":{"name":"(anonymous_32)","line":1036,"loc":{"start":{"line":1036,"column":52},"end":{"line":1036,"column":79}}},"33":{"name":"(anonymous_33)","line":1082,"loc":{"start":{"line":1082,"column":44},"end":{"line":1082,"column":71}}}},"statementMap":{"1":{"start":{"line":19,"column":0},"end":{"line":19,"column":33}},"2":{"start":{"line":20,"column":0},"end":{"line":20,"column":36}},"3":{"start":{"line":21,"column":0},"end":{"line":21,"column":37}},"4":{"start":{"line":22,"column":0},"end":{"line":22,"column":56}},"5":{"start":{"line":23,"column":0},"end":{"line":23,"column":29}},"6":{"start":{"line":24,"column":0},"end":{"line":24,"column":51}},"7":{"start":{"line":26,"column":0},"end":{"line":26,"column":46}},"8":{"start":{"line":36,"column":0},"end":{"line":38,"column":1}},"9":{"start":{"line":37,"column":2},"end":{"line":37,"column":31}},"10":{"start":{"line":49,"column":0},"end":{"line":64,"column":1}},"11":{"start":{"line":50,"column":2},"end":{"line":50,"column":42}},"12":{"start":{"line":51,"column":2},"end":{"line":63,"column":3}},"13":{"start":{"line":55,"column":6},"end":{"line":55,"column":31}},"14":{"start":{"line":57,"column":6},"end":{"line":57,"column":25}},"15":{"start":{"line":61,"column":6},"end":{"line":61,"column":26}},"16":{"start":{"line":73,"column":0},"end":{"line":90,"column":1}},"17":{"start":{"line":74,"column":2},"end":{"line":76,"column":3}},"18":{"start":{"line":75,"column":4},"end":{"line":75,"column":43}},"19":{"start":{"line":78,"column":2},"end":{"line":80,"column":3}},"20":{"start":{"line":79,"column":4},"end":{"line":79,"column":109}},"21":{"start":{"line":82,"column":2},"end":{"line":89,"column":3}},"22":{"start":{"line":83,"column":4},"end":{"line":88,"column":6}},"23":{"start":{"line":99,"column":0},"end":{"line":120,"column":1}},"24":{"start":{"line":100,"column":2},"end":{"line":100,"column":79}},"25":{"start":{"line":101,"column":2},"end":{"line":119,"column":4}},"26":{"start":{"line":102,"column":4},"end":{"line":118,"column":5}},"27":{"start":{"line":103,"column":6},"end":{"line":103,"column":28}},"28":{"start":{"line":105,"column":6},"end":{"line":117,"column":7}},"29":{"start":{"line":106,"column":8},"end":{"line":114,"column":9}},"30":{"start":{"line":107,"column":10},"end":{"line":113,"column":12}},"31":{"start":{"line":116,"column":8},"end":{"line":116,"column":30}},"32":{"start":{"line":131,"column":0},"end":{"line":138,"column":1}},"33":{"start":{"line":132,"column":2},"end":{"line":132,"column":34}},"34":{"start":{"line":134,"column":2},"end":{"line":136,"column":3}},"35":{"start":{"line":135,"column":4},"end":{"line":135,"column":86}},"36":{"start":{"line":137,"column":2},"end":{"line":137,"column":56}},"37":{"start":{"line":139,"column":0},"end":{"line":139,"column":48}},"38":{"start":{"line":140,"column":0},"end":{"line":140,"column":58}},"39":{"start":{"line":141,"column":0},"end":{"line":141,"column":45}},"40":{"start":{"line":142,"column":0},"end":{"line":142,"column":88}},"41":{"start":{"line":143,"column":0},"end":{"line":145,"column":2}},"42":{"start":{"line":154,"column":0},"end":{"line":161,"column":2}},"43":{"start":{"line":155,"column":2},"end":{"line":155,"column":35}},"44":{"start":{"line":156,"column":2},"end":{"line":159,"column":3}},"45":{"start":{"line":158,"column":4},"end":{"line":158,"column":84}},"46":{"start":{"line":158,"column":33},"end":{"line":158,"column":82}},"47":{"start":{"line":160,"column":2},"end":{"line":160,"column":40}},"48":{"start":{"line":170,"column":0},"end":{"line":182,"column":2}},"49":{"start":{"line":171,"column":2},"end":{"line":171,"column":54}},"50":{"start":{"line":172,"column":2},"end":{"line":172,"column":122}},"51":{"start":{"line":173,"column":2},"end":{"line":180,"column":3}},"52":{"start":{"line":174,"column":4},"end":{"line":176,"column":5}},"53":{"start":{"line":175,"column":6},"end":{"line":175,"column":88}},"54":{"start":{"line":179,"column":4},"end":{"line":179,"column":66}},"55":{"start":{"line":181,"column":2},"end":{"line":181,"column":17}},"56":{"start":{"line":192,"column":0},"end":{"line":199,"column":2}},"57":{"start":{"line":193,"column":2},"end":{"line":198,"column":4}},"58":{"start":{"line":205,"column":0},"end":{"line":207,"column":2}},"59":{"start":{"line":206,"column":2},"end":{"line":206,"column":94}},"60":{"start":{"line":255,"column":0},"end":{"line":305,"column":2}},"61":{"start":{"line":256,"column":2},"end":{"line":261,"column":3}},"62":{"start":{"line":257,"column":4},"end":{"line":257,"column":28}},"63":{"start":{"line":259,"column":4},"end":{"line":259,"column":16}},"64":{"start":{"line":260,"column":4},"end":{"line":260,"column":11}},"65":{"start":{"line":263,"column":2},"end":{"line":269,"column":4}},"66":{"start":{"line":271,"column":2},"end":{"line":271,"column":17}},"67":{"start":{"line":273,"column":2},"end":{"line":302,"column":3}},"68":{"start":{"line":274,"column":4},"end":{"line":290,"column":6}},"69":{"start":{"line":292,"column":4},"end":{"line":301,"column":6}},"70":{"start":{"line":304,"column":2},"end":{"line":304,"column":60}},"71":{"start":{"line":351,"column":0},"end":{"line":384,"column":2}},"72":{"start":{"line":352,"column":2},"end":{"line":357,"column":3}},"73":{"start":{"line":353,"column":4},"end":{"line":353,"column":28}},"74":{"start":{"line":355,"column":4},"end":{"line":355,"column":16}},"75":{"start":{"line":356,"column":4},"end":{"line":356,"column":11}},"76":{"start":{"line":359,"column":2},"end":{"line":359,"column":17}},"77":{"start":{"line":361,"column":2},"end":{"line":381,"column":3}},"78":{"start":{"line":362,"column":4},"end":{"line":370,"column":6}},"79":{"start":{"line":372,"column":4},"end":{"line":380,"column":6}},"80":{"start":{"line":383,"column":2},"end":{"line":383,"column":60}},"81":{"start":{"line":440,"column":0},"end":{"line":473,"column":2}},"82":{"start":{"line":441,"column":2},"end":{"line":446,"column":3}},"83":{"start":{"line":442,"column":4},"end":{"line":442,"column":28}},"84":{"start":{"line":444,"column":4},"end":{"line":444,"column":16}},"85":{"start":{"line":445,"column":4},"end":{"line":445,"column":11}},"86":{"start":{"line":448,"column":2},"end":{"line":448,"column":17}},"87":{"start":{"line":450,"column":2},"end":{"line":470,"column":3}},"88":{"start":{"line":451,"column":4},"end":{"line":459,"column":6}},"89":{"start":{"line":461,"column":4},"end":{"line":469,"column":6}},"90":{"start":{"line":472,"column":2},"end":{"line":472,"column":60}},"91":{"start":{"line":523,"column":0},"end":{"line":548,"column":2}},"92":{"start":{"line":524,"column":2},"end":{"line":524,"column":24}},"93":{"start":{"line":526,"column":2},"end":{"line":528,"column":5}},"94":{"start":{"line":527,"column":4},"end":{"line":527,"column":76}},"95":{"start":{"line":530,"column":2},"end":{"line":533,"column":3}},"96":{"start":{"line":531,"column":4},"end":{"line":531,"column":158}},"97":{"start":{"line":532,"column":4},"end":{"line":532,"column":11}},"98":{"start":{"line":535,"column":2},"end":{"line":535,"column":72}},"99":{"start":{"line":537,"column":2},"end":{"line":546,"column":4}},"100":{"start":{"line":547,"column":2},"end":{"line":547,"column":60}},"101":{"start":{"line":577,"column":0},"end":{"line":595,"column":2}},"102":{"start":{"line":578,"column":2},"end":{"line":578,"column":24}},"103":{"start":{"line":580,"column":2},"end":{"line":582,"column":5}},"104":{"start":{"line":581,"column":4},"end":{"line":581,"column":76}},"105":{"start":{"line":584,"column":2},"end":{"line":593,"column":4}},"106":{"start":{"line":594,"column":2},"end":{"line":594,"column":60}},"107":{"start":{"line":619,"column":0},"end":{"line":630,"column":2}},"108":{"start":{"line":620,"column":2},"end":{"line":628,"column":4}},"109":{"start":{"line":629,"column":2},"end":{"line":629,"column":60}},"110":{"start":{"line":654,"column":0},"end":{"line":666,"column":2}},"111":{"start":{"line":655,"column":2},"end":{"line":664,"column":4}},"112":{"start":{"line":665,"column":2},"end":{"line":665,"column":60}},"113":{"start":{"line":676,"column":0},"end":{"line":688,"column":2}},"114":{"start":{"line":677,"column":2},"end":{"line":686,"column":4}},"115":{"start":{"line":687,"column":2},"end":{"line":687,"column":60}},"116":{"start":{"line":709,"column":0},"end":{"line":723,"column":2}},"117":{"start":{"line":710,"column":2},"end":{"line":710,"column":24}},"118":{"start":{"line":712,"column":2},"end":{"line":721,"column":4}},"119":{"start":{"line":722,"column":2},"end":{"line":722,"column":60}},"120":{"start":{"line":742,"column":0},"end":{"line":756,"column":2}},"121":{"start":{"line":743,"column":2},"end":{"line":743,"column":24}},"122":{"start":{"line":745,"column":2},"end":{"line":754,"column":4}},"123":{"start":{"line":755,"column":2},"end":{"line":755,"column":60}},"124":{"start":{"line":775,"column":0},"end":{"line":789,"column":2}},"125":{"start":{"line":776,"column":2},"end":{"line":778,"column":3}},"126":{"start":{"line":777,"column":4},"end":{"line":777,"column":22}},"127":{"start":{"line":780,"column":2},"end":{"line":787,"column":4}},"128":{"start":{"line":788,"column":2},"end":{"line":788,"column":60}},"129":{"start":{"line":799,"column":0},"end":{"line":813,"column":2}},"130":{"start":{"line":800,"column":2},"end":{"line":800,"column":24}},"131":{"start":{"line":802,"column":2},"end":{"line":811,"column":4}},"132":{"start":{"line":812,"column":2},"end":{"line":812,"column":60}},"133":{"start":{"line":841,"column":0},"end":{"line":869,"column":2}},"134":{"start":{"line":842,"column":2},"end":{"line":842,"column":24}},"135":{"start":{"line":844,"column":2},"end":{"line":846,"column":3}},"136":{"start":{"line":845,"column":4},"end":{"line":845,"column":74}},"137":{"start":{"line":848,"column":2},"end":{"line":867,"column":4}},"138":{"start":{"line":868,"column":2},"end":{"line":868,"column":60}},"139":{"start":{"line":888,"column":0},"end":{"line":902,"column":2}},"140":{"start":{"line":889,"column":2},"end":{"line":889,"column":24}},"141":{"start":{"line":891,"column":2},"end":{"line":900,"column":4}},"142":{"start":{"line":901,"column":2},"end":{"line":901,"column":60}},"143":{"start":{"line":919,"column":0},"end":{"line":933,"column":2}},"144":{"start":{"line":920,"column":2},"end":{"line":920,"column":24}},"145":{"start":{"line":922,"column":2},"end":{"line":931,"column":4}},"146":{"start":{"line":932,"column":2},"end":{"line":932,"column":60}},"147":{"start":{"line":944,"column":0},"end":{"line":958,"column":2}},"148":{"start":{"line":945,"column":2},"end":{"line":945,"column":24}},"149":{"start":{"line":947,"column":2},"end":{"line":956,"column":4}},"150":{"start":{"line":957,"column":2},"end":{"line":957,"column":60}},"151":{"start":{"line":970,"column":0},"end":{"line":995,"column":2}},"152":{"start":{"line":971,"column":2},"end":{"line":971,"column":24}},"153":{"start":{"line":973,"column":2},"end":{"line":993,"column":4}},"154":{"start":{"line":994,"column":2},"end":{"line":994,"column":60}},"155":{"start":{"line":1011,"column":0},"end":{"line":1025,"column":2}},"156":{"start":{"line":1012,"column":2},"end":{"line":1012,"column":24}},"157":{"start":{"line":1014,"column":2},"end":{"line":1023,"column":4}},"158":{"start":{"line":1024,"column":2},"end":{"line":1024,"column":60}},"159":{"start":{"line":1036,"column":0},"end":{"line":1050,"column":2}},"160":{"start":{"line":1037,"column":2},"end":{"line":1037,"column":24}},"161":{"start":{"line":1039,"column":2},"end":{"line":1048,"column":4}},"162":{"start":{"line":1049,"column":2},"end":{"line":1049,"column":60}},"163":{"start":{"line":1082,"column":0},"end":{"line":1102,"column":2}},"164":{"start":{"line":1083,"column":2},"end":{"line":1083,"column":24}},"165":{"start":{"line":1085,"column":2},"end":{"line":1087,"column":3}},"166":{"start":{"line":1086,"column":4},"end":{"line":1086,"column":74}},"167":{"start":{"line":1089,"column":2},"end":{"line":1100,"column":4}},"168":{"start":{"line":1101,"column":2},"end":{"line":1101,"column":60}},"169":{"start":{"line":1104,"column":0},"end":{"line":1104,"column":37}}},"branchMap":{"1":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":10},"end":{"line":37,"column":11}},{"start":{"line":37,"column":15},"end":{"line":37,"column":16}},{"start":{"line":37,"column":21},"end":{"line":37,"column":30}}]},"2":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":23},"end":{"line":37,"column":24}},{"start":{"line":37,"column":28},"end":{"line":37,"column":29}}]},"3":{"line":51,"type":"switch","locations":[{"start":{"line":52,"column":4},"end":{"line":52,"column":20}},{"start":{"line":53,"column":4},"end":{"line":53,"column":20}},{"start":{"line":54,"column":4},"end":{"line":55,"column":31}},{"start":{"line":56,"column":4},"end":{"line":57,"column":25}},{"start":{"line":58,"column":4},"end":{"line":58,"column":20}},{"start":{"line":59,"column":4},"end":{"line":59,"column":20}},{"start":{"line":60,"column":4},"end":{"line":61,"column":26}}]},"4":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":2},"end":{"line":74,"column":2}},{"start":{"line":74,"column":2},"end":{"line":74,"column":2}}]},"5":{"line":74,"type":"binary-expr","locations":[{"start":{"line":74,"column":6},"end":{"line":74,"column":12}},{"start":{"line":74,"column":16},"end":{"line":74,"column":33}},{"start":{"line":74,"column":37},"end":{"line":74,"column":56}}]},"6":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":2},"end":{"line":78,"column":2}},{"start":{"line":78,"column":2},"end":{"line":78,"column":2}}]},"7":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":6},"end":{"line":78,"column":13}},{"start":{"line":78,"column":17},"end":{"line":78,"column":53}}]},"8":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":2},"end":{"line":82,"column":2}},{"start":{"line":82,"column":2},"end":{"line":82,"column":2}}]},"9":{"line":100,"type":"cond-expr","locations":[{"start":{"line":100,"column":46},"end":{"line":100,"column":48}},{"start":{"line":100,"column":64},"end":{"line":100,"column":77}}]},"10":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":4},"end":{"line":102,"column":4}},{"start":{"line":102,"column":4},"end":{"line":102,"column":4}}]},"11":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":6},"end":{"line":105,"column":6}},{"start":{"line":105,"column":6},"end":{"line":105,"column":6}}]},"12":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":8},"end":{"line":106,"column":8}},{"start":{"line":106,"column":8},"end":{"line":106,"column":8}}]},"13":{"line":110,"type":"cond-expr","locations":[{"start":{"line":110,"column":62},"end":{"line":110,"column":65}},{"start":{"line":110,"column":68},"end":{"line":110,"column":71}}]},"14":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":2},"end":{"line":134,"column":2}},{"start":{"line":134,"column":2},"end":{"line":134,"column":2}}]},"15":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":2},"end":{"line":156,"column":2}},{"start":{"line":156,"column":2},"end":{"line":156,"column":2}}]},"16":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":33},"end":{"line":158,"column":53}},{"start":{"line":158,"column":58},"end":{"line":158,"column":81}}]},"17":{"line":171,"type":"binary-expr","locations":[{"start":{"line":171,"column":20},"end":{"line":171,"column":35}},{"start":{"line":171,"column":39},"end":{"line":171,"column":53}}]},"18":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":2},"end":{"line":173,"column":2}},{"start":{"line":173,"column":2},"end":{"line":173,"column":2}}]},"19":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":4},"end":{"line":174,"column":4}},{"start":{"line":174,"column":4},"end":{"line":174,"column":4}}]},"20":{"line":174,"type":"binary-expr","locations":[{"start":{"line":174,"column":8},"end":{"line":174,"column":24}},{"start":{"line":174,"column":28},"end":{"line":174,"column":67}}]},"21":{"line":174,"type":"binary-expr","locations":[{"start":{"line":174,"column":30},"end":{"line":174,"column":46}},{"start":{"line":174,"column":50},"end":{"line":174,"column":66}}]},"22":{"line":273,"type":"if","locations":[{"start":{"line":273,"column":2},"end":{"line":273,"column":2}},{"start":{"line":273,"column":2},"end":{"line":273,"column":2}}]},"23":{"line":361,"type":"if","locations":[{"start":{"line":361,"column":2},"end":{"line":361,"column":2}},{"start":{"line":361,"column":2},"end":{"line":361,"column":2}}]},"24":{"line":450,"type":"if","locations":[{"start":{"line":450,"column":2},"end":{"line":450,"column":2}},{"start":{"line":450,"column":2},"end":{"line":450,"column":2}}]},"25":{"line":524,"type":"binary-expr","locations":[{"start":{"line":524,"column":11},"end":{"line":524,"column":17}},{"start":{"line":524,"column":21},"end":{"line":524,"column":23}}]},"26":{"line":527,"type":"binary-expr","locations":[{"start":{"line":527,"column":11},"end":{"line":527,"column":36}},{"start":{"line":527,"column":40},"end":{"line":527,"column":75}}]},"27":{"line":530,"type":"if","locations":[{"start":{"line":530,"column":2},"end":{"line":530,"column":2}},{"start":{"line":530,"column":2},"end":{"line":530,"column":2}}]},"28":{"line":578,"type":"binary-expr","locations":[{"start":{"line":578,"column":11},"end":{"line":578,"column":17}},{"start":{"line":578,"column":21},"end":{"line":578,"column":23}}]},"29":{"line":581,"type":"binary-expr","locations":[{"start":{"line":581,"column":11},"end":{"line":581,"column":36}},{"start":{"line":581,"column":40},"end":{"line":581,"column":75}}]},"30":{"line":710,"type":"binary-expr","locations":[{"start":{"line":710,"column":11},"end":{"line":710,"column":17}},{"start":{"line":710,"column":21},"end":{"line":710,"column":23}}]},"31":{"line":743,"type":"binary-expr","locations":[{"start":{"line":743,"column":11},"end":{"line":743,"column":17}},{"start":{"line":743,"column":21},"end":{"line":743,"column":23}}]},"32":{"line":776,"type":"if","locations":[{"start":{"line":776,"column":2},"end":{"line":776,"column":2}},{"start":{"line":776,"column":2},"end":{"line":776,"column":2}}]},"33":{"line":776,"type":"binary-expr","locations":[{"start":{"line":776,"column":6},"end":{"line":776,"column":34}},{"start":{"line":776,"column":38},"end":{"line":776,"column":47}}]},"34":{"line":800,"type":"binary-expr","locations":[{"start":{"line":800,"column":11},"end":{"line":800,"column":17}},{"start":{"line":800,"column":21},"end":{"line":800,"column":23}}]},"35":{"line":842,"type":"binary-expr","locations":[{"start":{"line":842,"column":11},"end":{"line":842,"column":17}},{"start":{"line":842,"column":21},"end":{"line":842,"column":23}}]},"36":{"line":844,"type":"if","locations":[{"start":{"line":844,"column":2},"end":{"line":844,"column":2}},{"start":{"line":844,"column":2},"end":{"line":844,"column":2}}]},"37":{"line":844,"type":"binary-expr","locations":[{"start":{"line":844,"column":6},"end":{"line":844,"column":24}},{"start":{"line":844,"column":28},"end":{"line":844,"column":56}}]},"38":{"line":857,"type":"binary-expr","locations":[{"start":{"line":857,"column":32},"end":{"line":857,"column":47}},{"start":{"line":857,"column":51},"end":{"line":857,"column":53}}]},"39":{"line":889,"type":"binary-expr","locations":[{"start":{"line":889,"column":11},"end":{"line":889,"column":17}},{"start":{"line":889,"column":21},"end":{"line":889,"column":23}}]},"40":{"line":920,"type":"binary-expr","locations":[{"start":{"line":920,"column":11},"end":{"line":920,"column":17}},{"start":{"line":920,"column":21},"end":{"line":920,"column":23}}]},"41":{"line":945,"type":"binary-expr","locations":[{"start":{"line":945,"column":11},"end":{"line":945,"column":17}},{"start":{"line":945,"column":21},"end":{"line":945,"column":23}}]},"42":{"line":971,"type":"binary-expr","locations":[{"start":{"line":971,"column":11},"end":{"line":971,"column":17}},{"start":{"line":971,"column":21},"end":{"line":971,"column":23}}]},"43":{"line":983,"type":"binary-expr","locations":[{"start":{"line":983,"column":32},"end":{"line":983,"column":47}},{"start":{"line":983,"column":51},"end":{"line":983,"column":53}}]},"44":{"line":1012,"type":"binary-expr","locations":[{"start":{"line":1012,"column":11},"end":{"line":1012,"column":17}},{"start":{"line":1012,"column":21},"end":{"line":1012,"column":23}}]},"45":{"line":1037,"type":"binary-expr","locations":[{"start":{"line":1037,"column":11},"end":{"line":1037,"column":17}},{"start":{"line":1037,"column":21},"end":{"line":1037,"column":23}}]},"46":{"line":1083,"type":"binary-expr","locations":[{"start":{"line":1083,"column":11},"end":{"line":1083,"column":17}},{"start":{"line":1083,"column":21},"end":{"line":1083,"column":23}}]},"47":{"line":1085,"type":"if","locations":[{"start":{"line":1085,"column":2},"end":{"line":1085,"column":2}},{"start":{"line":1085,"column":2},"end":{"line":1085,"column":2}}]},"48":{"line":1085,"type":"binary-expr","locations":[{"start":{"line":1085,"column":6},"end":{"line":1085,"column":24}},{"start":{"line":1085,"column":28},"end":{"line":1085,"column":56}}]}},"code":["/**"," * Copyright 2014 IBM Corp. All Rights Reserved."," *"," * Licensed under the Apache License, Version 2.0 (the \"License\");"," * you may not use this file except in compliance with the License."," * You may obtain a copy of the License at"," *"," *      http://www.apache.org/licenses/LICENSE-2.0"," *"," * Unless required by applicable law or agreed to in writing, software"," * distributed under the License is distributed on an \"AS IS\" BASIS,"," * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."," * See the License for the specific language governing permissions and"," * limitations under the License."," */","","'use strict';","","const extend = require('extend');","const pick = require('object.pick');","const isStream = require('isstream');","const requestFactory = require('../lib/requestwrapper');","const util = require('util');","const BaseService = require('../lib/base_service');","","const NEGATIVE_EXAMPLES = 'negative_examples';","","/**"," * JS-style logical XOR - works on objects, booleans, strings, etc following normal js truthy/falsy conventions"," * @private"," * @param {*} a"," * @param {*} b"," * @return {boolean}"," * @constructor"," */","function xor(a, b) {","  return (a || b) && !(a && b);","}","","/**"," * Determine content-type header for .zip, .png, and .jpg files"," * (The only formats currently supported by the service)"," *"," * based on https://github.com/watson-developer-cloud/node-sdk/issues/333"," *"," * @param {Buffer} buffer"," * @return {String|undefined}"," */","function detectContentType(buffer) {","  const signature = buffer.readUInt32BE();","  switch (signature) { // eslint-disable-line default-case","    case 0x504b0304:","    case 0x504b0506:","    case 0x504b0708:","      return 'application/zip';","    case 0x89504e47:","      return 'image/png';","    case 0xffd8ffe0:","    case 0xffd8ffe1:","    case 0xffd8ffe8:","      return 'image/jpeg';","    // default is `return undefined`","  }","}","","/**"," * Verifies that a stream images_file or a string url is included"," * also gracefully handles cases of image_file instead of images_file"," *"," * @private"," * @param {Object} params"," */","function fixupImageParam(params) {","  if (params && params.image_file && !params.images_file) {","    params.images_file = params.image_file;","  }","","  if (!params || !xor(params.images_file, params.url)) {","    throw new Error('Watson VisualRecognition.classify() requires either an images_file or a url parameter');","  }","","  if (Buffer.isBuffer(params.images_file)) {","    params.images_file = {","      value: params.images_file,","      options: {","        contentType: detectContentType(params.images_file)","      }","    };","  }","}","","/**"," * Creates a function that can be called on responses to format the error then fire the cb"," *"," * @private"," * @param {Function} [cb]"," * @return {Function}"," */","function errorFormatter(cb) {","  const callback = typeof cb === 'function' ? cb /* no op */ : (function() {});","  return function(err, result) {","    if (err) {","      callback(err, result);","    } else {","      if (result.status === 'ERROR') {","        if (result.statusInfo === 'invalid-api-key') {","          callback(","            {","              error: result.statusInfo,","              code: result.statusInfo === 'invalid-api-key' ? 401 : 400","            },","            null","          );","        }","      } else {","        callback(err, result);","      }","    }","  };","}","","/**"," * Visual Recognition v3"," *"," * Normal usage requires an API key."," * Dedicated instances require a username and password."," *"," * @param {Object} options"," * @constructor"," */","function VisualRecognitionV3(options) {","  BaseService.call(this, options);","  // Check if 'version_date' was provided","  if (typeof this._options.version_date === 'undefined') {","    throw new Error('Argument error: version_date was not specified, use 2016-05-20');","  }","  this._options.qs.version = this._options.version_date; // todo: confirm service expects version not version_date","}","util.inherits(VisualRecognitionV3, BaseService);","VisualRecognitionV3.prototype.name = 'visual_recognition';","VisualRecognitionV3.prototype.version = 'v3';","VisualRecognitionV3.URL = 'https://gateway-a.watsonplatform.net/visual-recognition/api';","VisualRecognitionV3.prototype.serviceDefaults = {","  alchemy: true","};","","/**"," * Wrapper for requestFactory that ensures things are formatted the way the service likes"," *"," * @private"," * @param {Object} parameters"," * @param {Function} cb"," */","VisualRecognitionV3.prototype.request = function(parameters, cb) {","  const qs = parameters.options.qs;","  if (qs) {","    // array params are turned into a comma-separated string when in querystrings","    Object.keys(qs).forEach(k => Array.isArray(qs[k]) && (qs[k] = qs[k].join(',')));","  }","  return requestFactory(parameters, cb);","};","","/**"," * Grab the api key"," *"," * @param {Object} options"," * @private"," * @return {Object} new options object"," */","VisualRecognitionV3.prototype.initCredentials = function(options) {","  options.api_key = options.api_key || options.apikey;","  options = extend({}, this.getCredentialsFromBluemix(this.name), this.getCredentialsFromEnvironment(this.name), options);","  if (!options.use_unauthenticated) {","    if (!options.api_key && !(options.username && options.password)) {","      throw new Error('Argument error: api_key or username/password was not specified');","    }","    // Per documentation, Alchemy* services use `apikey`, but Visual Recognition uses (`api_key`)","    // (Either will work in most cases, but the VR Collections & Similarity Search beta only supports `api_key`)","    options.qs = extend({ api_key: options.api_key }, options.qs);","  }","  return options;","};","","/**"," * Pulls api_key from the VISUAL_RECOGNITION_API_KEY env property"," *"," * Also checks for VISUAL_RECOGNITION_USERNAME and VISUAL_RECOGNITION_PASSWORD for dedicated instances."," *"," * @param {String} name"," * @return {{api_key: String|undefined, username: String|undefined, password: String|undefined, url: String|undefined}}"," */","VisualRecognitionV3.prototype.getCredentialsFromEnvironment = function(name) {","  return extend(","    {","      api_key: process.env[name.toUpperCase() + '_API_KEY']","    },","    BaseService.prototype.getCredentialsFromEnvironment.call(this, name)","  );","};","","/**"," * Bluemix uses a different naming convention for VR v3 than for other services"," * @return {*}"," */","VisualRecognitionV3.prototype.getCredentialsFromBluemix = function() {","  return BaseService.prototype.getCredentialsFromBluemix.call(this, 'watson_vision_combined');","};","","/**"," * Accepts either a url, a single image file, or a zip file with multiple"," * images (.jpeg, .png, .gif) and scores every available classifier"," * on each image. It then applies a threshold and returns the list"," * of relevant classifier scores for each image."," *"," * @example"," * * {"," *   \"images\": [{"," *     \"classifiers\": [{"," *       \"classes\": [{"," *         \"class\": \"animal\","," *         \"score\": 0.998771,"," *         \"type_hierarchy\": \"/animals\""," *       }, {"," *         \"class\": \"mammal\","," *         \"score\": 0.998499,"," *         \"type_hierarchy\": \"/animals/mammal\""," *       }, {"," *         \"class\": \"dog\","," *         \"score\": 0.900249,"," *         \"type_hierarchy\": \"/animals/pets/dog\""," *       }, {"," *         \"class\": \"puppy\","," *         \"score\": 0.5,"," *         \"type_hierarchy\": \"/animals/pets/puppy\""," *       }],"," *       \"classifier_id\": \"default\","," *       \"name\": \"default\""," *     }],"," *     \"image\": \"dog.jpg\""," *   }],"," *   \"images_processed\": 1"," * }"," *"," * @param {Object} params"," * @param {ReadStream|Buffer|Object} [params.images_file] The image file (.jpg, .png, .gif) or compressed (.zip) file of images to classify. The total number of images is limited to 20. Either images_file or url must be specified. The SDK attempts to determine content-type automatically, but this may be overridden by providing an object: {value: Buffer|Stream, options: {filename: 'file.ext', contentType: 'image/type'}}"," * @param {String} [params.url] The URL of an image (.jpg, .png, .gif). Redirects are followed, so you can use shortened URLs. The resolved URL is returned in the response. Either images_file or url must be specified."," * @param {Array} [params.classifier_ids=['default']] An array of classifier IDs to classify the images against."," * @param {Array} [params.owners=['me','IBM']] An array with the value(s) \"IBM\" and/or \"me\" to specify which classifiers to run."," * @param {Number} [params.threshold] A floating point value that specifies the minimum score a class must have to be displayed in the response."," * @param {Function} callback"," *"," * @return {ReadableStream|undefined}"," *"," */","VisualRecognitionV3.prototype.classify = function(params, callback) {","  try {","    fixupImageParam(params);","  } catch (e) {","    callback(e);","    return;","  }","","  params = extend(","    {","      classifier_ids: ['default'],","      owners: ['me', 'IBM']","    },","    params","  );","","  let parameters;","","  if (params.images_file) {","    parameters = {","      options: {","        url: '/v3/classify',","        method: 'POST',","        formData: {","          images_file: params.images_file,","          parameters: {","            value: JSON.stringify(pick(params, ['classifier_ids', 'owners', 'threshold'])),","            options: {","              contentType: 'application/json'","            }","          }","        },","        headers: pick(params, 'Accept-Language')","      },","      defaultOptions: this._options","    };","  } else {","    parameters = {","      options: {","        url: '/v3/classify',","        method: 'GET',","        json: true,","        qs: pick(params, ['url', 'classifier_ids', 'owners', 'threshold']),","        headers: pick(params, 'Accept-Language')","      },","      defaultOptions: this._options","    };","  }","","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Accepts either a url, a single image file, or a zip file with multiple"," * images (.jpeg, .png, .gif) and attempts to extract faces and"," * identities. It then applies a threshold"," * and returns the list of relevant identities, locations, and metadata"," * for found faces for each image."," *"," * @example"," * {"," *   \"images\": [{"," *     \"faces\": [{"," *       \"age\": {"," *         \"max\": 54,"," *         \"min\": 45,"," *         \"score\": 0.40459"," *       },"," *       \"face_location\": {"," *         \"height\": 131,"," *         \"left\": 80,"," *         \"top\": 68,"," *         \"width\": 123"," *       },"," *       \"gender\": {"," *         \"gender\": \"MALE\","," *         \"score\": 0.993307"," *       },"," *       \"identity\": {"," *         \"name\": \"Barack Obama\","," *         \"score\": 0.970688,"," *         \"type_hierarchy\": \"/people/politicians/democrats/barack obama\""," *       }"," *     }],"," *     \"image\": \"obama.jpg\""," *   }],"," *   \"images_processed\": 1"," * }"," *"," * @param {Object} params"," * @param {ReadStream} [params.images_file] The image file (.jpg, .png, .gif) or compressed (.zip) file of images to classify. The total number of images is limited to 15. Either images_file or url must be specified."," * @param {String} [params.url] The URL of an image (.jpg, .png, .gif). Redirects are followed, so you can use shortened URLs. The resolved URL is returned in the response. Either images_file or url must be specified."," * @param {Function} callback"," *"," * @return {ReadableStream|undefined}"," */","VisualRecognitionV3.prototype.detectFaces = function(params, callback) {","  try {","    fixupImageParam(params);","  } catch (e) {","    callback(e);","    return;","  }","","  let parameters;","","  if (params.images_file) {","    parameters = {","      options: {","        url: '/v3/detect_faces',","        method: 'POST',","        json: true,","        formData: pick(params, ['images_file'])","      },","      defaultOptions: this._options","    };","  } else {","    parameters = {","      options: {","        url: '/v3/detect_faces',","        method: 'GET',","        json: true,","        qs: pick(params, ['url'])","      },","      defaultOptions: this._options","    };","  }","","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Accepts either a url, single image file, or a zip file with multiple"," * images (.jpeg, .png, .gif) and attempts to recognize text"," * found in the image. It then applies a threshold"," * and returns the list of relevant locations, strings,  and metadata"," * for discovered text in each image."," *"," * @example"," * {"," *   \"images\": [{"," *     \"image\": \"car.png\","," *     \"text\": \"3 jag [brio]\","," *     \"words\": [{"," *       \"line_number\": 0,"," *       \"location\": {"," *         \"height\": 53,"," *         \"left\": 204,"," *         \"top\": 294,"," *         \"width\": 27"," *       },"," *       \"score\": 0.50612,"," *       \"word\": \"3\""," *     }, {"," *       \"line_number\": 0,"," *       \"location\": {"," *         \"height\": 32,"," *         \"left\": 264,"," *         \"top\": 288,"," *         \"width\": 56"," *       },"," *       \"score\": 0.958628,"," *       \"word\": \"jag\""," *     }, {"," *       \"line_number\": 0,"," *       \"location\": {"," *         \"height\": 40,"," *         \"left\": 324,"," *         \"top\": 288,"," *         \"width\": 92"," *       },"," *       \"score\": 0.00165806,"," *       \"word\": \"brio\""," *     }]"," *   }],"," *   \"images_processed\": 1"," * }"," *"," * @param {Object} params"," * @param {ReadStream} [params.images_file] The image file (.jpg, .png, .gif) or compressed (.zip) file of images to classify. The total number of images is limited to 10. Either images_file or url must be specified."," * @param {String} [params.url] The URL of an image (.jpg, .png, .gif). Redirects are followed, so you can use shortened URLs. The resolved URL is returned in the response. Either images_file or url must be specified."," * @param {Function} callback"," *"," * @return {ReadableStream|undefined}"," */","VisualRecognitionV3.prototype.recognizeText = function(params, callback) {","  try {","    fixupImageParam(params);","  } catch (e) {","    callback(e);","    return;","  }","","  let parameters;","","  if (params.images_file) {","    parameters = {","      options: {","        url: '/v3/recognize_text',","        method: 'POST',","        json: true,","        formData: pick(params, ['images_file'])","      },","      defaultOptions: this._options","    };","  } else {","    parameters = {","      options: {","        url: '/v3/recognize_text',","        method: 'GET',","        json: true,","        qs: pick(params, ['url'])","      },","      defaultOptions: this._options","    };","  }","","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Train a new classifier from example images which are uploaded."," * This call returns before training has completed.  You'll need to use the"," * getClassifer method to make sure the classifier has completed training and"," * was successful before you can classify any images with the newly created"," * classifier."," *"," * @example"," * {"," *   foo_positive_examples: fs.createReadStream('./foo-pics.zip'),"," *   negative_examples: fs.createReadStream('./not-foo-pics.zip'),"," *   name: 'to-foo-or-not'"," * }"," * @example"," * {"," *  foo_positive_examples: fs.createReadStream('./foo-pics.zip'),"," *  bar_positive_examples: fs.createReadStream('./bar-pics.zip'),"," *  name: 'foo-vs-bar'"," * }"," * @example"," * {"," *  foo_positive_examples: fs.createReadStream('./foo-pics.zip'),"," *  bar_positive_examples: fs.createReadStream('./bar-pics.zip'),"," *  negative_examples: fs.createReadStream('./not-foo-pics.zip'),"," *  name: 'foo-bar-not'"," * }"," *"," * @example"," * {"," *   \"classifier_id\": \"fruit_679357912\","," *   \"name\": \"fruit\","," *   \"owner\": \"a3a48ea7-492b-448b-87d7-9dade8bde5a9\","," *   \"status\": \"training\","," *   \"created\": \"2016-05-23T21:50:41.680Z\","," *   \"classes\": [{"," *     \"class\": \"banana\""," *   }, {"," *     \"class\": \"apple\""," *   }]"," * }"," *"," * @param {Object} params"," * @param {String} params.name The desired short name of the new classifier."," * @param {ReadStream} params.classname_positive_examples <your_class_name>_positive_examples One or more compressed (.zip) files of images that depict the visual subject for a class within the new classifier. Must contain a minimum of 10 images. You may supply multiple files with different class names in the key."," * @param {ReadStream} [params.negative_examples] A compressed (.zip) file of images that do not depict the visual subject of any of the classes of the new classifier. Must contain a minimum of 10 images. Required if only one positive set is provided."," *"," * @return {ReadableStream|undefined}"," */","VisualRecognitionV3.prototype.createClassifier = function(params, callback) {","  params = params || {};","","  const example_keys = Object.keys(params).filter(function(key) {","    return key === NEGATIVE_EXAMPLES || key.match(/^.+_positive_examples$/);","  });","","  if (example_keys.length < 2) {","    callback(new Error('Missing required parameters: either two *_positive_examples or one *_positive_examples and one negative_examples must be provided.'));","    return;","  }","  // todo: validate that all *_examples are streams or else objects with buffers and content-types","  const allowed_keys = ['name', NEGATIVE_EXAMPLES].concat(example_keys);","","  const parameters = {","    options: {","      url: '/v3/classifiers',","      method: 'POST',","      json: true,","      formData: pick(params, allowed_keys)","    },","    requiredParams: ['name'],","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Retrain a existing classifier from example images which are uploaded."," * This call returns before retraining has completed.  You'll need to use the"," * getClassifer method to make sure the classifier has completed retraining and"," * was successful before you can classify any images with the retrained"," * classifier."," *"," * @example"," * {"," *   \"classifier_id\": \"fruit_679357912\","," *   \"name\": \"fruit\","," *   \"owner\": \"a3a48ea7-492b-448b-87d7-9dade8bde5a9\","," *   \"status\": \"training\","," *   \"created\": \"2016-05-23T21:50:41.680Z\","," *   \"classes\": [{"," *     \"class\": \"banana\""," *   }, {"," *     \"class\": \"apple\""," *   }]"," * }"," *"," * @param {Object} params"," * @param {ReadStream} params.classname_positive_examples <your_class_name>_positive_examples One or more compressed (.zip) files of images that depict the visual subject for a class within the classifier. You may supply multiple files with different class names in the key."," * @param {ReadStream} [params.negative_examples] A compressed (.zip) file of images that do not depict the visual subject of any of the classes of the classifier."," *"," * @return {ReadableStream|undefined}"," */","VisualRecognitionV3.prototype.retrainClassifier = function(params, callback) {","  params = params || {};","","  const allowed_keys = Object.keys(params).filter(function(key) {","    return key === NEGATIVE_EXAMPLES || key.match(/^.+_positive_examples$/);","  });","","  const parameters = {","    options: {","      url: '/v3/classifiers/' + params.classifier_id,","      method: 'POST',","      json: true,","      formData: pick(params, allowed_keys)","    },","    requiredParams: [],","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Retrieve a list of all classifiers, including built-in and"," * user-created classifiers."," *"," * @example"," * {"," *   \"classifiers\": [{"," *     \"classifier_id\": \"fruit_679357912\","," *     \"name\": \"fruit\","," *     \"status\": \"ready\""," *   }, {"," *     \"classifier_id\": \"Dogs_2017013066\","," *     \"name\": \"Dogs\","," *     \"status\": \"ready\""," *   }]"," * }"," *"," * @param {Object} params"," * @param {Boolean} [params.verbose=false]"," * @param {Function} callback"," * @return {ReadableStream|undefined}"," */","VisualRecognitionV3.prototype.listClassifiers = function(params, callback) {","  const parameters = {","    options: {","      method: 'GET',","      url: '/v3/classifiers',","      qs: pick(params, ['verbose']),","      json: true","    },","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Retrieves information about a specific classifier."," *"," * @example"," * {"," *   \"classifier_id\": \"fruit_679357912\","," *   \"name\": \"fruit\","," *   \"owner\": \"a3a42ea7-492b-448b-87d7-9dfde8bde519 \","," *   \"status\": \"ready\","," *   \"created\": \"2016-05-23T21:50:41.680Z\","," *   \"classes\": [{"," *     \"class\": \"banana\""," *   }, {"," *     \"class\": \"apple\""," *   }]"," * }"," *"," * @param {Object} params"," * @param {Boolean} params.classifier_id The classifier id"," * @param {Function} callback"," * @return {ReadableStream|undefined}"," */","VisualRecognitionV3.prototype.getClassifier = function(params, callback) {","  const parameters = {","    options: {","      method: 'GET',","      url: '/v3/classifiers/{classifier_id}',","      path: params,","      json: true","    },","    requiredParams: ['classifier_id'],","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Deletes a custom classifier with the specified classifier id."," *"," * @param {Object} params"," * @param {String} params.classifier_id The classifier id"," * @param {Function} callback"," * @return {ReadableStream|undefined}"," */","VisualRecognitionV3.prototype.deleteClassifier = function(params, callback) {","  const parameters = {","    options: {","      method: 'DELETE',","      url: '/v3/classifiers/{classifier_id}',","      path: params,","      json: true","    },","    requiredParams: ['classifier_id'],","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","// collections & similarity search","","/**"," * Create a collection"," * Beta. Create a new collection of images to search. You can create a maximum of 5 collections."," *"," * Example response:","","   { collection_id: 'integration_test_1474313373701_d9665f',","     name: 'integration_test_1474313373701',","     status: 'available',","     created: '2016-09-19T19:29:34.019Z',","     images: 0,","     capacity: 1000000 }",""," * @param {Object} params"," * @param {String} params.name The name of the new collection. The name can be a maximum of 128 UTF8 characters, with no spaces."," * @param {Function} callback"," */","VisualRecognitionV3.prototype.createCollection = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v3/collections',","      method: 'POST',","      json: true,","      formData: pick(params, ['name'])","    },","    requiredParams: ['name'],","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Retrieve collection details"," * Beta. Retrieve information about a specific collection."," *"," * Example response:",""," { collection_id: 'integration_test_1474313373701_d9665f',","   name: 'integration_test_1474313373701',","   status: 'available',","   created: '2016-09-19T19:29:34.019Z',","   images: 0,","   capacity: 1000000 }",""," * @param {Object} params"," * @param {String} params.collection_id"," * @param {Function} callback"," */","VisualRecognitionV3.prototype.getCollection = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v3/collections/{collection_id}',","      method: 'GET',","      json: true,","      path: params","    },","    requiredParams: ['collection_id'],","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * List collections"," * Beta. List all custom collections."," *"," * Example response:",""," { collections:","   [ { collection_id: 'integration_test_1474313967414_0e320b',","       name: 'integration_test_1474313967414',","       status: 'available',","       created: '2016-09-19T19:39:27.811Z',","       images: 0,","       capacity: 1000000 } ] }",""," * @param {Object} [params]"," * @param {Function} callback"," */","VisualRecognitionV3.prototype.listCollections = function(params, callback) {","  if (typeof params === 'function' && !callback) {","    callback = params;","  }","","  const parameters = {","    options: {","      url: '/v3/collections',","      method: 'GET',","      json: true","    },","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Delete a collection"," * Beta. Delete a user created collection."," *"," * @param {Object} params"," * @param {String} params.collection_id"," * @param {Function} callback"," */","VisualRecognitionV3.prototype.deleteCollection = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v3/collections/{collection_id}',","      method: 'DELETE',","      json: true,","      path: params","    },","    requiredParams: ['collection_id'],","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Add an image to a collection"," * Beta. Add images to a collection. Each collection can contain 1000000 images."," *"," * Example Response:",""," {","   \"images\": [","     {","       \"image_id\": \"9725bc\",","       \"image_file\": \"obama.jpg\",","       \"created\": \"2016-09-20T14:41:49.927Z\",","       \"metadata\": {","         \"foo\": \"bar\"","       }","     }","   ],","   \"images_processed\": 1"," }",""," * @param {Object} params"," * @param {String} params.collection_id"," * @param {ReadableStream} params.image_file The image file (.jpg or .png) of the image to add to the collection. Maximum file size of 2 MB."," * @param {Object} [params.metadata] optional arbitrary metadata. This can be anything that can be specified in a JSON object. For example, key-value pairs. Maximum 2 KB of metadata for each image."," * @param {Function} callback"," */","VisualRecognitionV3.prototype.addImage = function(params, callback) {","  params = params || {};","","  if (!params.image_file || !isStream(params.image_file)) {","    throw new Error('image_file param must be a standard Node.js Stream');","  }","","  const parameters = {","    options: {","      url: '/v3/collections/{collection_id}/images',","      method: 'POST',","      json: true,","      path: params,","      formData: {","        image_file: params.image_file,","        metadata: {","          value: JSON.stringify(params.metadata || {}),","          options: {","            contentType: 'application/json',","            filename: 'metadata.json' // it doesn't matter what the filename is, but the service requires that *some* filename be set or else it ignores the metadata","          }","        }","      }","    },","    requiredParams: ['collection_id', 'image_file'],","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * List images in a collection"," * Beta. List the first 100 images in a collection. Each collection can contain 1000000 images."," *"," * Example Response:","","{ images:","  [ { image_id: '83f3ff',","     image_file: 'obama.jpg',","     created: '2016-09-19T21:07:15.141Z' } ] }"," *"," * @param {Object} params"," * @param {String} params.collection_id"," * @param {ReadableStream} params.image_file The image file (.jpg or .png) of the image to add to the collection. Maximum file size of 2 MB."," * @param {Object} [params.metadata] optional arbitrary metadata. This can be anything that can be specified in a JSON object. For example, key-value pairs. Maximum 2 KB of metadata for each image."," * @param {Function} callback"," */","VisualRecognitionV3.prototype.listImages = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v3/collections/{collection_id}/images',","      method: 'GET',","      json: true,","      path: params","    },","    requiredParams: ['collection_id'],","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Get image details"," * Beta. List details about a specific image in a collection."," *"," * Example Response:","","{ image_id: '83f3ff',","  image_file: 'obama.jpg',","  created: '2016-09-19T21:07:15.141Z'",""," * @param {Object} params"," * @param {String} params.collection_id"," * @param {String} params.image_id"," * @param {Function} callback"," */","VisualRecognitionV3.prototype.getImage = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v3/collections/{collection_id}/images/{image_id}',","      method: 'GET',","      json: true,","      path: params","    },","    requiredParams: ['collection_id', 'image_id'],","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Delete an image"," * Beta. Delete an image from a collection."," *"," * @param {Object} params"," * @param {String} params.collection_id"," * @param {String} params.image_id"," * @param {Function} callback"," */","VisualRecognitionV3.prototype.deleteImage = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v3/collections/{collection_id}/images/{image_id}',","      method: 'DELETE',","      json: true,","      path: params","    },","    requiredParams: ['collection_id', 'image_id'],","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Add or update metadata"," * Beta. Add metadata to a specific image in a collection."," *"," * @param {Object} params"," * @param {String} params.collection_id"," * @param {String} params.image_id"," * @param {Object} params.metadata Can be anything that can be specified in a JSON object. For example, key-value pairs. Maximum 2 KB of metadata for each image."," * @param {Function} callback"," */","VisualRecognitionV3.prototype.setImageMetadata = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v3/collections/{collection_id}/images/{image_id}/metadata',","      method: 'PUT',","      json: true,","      path: params,","      headers: { 'Content-Type': 'multipart/form-data' },","      // todo: manually create a body string that looks like a POST form data body even though it's a PUT","      formData: {","        metadata: {","          value: JSON.stringify(params.metadata || {}),","          options: {","            contentType: 'application/json',","            filename: 'metadata.json' // it doesn't matter what the filename is, but the service requires that *some* filename be set or else it gives a confusing \"Missing multipart/form-data\" error","          }","        }","      }","    },","    requiredParams: ['collection_id', 'image_id', 'metadata'],","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Get image metadata"," * Beta. View the metadata for a specific image in a collection."," *"," * Example Response:",""," {\"foo\": \"bar\"}",""," *"," * @param {Object} params"," * @param {String} params.collection_id"," * @param {ReadableStream} params.image_id"," * @param {Function} callback"," */","VisualRecognitionV3.prototype.getImageMetadata = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v3/collections/{collection_id}/images/{image_id}/metadata',","      method: 'GET',","      json: true,","      path: params","    },","    requiredParams: ['collection_id', 'image_id'],","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Delete image metadata"," * Beta. Delete all metadata associated with an image."," *"," * @param {Object} params"," * @param {String} params.collection_id"," * @param {ReadableStream} params.image_id"," * @param {Function} callback"," */","VisualRecognitionV3.prototype.deleteImageMetadata = function(params, callback) {","  params = params || {};","","  const parameters = {","    options: {","      url: '/v3/collections/{collection_id}/images/{image_id}/metadata',","      method: 'DELETE',","      json: true,","      path: params","    },","    requiredParams: ['collection_id', 'image_id'],","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","/**"," * Find similar images"," * Beta. Upload an image to find similar images in your custom collection."," *"," * Example response:",""," {","    \"similar_images\":[","       {","          \"image_id\":\"dresses_1257263\",","          \"created\":\"2016-09-04T21:49:16.908Z\",","          \"metadata\":{","             \"weight\":10,","             \"cut\":\"a line\",","             \"color\":\"red\"","          },","          \"score\":\"0.79\"","       }","    ],","    \"image_file\":\"red_dress.jpg\",","    \"images_processed\": 1"," }",""," * @param {Object} params"," * @param {String} params.collection_id The collection id"," * @param {ReadableStream} params.image_file The image file (.jpg or .png) of the image to search against the collection."," * @param {Number} [params.limit=10]  limit The number of similar results you want returned. Default limit is 10 results, you can specify a maximum limit of 100 results."," * @param {Function} callback"," * @return {ReadableStream|undefined}"," */","VisualRecognitionV3.prototype.findSimilar = function(params, callback) {","  params = params || {};","","  if (!params.image_file || !isStream(params.image_file)) {","    throw new Error('image_file param must be a standard Node.js Stream');","  }","","  const parameters = {","    options: {","      url: '/v3/collections/{collection_id}/find_similar',","      method: 'POST',","      json: true,","      qs: pick(params, ['limit']),","      formData: pick(params, ['image_file']),","      path: pick(params, ['collection_id'])","    },","    requiredParams: ['collection_id', 'image_file'],","    defaultOptions: this._options","  };","  return this.request(parameters, errorFormatter(callback));","};","","module.exports = VisualRecognitionV3;",""],"l":{"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"26":1,"36":1,"37":0,"49":1,"50":0,"51":0,"55":0,"57":0,"61":0,"73":1,"74":0,"75":0,"78":0,"79":0,"82":0,"83":0,"99":1,"100":0,"101":0,"102":0,"103":0,"105":0,"106":0,"107":0,"116":0,"131":1,"132":0,"134":0,"135":0,"137":0,"139":1,"140":1,"141":1,"142":1,"143":1,"154":1,"155":0,"156":0,"158":0,"160":0,"170":1,"171":0,"172":0,"173":0,"174":0,"175":0,"179":0,"181":0,"192":1,"193":0,"205":1,"206":0,"255":1,"256":0,"257":0,"259":0,"260":0,"263":0,"271":0,"273":0,"274":0,"292":0,"304":0,"351":1,"352":0,"353":0,"355":0,"356":0,"359":0,"361":0,"362":0,"372":0,"383":0,"440":1,"441":0,"442":0,"444":0,"445":0,"448":0,"450":0,"451":0,"461":0,"472":0,"523":1,"524":0,"526":0,"527":0,"530":0,"531":0,"532":0,"535":0,"537":0,"547":0,"577":1,"578":0,"580":0,"581":0,"584":0,"594":0,"619":1,"620":0,"629":0,"654":1,"655":0,"665":0,"676":1,"677":0,"687":0,"709":1,"710":0,"712":0,"722":0,"742":1,"743":0,"745":0,"755":0,"775":1,"776":0,"777":0,"780":0,"788":0,"799":1,"800":0,"802":0,"812":0,"841":1,"842":0,"844":0,"845":0,"848":0,"868":0,"888":1,"889":0,"891":0,"901":0,"919":1,"920":0,"922":0,"932":0,"944":1,"945":0,"947":0,"957":0,"970":1,"971":0,"973":0,"994":0,"1011":1,"1012":0,"1014":0,"1024":0,"1036":1,"1037":0,"1039":0,"1049":0,"1082":1,"1083":0,"1085":0,"1086":0,"1089":0,"1101":0,"1104":1}}}